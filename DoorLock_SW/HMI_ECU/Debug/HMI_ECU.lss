
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003e70  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000102  00800060  00003e70  00003f04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  00800162  00800162  00004006  2**0
                  ALLOC
  3 .stab         00003720  00000000  00000000  00004008  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014cd  00000000  00000000  00007728  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008bf5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008d35  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008ea5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000aaee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b9d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c788  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c8e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000cb75  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d343  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 c7 1b 	jmp	0x378e	; 0x378e <__vector_3>
      10:	0c 94 94 1b 	jmp	0x3728	; 0x3728 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 61 1b 	jmp	0x36c2	; 0x36c2 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 2e 1b 	jmp	0x365c	; 0x365c <__vector_8>
      24:	0c 94 c8 1a 	jmp	0x3590	; 0x3590 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 fb 1a 	jmp	0x35f6	; 0x35f6 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e7       	ldi	r30, 0x70	; 112
      68:	fe e3       	ldi	r31, 0x3E	; 62
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 36       	cpi	r26, 0x62	; 98
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e6       	ldi	r26, 0x62	; 98
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 37       	cpi	r26, 0x7C	; 124
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 8c 19 	call	0x3318	; 0x3318 <main>
      8a:	0c 94 36 1f 	jmp	0x3e6c	; 0x3e6c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ba 1e 	jmp	0x3d74	; 0x3d74 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e4       	ldi	r26, 0x4B	; 75
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d6 1e 	jmp	0x3dac	; 0x3dac <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c6 1e 	jmp	0x3d8c	; 0x3d8c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e2 1e 	jmp	0x3dc4	; 0x3dc4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c6 1e 	jmp	0x3d8c	; 0x3d8c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e2 1e 	jmp	0x3dc4	; 0x3dc4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ba 1e 	jmp	0x3d74	; 0x3d74 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8b e4       	ldi	r24, 0x4B	; 75
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d6 1e 	jmp	0x3dac	; 0x3dac <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c6 1e 	jmp	0x3d8c	; 0x3d8c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 e2 1e 	jmp	0x3dc4	; 0x3dc4 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 c6 1e 	jmp	0x3d8c	; 0x3d8c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 e2 1e 	jmp	0x3dc4	; 0x3dc4 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 c6 1e 	jmp	0x3d8c	; 0x3d8c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 e2 1e 	jmp	0x3dc4	; 0x3dc4 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ca 1e 	jmp	0x3d94	; 0x3d94 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 e6 1e 	jmp	0x3dcc	; 0x3dcc <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	61 e0       	ldi	r22, 0x01	; 1
     b5c:	41 e0       	ldi	r20, 0x01	; 1
     b5e:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	62 e0       	ldi	r22, 0x02	; 2
     b66:	41 e0       	ldi	r20, 0x01	; 1
     b68:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <GPIO_setupPinDirection>
	LCD_sendCommand(LCD_GO_TO_HOME);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */

#elif (LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	6f ef       	ldi	r22, 0xFF	; 255
     b70:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <GPIO_setupPortDirection>
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
     b74:	88 e3       	ldi	r24, 0x38	; 56
     b76:	0e 94 c6 05 	call	0xb8c	; 0xb8c <LCD_sendCommand>
#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
     b7a:	8c e0       	ldi	r24, 0x0C	; 12
     b7c:	0e 94 c6 05 	call	0xb8c	; 0xb8c <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
     b80:	81 e0       	ldi	r24, 0x01	; 1
     b82:	0e 94 c6 05 	call	0xb8c	; 0xb8c <LCD_sendCommand>
}
     b86:	cf 91       	pop	r28
     b88:	df 91       	pop	r29
     b8a:	08 95       	ret

00000b8c <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
     b8c:	df 93       	push	r29
     b8e:	cf 93       	push	r28
     b90:	cd b7       	in	r28, 0x3d	; 61
     b92:	de b7       	in	r29, 0x3e	; 62
     b94:	ea 97       	sbiw	r28, 0x3a	; 58
     b96:	0f b6       	in	r0, 0x3f	; 63
     b98:	f8 94       	cli
     b9a:	de bf       	out	0x3e, r29	; 62
     b9c:	0f be       	out	0x3f, r0	; 63
     b9e:	cd bf       	out	0x3d, r28	; 61
     ba0:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
     ba2:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	60 e0       	ldi	r22, 0x00	; 0
     ba8:	40 e0       	ldi	r20, 0x00	; 0
     baa:	0e 94 4c 0b 	call	0x1698	; 0x1698 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
     bae:	81 e0       	ldi	r24, 0x01	; 1
     bb0:	61 e0       	ldi	r22, 0x01	; 1
     bb2:	40 e0       	ldi	r20, 0x00	; 0
     bb4:	0e 94 4c 0b 	call	0x1698	; 0x1698 <GPIO_writePin>
     bb8:	80 e0       	ldi	r24, 0x00	; 0
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	a0 e8       	ldi	r26, 0x80	; 128
     bbe:	bf e3       	ldi	r27, 0x3F	; 63
     bc0:	8d ab       	std	Y+53, r24	; 0x35
     bc2:	9e ab       	std	Y+54, r25	; 0x36
     bc4:	af ab       	std	Y+55, r26	; 0x37
     bc6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bc8:	6d a9       	ldd	r22, Y+53	; 0x35
     bca:	7e a9       	ldd	r23, Y+54	; 0x36
     bcc:	8f a9       	ldd	r24, Y+55	; 0x37
     bce:	98 ad       	ldd	r25, Y+56	; 0x38
     bd0:	20 e0       	ldi	r18, 0x00	; 0
     bd2:	30 e0       	ldi	r19, 0x00	; 0
     bd4:	4a e7       	ldi	r20, 0x7A	; 122
     bd6:	53 e4       	ldi	r21, 0x43	; 67
     bd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bdc:	dc 01       	movw	r26, r24
     bde:	cb 01       	movw	r24, r22
     be0:	89 ab       	std	Y+49, r24	; 0x31
     be2:	9a ab       	std	Y+50, r25	; 0x32
     be4:	ab ab       	std	Y+51, r26	; 0x33
     be6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     be8:	69 a9       	ldd	r22, Y+49	; 0x31
     bea:	7a a9       	ldd	r23, Y+50	; 0x32
     bec:	8b a9       	ldd	r24, Y+51	; 0x33
     bee:	9c a9       	ldd	r25, Y+52	; 0x34
     bf0:	20 e0       	ldi	r18, 0x00	; 0
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	40 e8       	ldi	r20, 0x80	; 128
     bf6:	5f e3       	ldi	r21, 0x3F	; 63
     bf8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bfc:	88 23       	and	r24, r24
     bfe:	2c f4       	brge	.+10     	; 0xc0a <LCD_sendCommand+0x7e>
		__ticks = 1;
     c00:	81 e0       	ldi	r24, 0x01	; 1
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	98 ab       	std	Y+48, r25	; 0x30
     c06:	8f a7       	std	Y+47, r24	; 0x2f
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <LCD_sendCommand+0xfc>
	else if (__tmp > 65535)
     c0a:	69 a9       	ldd	r22, Y+49	; 0x31
     c0c:	7a a9       	ldd	r23, Y+50	; 0x32
     c0e:	8b a9       	ldd	r24, Y+51	; 0x33
     c10:	9c a9       	ldd	r25, Y+52	; 0x34
     c12:	20 e0       	ldi	r18, 0x00	; 0
     c14:	3f ef       	ldi	r19, 0xFF	; 255
     c16:	4f e7       	ldi	r20, 0x7F	; 127
     c18:	57 e4       	ldi	r21, 0x47	; 71
     c1a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c1e:	18 16       	cp	r1, r24
     c20:	4c f5       	brge	.+82     	; 0xc74 <LCD_sendCommand+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c22:	6d a9       	ldd	r22, Y+53	; 0x35
     c24:	7e a9       	ldd	r23, Y+54	; 0x36
     c26:	8f a9       	ldd	r24, Y+55	; 0x37
     c28:	98 ad       	ldd	r25, Y+56	; 0x38
     c2a:	20 e0       	ldi	r18, 0x00	; 0
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	40 e2       	ldi	r20, 0x20	; 32
     c30:	51 e4       	ldi	r21, 0x41	; 65
     c32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c36:	dc 01       	movw	r26, r24
     c38:	cb 01       	movw	r24, r22
     c3a:	bc 01       	movw	r22, r24
     c3c:	cd 01       	movw	r24, r26
     c3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c42:	dc 01       	movw	r26, r24
     c44:	cb 01       	movw	r24, r22
     c46:	98 ab       	std	Y+48, r25	; 0x30
     c48:	8f a7       	std	Y+47, r24	; 0x2f
     c4a:	0f c0       	rjmp	.+30     	; 0xc6a <LCD_sendCommand+0xde>
     c4c:	89 e1       	ldi	r24, 0x19	; 25
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	9e a7       	std	Y+46, r25	; 0x2e
     c52:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c54:	8d a5       	ldd	r24, Y+45	; 0x2d
     c56:	9e a5       	ldd	r25, Y+46	; 0x2e
     c58:	01 97       	sbiw	r24, 0x01	; 1
     c5a:	f1 f7       	brne	.-4      	; 0xc58 <LCD_sendCommand+0xcc>
     c5c:	9e a7       	std	Y+46, r25	; 0x2e
     c5e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c60:	8f a5       	ldd	r24, Y+47	; 0x2f
     c62:	98 a9       	ldd	r25, Y+48	; 0x30
     c64:	01 97       	sbiw	r24, 0x01	; 1
     c66:	98 ab       	std	Y+48, r25	; 0x30
     c68:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c6a:	8f a5       	ldd	r24, Y+47	; 0x2f
     c6c:	98 a9       	ldd	r25, Y+48	; 0x30
     c6e:	00 97       	sbiw	r24, 0x00	; 0
     c70:	69 f7       	brne	.-38     	; 0xc4c <LCD_sendCommand+0xc0>
     c72:	14 c0       	rjmp	.+40     	; 0xc9c <LCD_sendCommand+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c74:	69 a9       	ldd	r22, Y+49	; 0x31
     c76:	7a a9       	ldd	r23, Y+50	; 0x32
     c78:	8b a9       	ldd	r24, Y+51	; 0x33
     c7a:	9c a9       	ldd	r25, Y+52	; 0x34
     c7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c80:	dc 01       	movw	r26, r24
     c82:	cb 01       	movw	r24, r22
     c84:	98 ab       	std	Y+48, r25	; 0x30
     c86:	8f a7       	std	Y+47, r24	; 0x2f
     c88:	8f a5       	ldd	r24, Y+47	; 0x2f
     c8a:	98 a9       	ldd	r25, Y+48	; 0x30
     c8c:	9c a7       	std	Y+44, r25	; 0x2c
     c8e:	8b a7       	std	Y+43, r24	; 0x2b
     c90:	8b a5       	ldd	r24, Y+43	; 0x2b
     c92:	9c a5       	ldd	r25, Y+44	; 0x2c
     c94:	01 97       	sbiw	r24, 0x01	; 1
     c96:	f1 f7       	brne	.-4      	; 0xc94 <LCD_sendCommand+0x108>
     c98:	9c a7       	std	Y+44, r25	; 0x2c
     c9a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	62 e0       	ldi	r22, 0x02	; 2
     ca0:	41 e0       	ldi	r20, 0x01	; 1
     ca2:	0e 94 4c 0b 	call	0x1698	; 0x1698 <GPIO_writePin>
     ca6:	80 e0       	ldi	r24, 0x00	; 0
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	a0 e8       	ldi	r26, 0x80	; 128
     cac:	bf e3       	ldi	r27, 0x3F	; 63
     cae:	8f a3       	std	Y+39, r24	; 0x27
     cb0:	98 a7       	std	Y+40, r25	; 0x28
     cb2:	a9 a7       	std	Y+41, r26	; 0x29
     cb4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cb6:	6f a1       	ldd	r22, Y+39	; 0x27
     cb8:	78 a5       	ldd	r23, Y+40	; 0x28
     cba:	89 a5       	ldd	r24, Y+41	; 0x29
     cbc:	9a a5       	ldd	r25, Y+42	; 0x2a
     cbe:	20 e0       	ldi	r18, 0x00	; 0
     cc0:	30 e0       	ldi	r19, 0x00	; 0
     cc2:	4a e7       	ldi	r20, 0x7A	; 122
     cc4:	53 e4       	ldi	r21, 0x43	; 67
     cc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cca:	dc 01       	movw	r26, r24
     ccc:	cb 01       	movw	r24, r22
     cce:	8b a3       	std	Y+35, r24	; 0x23
     cd0:	9c a3       	std	Y+36, r25	; 0x24
     cd2:	ad a3       	std	Y+37, r26	; 0x25
     cd4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     cd6:	6b a1       	ldd	r22, Y+35	; 0x23
     cd8:	7c a1       	ldd	r23, Y+36	; 0x24
     cda:	8d a1       	ldd	r24, Y+37	; 0x25
     cdc:	9e a1       	ldd	r25, Y+38	; 0x26
     cde:	20 e0       	ldi	r18, 0x00	; 0
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	40 e8       	ldi	r20, 0x80	; 128
     ce4:	5f e3       	ldi	r21, 0x3F	; 63
     ce6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cea:	88 23       	and	r24, r24
     cec:	2c f4       	brge	.+10     	; 0xcf8 <LCD_sendCommand+0x16c>
		__ticks = 1;
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	9a a3       	std	Y+34, r25	; 0x22
     cf4:	89 a3       	std	Y+33, r24	; 0x21
     cf6:	3f c0       	rjmp	.+126    	; 0xd76 <LCD_sendCommand+0x1ea>
	else if (__tmp > 65535)
     cf8:	6b a1       	ldd	r22, Y+35	; 0x23
     cfa:	7c a1       	ldd	r23, Y+36	; 0x24
     cfc:	8d a1       	ldd	r24, Y+37	; 0x25
     cfe:	9e a1       	ldd	r25, Y+38	; 0x26
     d00:	20 e0       	ldi	r18, 0x00	; 0
     d02:	3f ef       	ldi	r19, 0xFF	; 255
     d04:	4f e7       	ldi	r20, 0x7F	; 127
     d06:	57 e4       	ldi	r21, 0x47	; 71
     d08:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d0c:	18 16       	cp	r1, r24
     d0e:	4c f5       	brge	.+82     	; 0xd62 <LCD_sendCommand+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d10:	6f a1       	ldd	r22, Y+39	; 0x27
     d12:	78 a5       	ldd	r23, Y+40	; 0x28
     d14:	89 a5       	ldd	r24, Y+41	; 0x29
     d16:	9a a5       	ldd	r25, Y+42	; 0x2a
     d18:	20 e0       	ldi	r18, 0x00	; 0
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	40 e2       	ldi	r20, 0x20	; 32
     d1e:	51 e4       	ldi	r21, 0x41	; 65
     d20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d24:	dc 01       	movw	r26, r24
     d26:	cb 01       	movw	r24, r22
     d28:	bc 01       	movw	r22, r24
     d2a:	cd 01       	movw	r24, r26
     d2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d30:	dc 01       	movw	r26, r24
     d32:	cb 01       	movw	r24, r22
     d34:	9a a3       	std	Y+34, r25	; 0x22
     d36:	89 a3       	std	Y+33, r24	; 0x21
     d38:	0f c0       	rjmp	.+30     	; 0xd58 <LCD_sendCommand+0x1cc>
     d3a:	89 e1       	ldi	r24, 0x19	; 25
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	98 a3       	std	Y+32, r25	; 0x20
     d40:	8f 8f       	std	Y+31, r24	; 0x1f
     d42:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d44:	98 a1       	ldd	r25, Y+32	; 0x20
     d46:	01 97       	sbiw	r24, 0x01	; 1
     d48:	f1 f7       	brne	.-4      	; 0xd46 <LCD_sendCommand+0x1ba>
     d4a:	98 a3       	std	Y+32, r25	; 0x20
     d4c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d4e:	89 a1       	ldd	r24, Y+33	; 0x21
     d50:	9a a1       	ldd	r25, Y+34	; 0x22
     d52:	01 97       	sbiw	r24, 0x01	; 1
     d54:	9a a3       	std	Y+34, r25	; 0x22
     d56:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d58:	89 a1       	ldd	r24, Y+33	; 0x21
     d5a:	9a a1       	ldd	r25, Y+34	; 0x22
     d5c:	00 97       	sbiw	r24, 0x00	; 0
     d5e:	69 f7       	brne	.-38     	; 0xd3a <LCD_sendCommand+0x1ae>
     d60:	14 c0       	rjmp	.+40     	; 0xd8a <LCD_sendCommand+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d62:	6b a1       	ldd	r22, Y+35	; 0x23
     d64:	7c a1       	ldd	r23, Y+36	; 0x24
     d66:	8d a1       	ldd	r24, Y+37	; 0x25
     d68:	9e a1       	ldd	r25, Y+38	; 0x26
     d6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d6e:	dc 01       	movw	r26, r24
     d70:	cb 01       	movw	r24, r22
     d72:	9a a3       	std	Y+34, r25	; 0x22
     d74:	89 a3       	std	Y+33, r24	; 0x21
     d76:	89 a1       	ldd	r24, Y+33	; 0x21
     d78:	9a a1       	ldd	r25, Y+34	; 0x22
     d7a:	9e 8f       	std	Y+30, r25	; 0x1e
     d7c:	8d 8f       	std	Y+29, r24	; 0x1d
     d7e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d80:	9e 8d       	ldd	r25, Y+30	; 0x1e
     d82:	01 97       	sbiw	r24, 0x01	; 1
     d84:	f1 f7       	brne	.-4      	; 0xd82 <LCD_sendCommand+0x1f6>
     d86:	9e 8f       	std	Y+30, r25	; 0x1e
     d88:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
     d8a:	80 e0       	ldi	r24, 0x00	; 0
     d8c:	6a ad       	ldd	r22, Y+58	; 0x3a
     d8e:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <GPIO_writePort>
     d92:	80 e0       	ldi	r24, 0x00	; 0
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	a0 e8       	ldi	r26, 0x80	; 128
     d98:	bf e3       	ldi	r27, 0x3F	; 63
     d9a:	89 8f       	std	Y+25, r24	; 0x19
     d9c:	9a 8f       	std	Y+26, r25	; 0x1a
     d9e:	ab 8f       	std	Y+27, r26	; 0x1b
     da0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     da2:	69 8d       	ldd	r22, Y+25	; 0x19
     da4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     da6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     da8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     daa:	20 e0       	ldi	r18, 0x00	; 0
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	4a e7       	ldi	r20, 0x7A	; 122
     db0:	53 e4       	ldi	r21, 0x43	; 67
     db2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     db6:	dc 01       	movw	r26, r24
     db8:	cb 01       	movw	r24, r22
     dba:	8d 8b       	std	Y+21, r24	; 0x15
     dbc:	9e 8b       	std	Y+22, r25	; 0x16
     dbe:	af 8b       	std	Y+23, r26	; 0x17
     dc0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     dc2:	6d 89       	ldd	r22, Y+21	; 0x15
     dc4:	7e 89       	ldd	r23, Y+22	; 0x16
     dc6:	8f 89       	ldd	r24, Y+23	; 0x17
     dc8:	98 8d       	ldd	r25, Y+24	; 0x18
     dca:	20 e0       	ldi	r18, 0x00	; 0
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	40 e8       	ldi	r20, 0x80	; 128
     dd0:	5f e3       	ldi	r21, 0x3F	; 63
     dd2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dd6:	88 23       	and	r24, r24
     dd8:	2c f4       	brge	.+10     	; 0xde4 <LCD_sendCommand+0x258>
		__ticks = 1;
     dda:	81 e0       	ldi	r24, 0x01	; 1
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	9c 8b       	std	Y+20, r25	; 0x14
     de0:	8b 8b       	std	Y+19, r24	; 0x13
     de2:	3f c0       	rjmp	.+126    	; 0xe62 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
     de4:	6d 89       	ldd	r22, Y+21	; 0x15
     de6:	7e 89       	ldd	r23, Y+22	; 0x16
     de8:	8f 89       	ldd	r24, Y+23	; 0x17
     dea:	98 8d       	ldd	r25, Y+24	; 0x18
     dec:	20 e0       	ldi	r18, 0x00	; 0
     dee:	3f ef       	ldi	r19, 0xFF	; 255
     df0:	4f e7       	ldi	r20, 0x7F	; 127
     df2:	57 e4       	ldi	r21, 0x47	; 71
     df4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     df8:	18 16       	cp	r1, r24
     dfa:	4c f5       	brge	.+82     	; 0xe4e <LCD_sendCommand+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dfc:	69 8d       	ldd	r22, Y+25	; 0x19
     dfe:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e00:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e02:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e04:	20 e0       	ldi	r18, 0x00	; 0
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	40 e2       	ldi	r20, 0x20	; 32
     e0a:	51 e4       	ldi	r21, 0x41	; 65
     e0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e10:	dc 01       	movw	r26, r24
     e12:	cb 01       	movw	r24, r22
     e14:	bc 01       	movw	r22, r24
     e16:	cd 01       	movw	r24, r26
     e18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e1c:	dc 01       	movw	r26, r24
     e1e:	cb 01       	movw	r24, r22
     e20:	9c 8b       	std	Y+20, r25	; 0x14
     e22:	8b 8b       	std	Y+19, r24	; 0x13
     e24:	0f c0       	rjmp	.+30     	; 0xe44 <LCD_sendCommand+0x2b8>
     e26:	89 e1       	ldi	r24, 0x19	; 25
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	9a 8b       	std	Y+18, r25	; 0x12
     e2c:	89 8b       	std	Y+17, r24	; 0x11
     e2e:	89 89       	ldd	r24, Y+17	; 0x11
     e30:	9a 89       	ldd	r25, Y+18	; 0x12
     e32:	01 97       	sbiw	r24, 0x01	; 1
     e34:	f1 f7       	brne	.-4      	; 0xe32 <LCD_sendCommand+0x2a6>
     e36:	9a 8b       	std	Y+18, r25	; 0x12
     e38:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e3a:	8b 89       	ldd	r24, Y+19	; 0x13
     e3c:	9c 89       	ldd	r25, Y+20	; 0x14
     e3e:	01 97       	sbiw	r24, 0x01	; 1
     e40:	9c 8b       	std	Y+20, r25	; 0x14
     e42:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e44:	8b 89       	ldd	r24, Y+19	; 0x13
     e46:	9c 89       	ldd	r25, Y+20	; 0x14
     e48:	00 97       	sbiw	r24, 0x00	; 0
     e4a:	69 f7       	brne	.-38     	; 0xe26 <LCD_sendCommand+0x29a>
     e4c:	14 c0       	rjmp	.+40     	; 0xe76 <LCD_sendCommand+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e4e:	6d 89       	ldd	r22, Y+21	; 0x15
     e50:	7e 89       	ldd	r23, Y+22	; 0x16
     e52:	8f 89       	ldd	r24, Y+23	; 0x17
     e54:	98 8d       	ldd	r25, Y+24	; 0x18
     e56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e5a:	dc 01       	movw	r26, r24
     e5c:	cb 01       	movw	r24, r22
     e5e:	9c 8b       	std	Y+20, r25	; 0x14
     e60:	8b 8b       	std	Y+19, r24	; 0x13
     e62:	8b 89       	ldd	r24, Y+19	; 0x13
     e64:	9c 89       	ldd	r25, Y+20	; 0x14
     e66:	98 8b       	std	Y+16, r25	; 0x10
     e68:	8f 87       	std	Y+15, r24	; 0x0f
     e6a:	8f 85       	ldd	r24, Y+15	; 0x0f
     e6c:	98 89       	ldd	r25, Y+16	; 0x10
     e6e:	01 97       	sbiw	r24, 0x01	; 1
     e70:	f1 f7       	brne	.-4      	; 0xe6e <LCD_sendCommand+0x2e2>
     e72:	98 8b       	std	Y+16, r25	; 0x10
     e74:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	62 e0       	ldi	r22, 0x02	; 2
     e7a:	40 e0       	ldi	r20, 0x00	; 0
     e7c:	0e 94 4c 0b 	call	0x1698	; 0x1698 <GPIO_writePin>
     e80:	80 e0       	ldi	r24, 0x00	; 0
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	a0 e8       	ldi	r26, 0x80	; 128
     e86:	bf e3       	ldi	r27, 0x3F	; 63
     e88:	8b 87       	std	Y+11, r24	; 0x0b
     e8a:	9c 87       	std	Y+12, r25	; 0x0c
     e8c:	ad 87       	std	Y+13, r26	; 0x0d
     e8e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e90:	6b 85       	ldd	r22, Y+11	; 0x0b
     e92:	7c 85       	ldd	r23, Y+12	; 0x0c
     e94:	8d 85       	ldd	r24, Y+13	; 0x0d
     e96:	9e 85       	ldd	r25, Y+14	; 0x0e
     e98:	20 e0       	ldi	r18, 0x00	; 0
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	4a e7       	ldi	r20, 0x7A	; 122
     e9e:	53 e4       	ldi	r21, 0x43	; 67
     ea0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ea4:	dc 01       	movw	r26, r24
     ea6:	cb 01       	movw	r24, r22
     ea8:	8f 83       	std	Y+7, r24	; 0x07
     eaa:	98 87       	std	Y+8, r25	; 0x08
     eac:	a9 87       	std	Y+9, r26	; 0x09
     eae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     eb0:	6f 81       	ldd	r22, Y+7	; 0x07
     eb2:	78 85       	ldd	r23, Y+8	; 0x08
     eb4:	89 85       	ldd	r24, Y+9	; 0x09
     eb6:	9a 85       	ldd	r25, Y+10	; 0x0a
     eb8:	20 e0       	ldi	r18, 0x00	; 0
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	40 e8       	ldi	r20, 0x80	; 128
     ebe:	5f e3       	ldi	r21, 0x3F	; 63
     ec0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ec4:	88 23       	and	r24, r24
     ec6:	2c f4       	brge	.+10     	; 0xed2 <LCD_sendCommand+0x346>
		__ticks = 1;
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	9e 83       	std	Y+6, r25	; 0x06
     ece:	8d 83       	std	Y+5, r24	; 0x05
     ed0:	3f c0       	rjmp	.+126    	; 0xf50 <LCD_sendCommand+0x3c4>
	else if (__tmp > 65535)
     ed2:	6f 81       	ldd	r22, Y+7	; 0x07
     ed4:	78 85       	ldd	r23, Y+8	; 0x08
     ed6:	89 85       	ldd	r24, Y+9	; 0x09
     ed8:	9a 85       	ldd	r25, Y+10	; 0x0a
     eda:	20 e0       	ldi	r18, 0x00	; 0
     edc:	3f ef       	ldi	r19, 0xFF	; 255
     ede:	4f e7       	ldi	r20, 0x7F	; 127
     ee0:	57 e4       	ldi	r21, 0x47	; 71
     ee2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ee6:	18 16       	cp	r1, r24
     ee8:	4c f5       	brge	.+82     	; 0xf3c <LCD_sendCommand+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eea:	6b 85       	ldd	r22, Y+11	; 0x0b
     eec:	7c 85       	ldd	r23, Y+12	; 0x0c
     eee:	8d 85       	ldd	r24, Y+13	; 0x0d
     ef0:	9e 85       	ldd	r25, Y+14	; 0x0e
     ef2:	20 e0       	ldi	r18, 0x00	; 0
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	40 e2       	ldi	r20, 0x20	; 32
     ef8:	51 e4       	ldi	r21, 0x41	; 65
     efa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     efe:	dc 01       	movw	r26, r24
     f00:	cb 01       	movw	r24, r22
     f02:	bc 01       	movw	r22, r24
     f04:	cd 01       	movw	r24, r26
     f06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f0a:	dc 01       	movw	r26, r24
     f0c:	cb 01       	movw	r24, r22
     f0e:	9e 83       	std	Y+6, r25	; 0x06
     f10:	8d 83       	std	Y+5, r24	; 0x05
     f12:	0f c0       	rjmp	.+30     	; 0xf32 <LCD_sendCommand+0x3a6>
     f14:	89 e1       	ldi	r24, 0x19	; 25
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	9c 83       	std	Y+4, r25	; 0x04
     f1a:	8b 83       	std	Y+3, r24	; 0x03
     f1c:	8b 81       	ldd	r24, Y+3	; 0x03
     f1e:	9c 81       	ldd	r25, Y+4	; 0x04
     f20:	01 97       	sbiw	r24, 0x01	; 1
     f22:	f1 f7       	brne	.-4      	; 0xf20 <LCD_sendCommand+0x394>
     f24:	9c 83       	std	Y+4, r25	; 0x04
     f26:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f28:	8d 81       	ldd	r24, Y+5	; 0x05
     f2a:	9e 81       	ldd	r25, Y+6	; 0x06
     f2c:	01 97       	sbiw	r24, 0x01	; 1
     f2e:	9e 83       	std	Y+6, r25	; 0x06
     f30:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f32:	8d 81       	ldd	r24, Y+5	; 0x05
     f34:	9e 81       	ldd	r25, Y+6	; 0x06
     f36:	00 97       	sbiw	r24, 0x00	; 0
     f38:	69 f7       	brne	.-38     	; 0xf14 <LCD_sendCommand+0x388>
     f3a:	14 c0       	rjmp	.+40     	; 0xf64 <LCD_sendCommand+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f3c:	6f 81       	ldd	r22, Y+7	; 0x07
     f3e:	78 85       	ldd	r23, Y+8	; 0x08
     f40:	89 85       	ldd	r24, Y+9	; 0x09
     f42:	9a 85       	ldd	r25, Y+10	; 0x0a
     f44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f48:	dc 01       	movw	r26, r24
     f4a:	cb 01       	movw	r24, r22
     f4c:	9e 83       	std	Y+6, r25	; 0x06
     f4e:	8d 83       	std	Y+5, r24	; 0x05
     f50:	8d 81       	ldd	r24, Y+5	; 0x05
     f52:	9e 81       	ldd	r25, Y+6	; 0x06
     f54:	9a 83       	std	Y+2, r25	; 0x02
     f56:	89 83       	std	Y+1, r24	; 0x01
     f58:	89 81       	ldd	r24, Y+1	; 0x01
     f5a:	9a 81       	ldd	r25, Y+2	; 0x02
     f5c:	01 97       	sbiw	r24, 0x01	; 1
     f5e:	f1 f7       	brne	.-4      	; 0xf5c <LCD_sendCommand+0x3d0>
     f60:	9a 83       	std	Y+2, r25	; 0x02
     f62:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
     f64:	ea 96       	adiw	r28, 0x3a	; 58
     f66:	0f b6       	in	r0, 0x3f	; 63
     f68:	f8 94       	cli
     f6a:	de bf       	out	0x3e, r29	; 62
     f6c:	0f be       	out	0x3f, r0	; 63
     f6e:	cd bf       	out	0x3d, r28	; 61
     f70:	cf 91       	pop	r28
     f72:	df 91       	pop	r29
     f74:	08 95       	ret

00000f76 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
     f76:	df 93       	push	r29
     f78:	cf 93       	push	r28
     f7a:	cd b7       	in	r28, 0x3d	; 61
     f7c:	de b7       	in	r29, 0x3e	; 62
     f7e:	ea 97       	sbiw	r28, 0x3a	; 58
     f80:	0f b6       	in	r0, 0x3f	; 63
     f82:	f8 94       	cli
     f84:	de bf       	out	0x3e, r29	; 62
     f86:	0f be       	out	0x3f, r0	; 63
     f88:	cd bf       	out	0x3d, r28	; 61
     f8a:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
     f8c:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	60 e0       	ldi	r22, 0x00	; 0
     f92:	41 e0       	ldi	r20, 0x01	; 1
     f94:	0e 94 4c 0b 	call	0x1698	; 0x1698 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	61 e0       	ldi	r22, 0x01	; 1
     f9c:	40 e0       	ldi	r20, 0x00	; 0
     f9e:	0e 94 4c 0b 	call	0x1698	; 0x1698 <GPIO_writePin>
     fa2:	80 e0       	ldi	r24, 0x00	; 0
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	a0 e8       	ldi	r26, 0x80	; 128
     fa8:	bf e3       	ldi	r27, 0x3F	; 63
     faa:	8d ab       	std	Y+53, r24	; 0x35
     fac:	9e ab       	std	Y+54, r25	; 0x36
     fae:	af ab       	std	Y+55, r26	; 0x37
     fb0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fb2:	6d a9       	ldd	r22, Y+53	; 0x35
     fb4:	7e a9       	ldd	r23, Y+54	; 0x36
     fb6:	8f a9       	ldd	r24, Y+55	; 0x37
     fb8:	98 ad       	ldd	r25, Y+56	; 0x38
     fba:	20 e0       	ldi	r18, 0x00	; 0
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	4a e7       	ldi	r20, 0x7A	; 122
     fc0:	53 e4       	ldi	r21, 0x43	; 67
     fc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fc6:	dc 01       	movw	r26, r24
     fc8:	cb 01       	movw	r24, r22
     fca:	89 ab       	std	Y+49, r24	; 0x31
     fcc:	9a ab       	std	Y+50, r25	; 0x32
     fce:	ab ab       	std	Y+51, r26	; 0x33
     fd0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     fd2:	69 a9       	ldd	r22, Y+49	; 0x31
     fd4:	7a a9       	ldd	r23, Y+50	; 0x32
     fd6:	8b a9       	ldd	r24, Y+51	; 0x33
     fd8:	9c a9       	ldd	r25, Y+52	; 0x34
     fda:	20 e0       	ldi	r18, 0x00	; 0
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	40 e8       	ldi	r20, 0x80	; 128
     fe0:	5f e3       	ldi	r21, 0x3F	; 63
     fe2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fe6:	88 23       	and	r24, r24
     fe8:	2c f4       	brge	.+10     	; 0xff4 <LCD_displayCharacter+0x7e>
		__ticks = 1;
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	98 ab       	std	Y+48, r25	; 0x30
     ff0:	8f a7       	std	Y+47, r24	; 0x2f
     ff2:	3f c0       	rjmp	.+126    	; 0x1072 <LCD_displayCharacter+0xfc>
	else if (__tmp > 65535)
     ff4:	69 a9       	ldd	r22, Y+49	; 0x31
     ff6:	7a a9       	ldd	r23, Y+50	; 0x32
     ff8:	8b a9       	ldd	r24, Y+51	; 0x33
     ffa:	9c a9       	ldd	r25, Y+52	; 0x34
     ffc:	20 e0       	ldi	r18, 0x00	; 0
     ffe:	3f ef       	ldi	r19, 0xFF	; 255
    1000:	4f e7       	ldi	r20, 0x7F	; 127
    1002:	57 e4       	ldi	r21, 0x47	; 71
    1004:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1008:	18 16       	cp	r1, r24
    100a:	4c f5       	brge	.+82     	; 0x105e <LCD_displayCharacter+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    100c:	6d a9       	ldd	r22, Y+53	; 0x35
    100e:	7e a9       	ldd	r23, Y+54	; 0x36
    1010:	8f a9       	ldd	r24, Y+55	; 0x37
    1012:	98 ad       	ldd	r25, Y+56	; 0x38
    1014:	20 e0       	ldi	r18, 0x00	; 0
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	40 e2       	ldi	r20, 0x20	; 32
    101a:	51 e4       	ldi	r21, 0x41	; 65
    101c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1020:	dc 01       	movw	r26, r24
    1022:	cb 01       	movw	r24, r22
    1024:	bc 01       	movw	r22, r24
    1026:	cd 01       	movw	r24, r26
    1028:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    102c:	dc 01       	movw	r26, r24
    102e:	cb 01       	movw	r24, r22
    1030:	98 ab       	std	Y+48, r25	; 0x30
    1032:	8f a7       	std	Y+47, r24	; 0x2f
    1034:	0f c0       	rjmp	.+30     	; 0x1054 <LCD_displayCharacter+0xde>
    1036:	89 e1       	ldi	r24, 0x19	; 25
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	9e a7       	std	Y+46, r25	; 0x2e
    103c:	8d a7       	std	Y+45, r24	; 0x2d
    103e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1040:	9e a5       	ldd	r25, Y+46	; 0x2e
    1042:	01 97       	sbiw	r24, 0x01	; 1
    1044:	f1 f7       	brne	.-4      	; 0x1042 <LCD_displayCharacter+0xcc>
    1046:	9e a7       	std	Y+46, r25	; 0x2e
    1048:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    104a:	8f a5       	ldd	r24, Y+47	; 0x2f
    104c:	98 a9       	ldd	r25, Y+48	; 0x30
    104e:	01 97       	sbiw	r24, 0x01	; 1
    1050:	98 ab       	std	Y+48, r25	; 0x30
    1052:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1054:	8f a5       	ldd	r24, Y+47	; 0x2f
    1056:	98 a9       	ldd	r25, Y+48	; 0x30
    1058:	00 97       	sbiw	r24, 0x00	; 0
    105a:	69 f7       	brne	.-38     	; 0x1036 <LCD_displayCharacter+0xc0>
    105c:	14 c0       	rjmp	.+40     	; 0x1086 <LCD_displayCharacter+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    105e:	69 a9       	ldd	r22, Y+49	; 0x31
    1060:	7a a9       	ldd	r23, Y+50	; 0x32
    1062:	8b a9       	ldd	r24, Y+51	; 0x33
    1064:	9c a9       	ldd	r25, Y+52	; 0x34
    1066:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    106a:	dc 01       	movw	r26, r24
    106c:	cb 01       	movw	r24, r22
    106e:	98 ab       	std	Y+48, r25	; 0x30
    1070:	8f a7       	std	Y+47, r24	; 0x2f
    1072:	8f a5       	ldd	r24, Y+47	; 0x2f
    1074:	98 a9       	ldd	r25, Y+48	; 0x30
    1076:	9c a7       	std	Y+44, r25	; 0x2c
    1078:	8b a7       	std	Y+43, r24	; 0x2b
    107a:	8b a5       	ldd	r24, Y+43	; 0x2b
    107c:	9c a5       	ldd	r25, Y+44	; 0x2c
    107e:	01 97       	sbiw	r24, 0x01	; 1
    1080:	f1 f7       	brne	.-4      	; 0x107e <LCD_displayCharacter+0x108>
    1082:	9c a7       	std	Y+44, r25	; 0x2c
    1084:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	62 e0       	ldi	r22, 0x02	; 2
    108a:	41 e0       	ldi	r20, 0x01	; 1
    108c:	0e 94 4c 0b 	call	0x1698	; 0x1698 <GPIO_writePin>
    1090:	80 e0       	ldi	r24, 0x00	; 0
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	a0 e8       	ldi	r26, 0x80	; 128
    1096:	bf e3       	ldi	r27, 0x3F	; 63
    1098:	8f a3       	std	Y+39, r24	; 0x27
    109a:	98 a7       	std	Y+40, r25	; 0x28
    109c:	a9 a7       	std	Y+41, r26	; 0x29
    109e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10a0:	6f a1       	ldd	r22, Y+39	; 0x27
    10a2:	78 a5       	ldd	r23, Y+40	; 0x28
    10a4:	89 a5       	ldd	r24, Y+41	; 0x29
    10a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    10a8:	20 e0       	ldi	r18, 0x00	; 0
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	4a e7       	ldi	r20, 0x7A	; 122
    10ae:	53 e4       	ldi	r21, 0x43	; 67
    10b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10b4:	dc 01       	movw	r26, r24
    10b6:	cb 01       	movw	r24, r22
    10b8:	8b a3       	std	Y+35, r24	; 0x23
    10ba:	9c a3       	std	Y+36, r25	; 0x24
    10bc:	ad a3       	std	Y+37, r26	; 0x25
    10be:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    10c0:	6b a1       	ldd	r22, Y+35	; 0x23
    10c2:	7c a1       	ldd	r23, Y+36	; 0x24
    10c4:	8d a1       	ldd	r24, Y+37	; 0x25
    10c6:	9e a1       	ldd	r25, Y+38	; 0x26
    10c8:	20 e0       	ldi	r18, 0x00	; 0
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	40 e8       	ldi	r20, 0x80	; 128
    10ce:	5f e3       	ldi	r21, 0x3F	; 63
    10d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10d4:	88 23       	and	r24, r24
    10d6:	2c f4       	brge	.+10     	; 0x10e2 <LCD_displayCharacter+0x16c>
		__ticks = 1;
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	9a a3       	std	Y+34, r25	; 0x22
    10de:	89 a3       	std	Y+33, r24	; 0x21
    10e0:	3f c0       	rjmp	.+126    	; 0x1160 <LCD_displayCharacter+0x1ea>
	else if (__tmp > 65535)
    10e2:	6b a1       	ldd	r22, Y+35	; 0x23
    10e4:	7c a1       	ldd	r23, Y+36	; 0x24
    10e6:	8d a1       	ldd	r24, Y+37	; 0x25
    10e8:	9e a1       	ldd	r25, Y+38	; 0x26
    10ea:	20 e0       	ldi	r18, 0x00	; 0
    10ec:	3f ef       	ldi	r19, 0xFF	; 255
    10ee:	4f e7       	ldi	r20, 0x7F	; 127
    10f0:	57 e4       	ldi	r21, 0x47	; 71
    10f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10f6:	18 16       	cp	r1, r24
    10f8:	4c f5       	brge	.+82     	; 0x114c <LCD_displayCharacter+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10fa:	6f a1       	ldd	r22, Y+39	; 0x27
    10fc:	78 a5       	ldd	r23, Y+40	; 0x28
    10fe:	89 a5       	ldd	r24, Y+41	; 0x29
    1100:	9a a5       	ldd	r25, Y+42	; 0x2a
    1102:	20 e0       	ldi	r18, 0x00	; 0
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	40 e2       	ldi	r20, 0x20	; 32
    1108:	51 e4       	ldi	r21, 0x41	; 65
    110a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    110e:	dc 01       	movw	r26, r24
    1110:	cb 01       	movw	r24, r22
    1112:	bc 01       	movw	r22, r24
    1114:	cd 01       	movw	r24, r26
    1116:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    111a:	dc 01       	movw	r26, r24
    111c:	cb 01       	movw	r24, r22
    111e:	9a a3       	std	Y+34, r25	; 0x22
    1120:	89 a3       	std	Y+33, r24	; 0x21
    1122:	0f c0       	rjmp	.+30     	; 0x1142 <LCD_displayCharacter+0x1cc>
    1124:	89 e1       	ldi	r24, 0x19	; 25
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	98 a3       	std	Y+32, r25	; 0x20
    112a:	8f 8f       	std	Y+31, r24	; 0x1f
    112c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    112e:	98 a1       	ldd	r25, Y+32	; 0x20
    1130:	01 97       	sbiw	r24, 0x01	; 1
    1132:	f1 f7       	brne	.-4      	; 0x1130 <LCD_displayCharacter+0x1ba>
    1134:	98 a3       	std	Y+32, r25	; 0x20
    1136:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1138:	89 a1       	ldd	r24, Y+33	; 0x21
    113a:	9a a1       	ldd	r25, Y+34	; 0x22
    113c:	01 97       	sbiw	r24, 0x01	; 1
    113e:	9a a3       	std	Y+34, r25	; 0x22
    1140:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1142:	89 a1       	ldd	r24, Y+33	; 0x21
    1144:	9a a1       	ldd	r25, Y+34	; 0x22
    1146:	00 97       	sbiw	r24, 0x00	; 0
    1148:	69 f7       	brne	.-38     	; 0x1124 <LCD_displayCharacter+0x1ae>
    114a:	14 c0       	rjmp	.+40     	; 0x1174 <LCD_displayCharacter+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    114c:	6b a1       	ldd	r22, Y+35	; 0x23
    114e:	7c a1       	ldd	r23, Y+36	; 0x24
    1150:	8d a1       	ldd	r24, Y+37	; 0x25
    1152:	9e a1       	ldd	r25, Y+38	; 0x26
    1154:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1158:	dc 01       	movw	r26, r24
    115a:	cb 01       	movw	r24, r22
    115c:	9a a3       	std	Y+34, r25	; 0x22
    115e:	89 a3       	std	Y+33, r24	; 0x21
    1160:	89 a1       	ldd	r24, Y+33	; 0x21
    1162:	9a a1       	ldd	r25, Y+34	; 0x22
    1164:	9e 8f       	std	Y+30, r25	; 0x1e
    1166:	8d 8f       	std	Y+29, r24	; 0x1d
    1168:	8d 8d       	ldd	r24, Y+29	; 0x1d
    116a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    116c:	01 97       	sbiw	r24, 0x01	; 1
    116e:	f1 f7       	brne	.-4      	; 0x116c <LCD_displayCharacter+0x1f6>
    1170:	9e 8f       	std	Y+30, r25	; 0x1e
    1172:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required data to the data bus D0 --> D7 */
    1174:	80 e0       	ldi	r24, 0x00	; 0
    1176:	6a ad       	ldd	r22, Y+58	; 0x3a
    1178:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <GPIO_writePort>
    117c:	80 e0       	ldi	r24, 0x00	; 0
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	a0 e8       	ldi	r26, 0x80	; 128
    1182:	bf e3       	ldi	r27, 0x3F	; 63
    1184:	89 8f       	std	Y+25, r24	; 0x19
    1186:	9a 8f       	std	Y+26, r25	; 0x1a
    1188:	ab 8f       	std	Y+27, r26	; 0x1b
    118a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    118c:	69 8d       	ldd	r22, Y+25	; 0x19
    118e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1190:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1192:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1194:	20 e0       	ldi	r18, 0x00	; 0
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	4a e7       	ldi	r20, 0x7A	; 122
    119a:	53 e4       	ldi	r21, 0x43	; 67
    119c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11a0:	dc 01       	movw	r26, r24
    11a2:	cb 01       	movw	r24, r22
    11a4:	8d 8b       	std	Y+21, r24	; 0x15
    11a6:	9e 8b       	std	Y+22, r25	; 0x16
    11a8:	af 8b       	std	Y+23, r26	; 0x17
    11aa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    11ac:	6d 89       	ldd	r22, Y+21	; 0x15
    11ae:	7e 89       	ldd	r23, Y+22	; 0x16
    11b0:	8f 89       	ldd	r24, Y+23	; 0x17
    11b2:	98 8d       	ldd	r25, Y+24	; 0x18
    11b4:	20 e0       	ldi	r18, 0x00	; 0
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	40 e8       	ldi	r20, 0x80	; 128
    11ba:	5f e3       	ldi	r21, 0x3F	; 63
    11bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11c0:	88 23       	and	r24, r24
    11c2:	2c f4       	brge	.+10     	; 0x11ce <LCD_displayCharacter+0x258>
		__ticks = 1;
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	9c 8b       	std	Y+20, r25	; 0x14
    11ca:	8b 8b       	std	Y+19, r24	; 0x13
    11cc:	3f c0       	rjmp	.+126    	; 0x124c <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    11ce:	6d 89       	ldd	r22, Y+21	; 0x15
    11d0:	7e 89       	ldd	r23, Y+22	; 0x16
    11d2:	8f 89       	ldd	r24, Y+23	; 0x17
    11d4:	98 8d       	ldd	r25, Y+24	; 0x18
    11d6:	20 e0       	ldi	r18, 0x00	; 0
    11d8:	3f ef       	ldi	r19, 0xFF	; 255
    11da:	4f e7       	ldi	r20, 0x7F	; 127
    11dc:	57 e4       	ldi	r21, 0x47	; 71
    11de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11e2:	18 16       	cp	r1, r24
    11e4:	4c f5       	brge	.+82     	; 0x1238 <LCD_displayCharacter+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11e6:	69 8d       	ldd	r22, Y+25	; 0x19
    11e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11ee:	20 e0       	ldi	r18, 0x00	; 0
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	40 e2       	ldi	r20, 0x20	; 32
    11f4:	51 e4       	ldi	r21, 0x41	; 65
    11f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11fa:	dc 01       	movw	r26, r24
    11fc:	cb 01       	movw	r24, r22
    11fe:	bc 01       	movw	r22, r24
    1200:	cd 01       	movw	r24, r26
    1202:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1206:	dc 01       	movw	r26, r24
    1208:	cb 01       	movw	r24, r22
    120a:	9c 8b       	std	Y+20, r25	; 0x14
    120c:	8b 8b       	std	Y+19, r24	; 0x13
    120e:	0f c0       	rjmp	.+30     	; 0x122e <LCD_displayCharacter+0x2b8>
    1210:	89 e1       	ldi	r24, 0x19	; 25
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	9a 8b       	std	Y+18, r25	; 0x12
    1216:	89 8b       	std	Y+17, r24	; 0x11
    1218:	89 89       	ldd	r24, Y+17	; 0x11
    121a:	9a 89       	ldd	r25, Y+18	; 0x12
    121c:	01 97       	sbiw	r24, 0x01	; 1
    121e:	f1 f7       	brne	.-4      	; 0x121c <LCD_displayCharacter+0x2a6>
    1220:	9a 8b       	std	Y+18, r25	; 0x12
    1222:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1224:	8b 89       	ldd	r24, Y+19	; 0x13
    1226:	9c 89       	ldd	r25, Y+20	; 0x14
    1228:	01 97       	sbiw	r24, 0x01	; 1
    122a:	9c 8b       	std	Y+20, r25	; 0x14
    122c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    122e:	8b 89       	ldd	r24, Y+19	; 0x13
    1230:	9c 89       	ldd	r25, Y+20	; 0x14
    1232:	00 97       	sbiw	r24, 0x00	; 0
    1234:	69 f7       	brne	.-38     	; 0x1210 <LCD_displayCharacter+0x29a>
    1236:	14 c0       	rjmp	.+40     	; 0x1260 <LCD_displayCharacter+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1238:	6d 89       	ldd	r22, Y+21	; 0x15
    123a:	7e 89       	ldd	r23, Y+22	; 0x16
    123c:	8f 89       	ldd	r24, Y+23	; 0x17
    123e:	98 8d       	ldd	r25, Y+24	; 0x18
    1240:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1244:	dc 01       	movw	r26, r24
    1246:	cb 01       	movw	r24, r22
    1248:	9c 8b       	std	Y+20, r25	; 0x14
    124a:	8b 8b       	std	Y+19, r24	; 0x13
    124c:	8b 89       	ldd	r24, Y+19	; 0x13
    124e:	9c 89       	ldd	r25, Y+20	; 0x14
    1250:	98 8b       	std	Y+16, r25	; 0x10
    1252:	8f 87       	std	Y+15, r24	; 0x0f
    1254:	8f 85       	ldd	r24, Y+15	; 0x0f
    1256:	98 89       	ldd	r25, Y+16	; 0x10
    1258:	01 97       	sbiw	r24, 0x01	; 1
    125a:	f1 f7       	brne	.-4      	; 0x1258 <LCD_displayCharacter+0x2e2>
    125c:	98 8b       	std	Y+16, r25	; 0x10
    125e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	62 e0       	ldi	r22, 0x02	; 2
    1264:	40 e0       	ldi	r20, 0x00	; 0
    1266:	0e 94 4c 0b 	call	0x1698	; 0x1698 <GPIO_writePin>
    126a:	80 e0       	ldi	r24, 0x00	; 0
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	a0 e8       	ldi	r26, 0x80	; 128
    1270:	bf e3       	ldi	r27, 0x3F	; 63
    1272:	8b 87       	std	Y+11, r24	; 0x0b
    1274:	9c 87       	std	Y+12, r25	; 0x0c
    1276:	ad 87       	std	Y+13, r26	; 0x0d
    1278:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    127a:	6b 85       	ldd	r22, Y+11	; 0x0b
    127c:	7c 85       	ldd	r23, Y+12	; 0x0c
    127e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1280:	9e 85       	ldd	r25, Y+14	; 0x0e
    1282:	20 e0       	ldi	r18, 0x00	; 0
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	4a e7       	ldi	r20, 0x7A	; 122
    1288:	53 e4       	ldi	r21, 0x43	; 67
    128a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    128e:	dc 01       	movw	r26, r24
    1290:	cb 01       	movw	r24, r22
    1292:	8f 83       	std	Y+7, r24	; 0x07
    1294:	98 87       	std	Y+8, r25	; 0x08
    1296:	a9 87       	std	Y+9, r26	; 0x09
    1298:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    129a:	6f 81       	ldd	r22, Y+7	; 0x07
    129c:	78 85       	ldd	r23, Y+8	; 0x08
    129e:	89 85       	ldd	r24, Y+9	; 0x09
    12a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    12a2:	20 e0       	ldi	r18, 0x00	; 0
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	40 e8       	ldi	r20, 0x80	; 128
    12a8:	5f e3       	ldi	r21, 0x3F	; 63
    12aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12ae:	88 23       	and	r24, r24
    12b0:	2c f4       	brge	.+10     	; 0x12bc <LCD_displayCharacter+0x346>
		__ticks = 1;
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	9e 83       	std	Y+6, r25	; 0x06
    12b8:	8d 83       	std	Y+5, r24	; 0x05
    12ba:	3f c0       	rjmp	.+126    	; 0x133a <LCD_displayCharacter+0x3c4>
	else if (__tmp > 65535)
    12bc:	6f 81       	ldd	r22, Y+7	; 0x07
    12be:	78 85       	ldd	r23, Y+8	; 0x08
    12c0:	89 85       	ldd	r24, Y+9	; 0x09
    12c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    12c4:	20 e0       	ldi	r18, 0x00	; 0
    12c6:	3f ef       	ldi	r19, 0xFF	; 255
    12c8:	4f e7       	ldi	r20, 0x7F	; 127
    12ca:	57 e4       	ldi	r21, 0x47	; 71
    12cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12d0:	18 16       	cp	r1, r24
    12d2:	4c f5       	brge	.+82     	; 0x1326 <LCD_displayCharacter+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    12d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    12d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    12da:	9e 85       	ldd	r25, Y+14	; 0x0e
    12dc:	20 e0       	ldi	r18, 0x00	; 0
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	40 e2       	ldi	r20, 0x20	; 32
    12e2:	51 e4       	ldi	r21, 0x41	; 65
    12e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12e8:	dc 01       	movw	r26, r24
    12ea:	cb 01       	movw	r24, r22
    12ec:	bc 01       	movw	r22, r24
    12ee:	cd 01       	movw	r24, r26
    12f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12f4:	dc 01       	movw	r26, r24
    12f6:	cb 01       	movw	r24, r22
    12f8:	9e 83       	std	Y+6, r25	; 0x06
    12fa:	8d 83       	std	Y+5, r24	; 0x05
    12fc:	0f c0       	rjmp	.+30     	; 0x131c <LCD_displayCharacter+0x3a6>
    12fe:	89 e1       	ldi	r24, 0x19	; 25
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	9c 83       	std	Y+4, r25	; 0x04
    1304:	8b 83       	std	Y+3, r24	; 0x03
    1306:	8b 81       	ldd	r24, Y+3	; 0x03
    1308:	9c 81       	ldd	r25, Y+4	; 0x04
    130a:	01 97       	sbiw	r24, 0x01	; 1
    130c:	f1 f7       	brne	.-4      	; 0x130a <LCD_displayCharacter+0x394>
    130e:	9c 83       	std	Y+4, r25	; 0x04
    1310:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1312:	8d 81       	ldd	r24, Y+5	; 0x05
    1314:	9e 81       	ldd	r25, Y+6	; 0x06
    1316:	01 97       	sbiw	r24, 0x01	; 1
    1318:	9e 83       	std	Y+6, r25	; 0x06
    131a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    131c:	8d 81       	ldd	r24, Y+5	; 0x05
    131e:	9e 81       	ldd	r25, Y+6	; 0x06
    1320:	00 97       	sbiw	r24, 0x00	; 0
    1322:	69 f7       	brne	.-38     	; 0x12fe <LCD_displayCharacter+0x388>
    1324:	14 c0       	rjmp	.+40     	; 0x134e <LCD_displayCharacter+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1326:	6f 81       	ldd	r22, Y+7	; 0x07
    1328:	78 85       	ldd	r23, Y+8	; 0x08
    132a:	89 85       	ldd	r24, Y+9	; 0x09
    132c:	9a 85       	ldd	r25, Y+10	; 0x0a
    132e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1332:	dc 01       	movw	r26, r24
    1334:	cb 01       	movw	r24, r22
    1336:	9e 83       	std	Y+6, r25	; 0x06
    1338:	8d 83       	std	Y+5, r24	; 0x05
    133a:	8d 81       	ldd	r24, Y+5	; 0x05
    133c:	9e 81       	ldd	r25, Y+6	; 0x06
    133e:	9a 83       	std	Y+2, r25	; 0x02
    1340:	89 83       	std	Y+1, r24	; 0x01
    1342:	89 81       	ldd	r24, Y+1	; 0x01
    1344:	9a 81       	ldd	r25, Y+2	; 0x02
    1346:	01 97       	sbiw	r24, 0x01	; 1
    1348:	f1 f7       	brne	.-4      	; 0x1346 <LCD_displayCharacter+0x3d0>
    134a:	9a 83       	std	Y+2, r25	; 0x02
    134c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    134e:	ea 96       	adiw	r28, 0x3a	; 58
    1350:	0f b6       	in	r0, 0x3f	; 63
    1352:	f8 94       	cli
    1354:	de bf       	out	0x3e, r29	; 62
    1356:	0f be       	out	0x3f, r0	; 63
    1358:	cd bf       	out	0x3d, r28	; 61
    135a:	cf 91       	pop	r28
    135c:	df 91       	pop	r29
    135e:	08 95       	ret

00001360 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    1360:	df 93       	push	r29
    1362:	cf 93       	push	r28
    1364:	00 d0       	rcall	.+0      	; 0x1366 <LCD_displayString+0x6>
    1366:	0f 92       	push	r0
    1368:	cd b7       	in	r28, 0x3d	; 61
    136a:	de b7       	in	r29, 0x3e	; 62
    136c:	9b 83       	std	Y+3, r25	; 0x03
    136e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1370:	19 82       	std	Y+1, r1	; 0x01
    1372:	0e c0       	rjmp	.+28     	; 0x1390 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1374:	89 81       	ldd	r24, Y+1	; 0x01
    1376:	28 2f       	mov	r18, r24
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	8a 81       	ldd	r24, Y+2	; 0x02
    137c:	9b 81       	ldd	r25, Y+3	; 0x03
    137e:	fc 01       	movw	r30, r24
    1380:	e2 0f       	add	r30, r18
    1382:	f3 1f       	adc	r31, r19
    1384:	80 81       	ld	r24, Z
    1386:	0e 94 bb 07 	call	0xf76	; 0xf76 <LCD_displayCharacter>
		i++;
    138a:	89 81       	ldd	r24, Y+1	; 0x01
    138c:	8f 5f       	subi	r24, 0xFF	; 255
    138e:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1390:	89 81       	ldd	r24, Y+1	; 0x01
    1392:	28 2f       	mov	r18, r24
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	8a 81       	ldd	r24, Y+2	; 0x02
    1398:	9b 81       	ldd	r25, Y+3	; 0x03
    139a:	fc 01       	movw	r30, r24
    139c:	e2 0f       	add	r30, r18
    139e:	f3 1f       	adc	r31, r19
    13a0:	80 81       	ld	r24, Z
    13a2:	88 23       	and	r24, r24
    13a4:	39 f7       	brne	.-50     	; 0x1374 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
    13a6:	0f 90       	pop	r0
    13a8:	0f 90       	pop	r0
    13aa:	0f 90       	pop	r0
    13ac:	cf 91       	pop	r28
    13ae:	df 91       	pop	r29
    13b0:	08 95       	ret

000013b2 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    13b2:	df 93       	push	r29
    13b4:	cf 93       	push	r28
    13b6:	00 d0       	rcall	.+0      	; 0x13b8 <LCD_moveCursor+0x6>
    13b8:	00 d0       	rcall	.+0      	; 0x13ba <LCD_moveCursor+0x8>
    13ba:	0f 92       	push	r0
    13bc:	cd b7       	in	r28, 0x3d	; 61
    13be:	de b7       	in	r29, 0x3e	; 62
    13c0:	8a 83       	std	Y+2, r24	; 0x02
    13c2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    13c4:	8a 81       	ldd	r24, Y+2	; 0x02
    13c6:	28 2f       	mov	r18, r24
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	3d 83       	std	Y+5, r19	; 0x05
    13cc:	2c 83       	std	Y+4, r18	; 0x04
    13ce:	8c 81       	ldd	r24, Y+4	; 0x04
    13d0:	9d 81       	ldd	r25, Y+5	; 0x05
    13d2:	81 30       	cpi	r24, 0x01	; 1
    13d4:	91 05       	cpc	r25, r1
    13d6:	c1 f0       	breq	.+48     	; 0x1408 <LCD_moveCursor+0x56>
    13d8:	2c 81       	ldd	r18, Y+4	; 0x04
    13da:	3d 81       	ldd	r19, Y+5	; 0x05
    13dc:	22 30       	cpi	r18, 0x02	; 2
    13de:	31 05       	cpc	r19, r1
    13e0:	2c f4       	brge	.+10     	; 0x13ec <LCD_moveCursor+0x3a>
    13e2:	8c 81       	ldd	r24, Y+4	; 0x04
    13e4:	9d 81       	ldd	r25, Y+5	; 0x05
    13e6:	00 97       	sbiw	r24, 0x00	; 0
    13e8:	61 f0       	breq	.+24     	; 0x1402 <LCD_moveCursor+0x50>
    13ea:	19 c0       	rjmp	.+50     	; 0x141e <LCD_moveCursor+0x6c>
    13ec:	2c 81       	ldd	r18, Y+4	; 0x04
    13ee:	3d 81       	ldd	r19, Y+5	; 0x05
    13f0:	22 30       	cpi	r18, 0x02	; 2
    13f2:	31 05       	cpc	r19, r1
    13f4:	69 f0       	breq	.+26     	; 0x1410 <LCD_moveCursor+0x5e>
    13f6:	8c 81       	ldd	r24, Y+4	; 0x04
    13f8:	9d 81       	ldd	r25, Y+5	; 0x05
    13fa:	83 30       	cpi	r24, 0x03	; 3
    13fc:	91 05       	cpc	r25, r1
    13fe:	61 f0       	breq	.+24     	; 0x1418 <LCD_moveCursor+0x66>
    1400:	0e c0       	rjmp	.+28     	; 0x141e <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    1402:	8b 81       	ldd	r24, Y+3	; 0x03
    1404:	89 83       	std	Y+1, r24	; 0x01
    1406:	0b c0       	rjmp	.+22     	; 0x141e <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    1408:	8b 81       	ldd	r24, Y+3	; 0x03
    140a:	80 5c       	subi	r24, 0xC0	; 192
    140c:	89 83       	std	Y+1, r24	; 0x01
    140e:	07 c0       	rjmp	.+14     	; 0x141e <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    1410:	8b 81       	ldd	r24, Y+3	; 0x03
    1412:	80 5f       	subi	r24, 0xF0	; 240
    1414:	89 83       	std	Y+1, r24	; 0x01
    1416:	03 c0       	rjmp	.+6      	; 0x141e <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    1418:	8b 81       	ldd	r24, Y+3	; 0x03
    141a:	80 5b       	subi	r24, 0xB0	; 176
    141c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    141e:	89 81       	ldd	r24, Y+1	; 0x01
    1420:	80 68       	ori	r24, 0x80	; 128
    1422:	0e 94 c6 05 	call	0xb8c	; 0xb8c <LCD_sendCommand>
}
    1426:	0f 90       	pop	r0
    1428:	0f 90       	pop	r0
    142a:	0f 90       	pop	r0
    142c:	0f 90       	pop	r0
    142e:	0f 90       	pop	r0
    1430:	cf 91       	pop	r28
    1432:	df 91       	pop	r29
    1434:	08 95       	ret

00001436 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1436:	df 93       	push	r29
    1438:	cf 93       	push	r28
    143a:	00 d0       	rcall	.+0      	; 0x143c <LCD_displayStringRowColumn+0x6>
    143c:	00 d0       	rcall	.+0      	; 0x143e <LCD_displayStringRowColumn+0x8>
    143e:	cd b7       	in	r28, 0x3d	; 61
    1440:	de b7       	in	r29, 0x3e	; 62
    1442:	89 83       	std	Y+1, r24	; 0x01
    1444:	6a 83       	std	Y+2, r22	; 0x02
    1446:	5c 83       	std	Y+4, r21	; 0x04
    1448:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    144a:	89 81       	ldd	r24, Y+1	; 0x01
    144c:	6a 81       	ldd	r22, Y+2	; 0x02
    144e:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    1452:	8b 81       	ldd	r24, Y+3	; 0x03
    1454:	9c 81       	ldd	r25, Y+4	; 0x04
    1456:	0e 94 b0 09 	call	0x1360	; 0x1360 <LCD_displayString>
}
    145a:	0f 90       	pop	r0
    145c:	0f 90       	pop	r0
    145e:	0f 90       	pop	r0
    1460:	0f 90       	pop	r0
    1462:	cf 91       	pop	r28
    1464:	df 91       	pop	r29
    1466:	08 95       	ret

00001468 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    1468:	df 93       	push	r29
    146a:	cf 93       	push	r28
    146c:	cd b7       	in	r28, 0x3d	; 61
    146e:	de b7       	in	r29, 0x3e	; 62
    1470:	62 97       	sbiw	r28, 0x12	; 18
    1472:	0f b6       	in	r0, 0x3f	; 63
    1474:	f8 94       	cli
    1476:	de bf       	out	0x3e, r29	; 62
    1478:	0f be       	out	0x3f, r0	; 63
    147a:	cd bf       	out	0x3d, r28	; 61
    147c:	9a 8b       	std	Y+18, r25	; 0x12
    147e:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1480:	89 89       	ldd	r24, Y+17	; 0x11
    1482:	9a 89       	ldd	r25, Y+18	; 0x12
    1484:	9e 01       	movw	r18, r28
    1486:	2f 5f       	subi	r18, 0xFF	; 255
    1488:	3f 4f       	sbci	r19, 0xFF	; 255
    148a:	b9 01       	movw	r22, r18
    148c:	4a e0       	ldi	r20, 0x0A	; 10
    148e:	50 e0       	ldi	r21, 0x00	; 0
    1490:	0e 94 f1 1e 	call	0x3de2	; 0x3de2 <itoa>
   LCD_displayString(buff); /* Display the string */
    1494:	ce 01       	movw	r24, r28
    1496:	01 96       	adiw	r24, 0x01	; 1
    1498:	0e 94 b0 09 	call	0x1360	; 0x1360 <LCD_displayString>
}
    149c:	62 96       	adiw	r28, 0x12	; 18
    149e:	0f b6       	in	r0, 0x3f	; 63
    14a0:	f8 94       	cli
    14a2:	de bf       	out	0x3e, r29	; 62
    14a4:	0f be       	out	0x3f, r0	; 63
    14a6:	cd bf       	out	0x3d, r28	; 61
    14a8:	cf 91       	pop	r28
    14aa:	df 91       	pop	r29
    14ac:	08 95       	ret

000014ae <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    14ae:	df 93       	push	r29
    14b0:	cf 93       	push	r28
    14b2:	cd b7       	in	r28, 0x3d	; 61
    14b4:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	0e 94 c6 05 	call	0xb8c	; 0xb8c <LCD_sendCommand>
}
    14bc:	cf 91       	pop	r28
    14be:	df 91       	pop	r29
    14c0:	08 95       	ret

000014c2 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    14c2:	df 93       	push	r29
    14c4:	cf 93       	push	r28
    14c6:	00 d0       	rcall	.+0      	; 0x14c8 <GPIO_setupPinDirection+0x6>
    14c8:	00 d0       	rcall	.+0      	; 0x14ca <GPIO_setupPinDirection+0x8>
    14ca:	0f 92       	push	r0
    14cc:	cd b7       	in	r28, 0x3d	; 61
    14ce:	de b7       	in	r29, 0x3e	; 62
    14d0:	89 83       	std	Y+1, r24	; 0x01
    14d2:	6a 83       	std	Y+2, r22	; 0x02
    14d4:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    14d6:	8a 81       	ldd	r24, Y+2	; 0x02
    14d8:	88 30       	cpi	r24, 0x08	; 8
    14da:	08 f0       	brcs	.+2      	; 0x14de <GPIO_setupPinDirection+0x1c>
    14dc:	d5 c0       	rjmp	.+426    	; 0x1688 <GPIO_setupPinDirection+0x1c6>
    14de:	89 81       	ldd	r24, Y+1	; 0x01
    14e0:	84 30       	cpi	r24, 0x04	; 4
    14e2:	08 f0       	brcs	.+2      	; 0x14e6 <GPIO_setupPinDirection+0x24>
    14e4:	d1 c0       	rjmp	.+418    	; 0x1688 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    14e6:	89 81       	ldd	r24, Y+1	; 0x01
    14e8:	28 2f       	mov	r18, r24
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	3d 83       	std	Y+5, r19	; 0x05
    14ee:	2c 83       	std	Y+4, r18	; 0x04
    14f0:	8c 81       	ldd	r24, Y+4	; 0x04
    14f2:	9d 81       	ldd	r25, Y+5	; 0x05
    14f4:	81 30       	cpi	r24, 0x01	; 1
    14f6:	91 05       	cpc	r25, r1
    14f8:	09 f4       	brne	.+2      	; 0x14fc <GPIO_setupPinDirection+0x3a>
    14fa:	43 c0       	rjmp	.+134    	; 0x1582 <GPIO_setupPinDirection+0xc0>
    14fc:	2c 81       	ldd	r18, Y+4	; 0x04
    14fe:	3d 81       	ldd	r19, Y+5	; 0x05
    1500:	22 30       	cpi	r18, 0x02	; 2
    1502:	31 05       	cpc	r19, r1
    1504:	2c f4       	brge	.+10     	; 0x1510 <GPIO_setupPinDirection+0x4e>
    1506:	8c 81       	ldd	r24, Y+4	; 0x04
    1508:	9d 81       	ldd	r25, Y+5	; 0x05
    150a:	00 97       	sbiw	r24, 0x00	; 0
    150c:	71 f0       	breq	.+28     	; 0x152a <GPIO_setupPinDirection+0x68>
    150e:	bc c0       	rjmp	.+376    	; 0x1688 <GPIO_setupPinDirection+0x1c6>
    1510:	2c 81       	ldd	r18, Y+4	; 0x04
    1512:	3d 81       	ldd	r19, Y+5	; 0x05
    1514:	22 30       	cpi	r18, 0x02	; 2
    1516:	31 05       	cpc	r19, r1
    1518:	09 f4       	brne	.+2      	; 0x151c <GPIO_setupPinDirection+0x5a>
    151a:	5f c0       	rjmp	.+190    	; 0x15da <GPIO_setupPinDirection+0x118>
    151c:	8c 81       	ldd	r24, Y+4	; 0x04
    151e:	9d 81       	ldd	r25, Y+5	; 0x05
    1520:	83 30       	cpi	r24, 0x03	; 3
    1522:	91 05       	cpc	r25, r1
    1524:	09 f4       	brne	.+2      	; 0x1528 <GPIO_setupPinDirection+0x66>
    1526:	85 c0       	rjmp	.+266    	; 0x1632 <GPIO_setupPinDirection+0x170>
    1528:	af c0       	rjmp	.+350    	; 0x1688 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    152a:	8b 81       	ldd	r24, Y+3	; 0x03
    152c:	81 30       	cpi	r24, 0x01	; 1
    152e:	a1 f4       	brne	.+40     	; 0x1558 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1530:	aa e3       	ldi	r26, 0x3A	; 58
    1532:	b0 e0       	ldi	r27, 0x00	; 0
    1534:	ea e3       	ldi	r30, 0x3A	; 58
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	48 2f       	mov	r20, r24
    153c:	8a 81       	ldd	r24, Y+2	; 0x02
    153e:	28 2f       	mov	r18, r24
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	81 e0       	ldi	r24, 0x01	; 1
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	02 2e       	mov	r0, r18
    1548:	02 c0       	rjmp	.+4      	; 0x154e <GPIO_setupPinDirection+0x8c>
    154a:	88 0f       	add	r24, r24
    154c:	99 1f       	adc	r25, r25
    154e:	0a 94       	dec	r0
    1550:	e2 f7       	brpl	.-8      	; 0x154a <GPIO_setupPinDirection+0x88>
    1552:	84 2b       	or	r24, r20
    1554:	8c 93       	st	X, r24
    1556:	98 c0       	rjmp	.+304    	; 0x1688 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1558:	aa e3       	ldi	r26, 0x3A	; 58
    155a:	b0 e0       	ldi	r27, 0x00	; 0
    155c:	ea e3       	ldi	r30, 0x3A	; 58
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	48 2f       	mov	r20, r24
    1564:	8a 81       	ldd	r24, Y+2	; 0x02
    1566:	28 2f       	mov	r18, r24
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	02 2e       	mov	r0, r18
    1570:	02 c0       	rjmp	.+4      	; 0x1576 <GPIO_setupPinDirection+0xb4>
    1572:	88 0f       	add	r24, r24
    1574:	99 1f       	adc	r25, r25
    1576:	0a 94       	dec	r0
    1578:	e2 f7       	brpl	.-8      	; 0x1572 <GPIO_setupPinDirection+0xb0>
    157a:	80 95       	com	r24
    157c:	84 23       	and	r24, r20
    157e:	8c 93       	st	X, r24
    1580:	83 c0       	rjmp	.+262    	; 0x1688 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1582:	8b 81       	ldd	r24, Y+3	; 0x03
    1584:	81 30       	cpi	r24, 0x01	; 1
    1586:	a1 f4       	brne	.+40     	; 0x15b0 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1588:	a7 e3       	ldi	r26, 0x37	; 55
    158a:	b0 e0       	ldi	r27, 0x00	; 0
    158c:	e7 e3       	ldi	r30, 0x37	; 55
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	80 81       	ld	r24, Z
    1592:	48 2f       	mov	r20, r24
    1594:	8a 81       	ldd	r24, Y+2	; 0x02
    1596:	28 2f       	mov	r18, r24
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	02 2e       	mov	r0, r18
    15a0:	02 c0       	rjmp	.+4      	; 0x15a6 <GPIO_setupPinDirection+0xe4>
    15a2:	88 0f       	add	r24, r24
    15a4:	99 1f       	adc	r25, r25
    15a6:	0a 94       	dec	r0
    15a8:	e2 f7       	brpl	.-8      	; 0x15a2 <GPIO_setupPinDirection+0xe0>
    15aa:	84 2b       	or	r24, r20
    15ac:	8c 93       	st	X, r24
    15ae:	6c c0       	rjmp	.+216    	; 0x1688 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    15b0:	a7 e3       	ldi	r26, 0x37	; 55
    15b2:	b0 e0       	ldi	r27, 0x00	; 0
    15b4:	e7 e3       	ldi	r30, 0x37	; 55
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	80 81       	ld	r24, Z
    15ba:	48 2f       	mov	r20, r24
    15bc:	8a 81       	ldd	r24, Y+2	; 0x02
    15be:	28 2f       	mov	r18, r24
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	02 2e       	mov	r0, r18
    15c8:	02 c0       	rjmp	.+4      	; 0x15ce <GPIO_setupPinDirection+0x10c>
    15ca:	88 0f       	add	r24, r24
    15cc:	99 1f       	adc	r25, r25
    15ce:	0a 94       	dec	r0
    15d0:	e2 f7       	brpl	.-8      	; 0x15ca <GPIO_setupPinDirection+0x108>
    15d2:	80 95       	com	r24
    15d4:	84 23       	and	r24, r20
    15d6:	8c 93       	st	X, r24
    15d8:	57 c0       	rjmp	.+174    	; 0x1688 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    15da:	8b 81       	ldd	r24, Y+3	; 0x03
    15dc:	81 30       	cpi	r24, 0x01	; 1
    15de:	a1 f4       	brne	.+40     	; 0x1608 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    15e0:	a4 e3       	ldi	r26, 0x34	; 52
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	e4 e3       	ldi	r30, 0x34	; 52
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	48 2f       	mov	r20, r24
    15ec:	8a 81       	ldd	r24, Y+2	; 0x02
    15ee:	28 2f       	mov	r18, r24
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	02 2e       	mov	r0, r18
    15f8:	02 c0       	rjmp	.+4      	; 0x15fe <GPIO_setupPinDirection+0x13c>
    15fa:	88 0f       	add	r24, r24
    15fc:	99 1f       	adc	r25, r25
    15fe:	0a 94       	dec	r0
    1600:	e2 f7       	brpl	.-8      	; 0x15fa <GPIO_setupPinDirection+0x138>
    1602:	84 2b       	or	r24, r20
    1604:	8c 93       	st	X, r24
    1606:	40 c0       	rjmp	.+128    	; 0x1688 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1608:	a4 e3       	ldi	r26, 0x34	; 52
    160a:	b0 e0       	ldi	r27, 0x00	; 0
    160c:	e4 e3       	ldi	r30, 0x34	; 52
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	48 2f       	mov	r20, r24
    1614:	8a 81       	ldd	r24, Y+2	; 0x02
    1616:	28 2f       	mov	r18, r24
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	81 e0       	ldi	r24, 0x01	; 1
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	02 2e       	mov	r0, r18
    1620:	02 c0       	rjmp	.+4      	; 0x1626 <GPIO_setupPinDirection+0x164>
    1622:	88 0f       	add	r24, r24
    1624:	99 1f       	adc	r25, r25
    1626:	0a 94       	dec	r0
    1628:	e2 f7       	brpl	.-8      	; 0x1622 <GPIO_setupPinDirection+0x160>
    162a:	80 95       	com	r24
    162c:	84 23       	and	r24, r20
    162e:	8c 93       	st	X, r24
    1630:	2b c0       	rjmp	.+86     	; 0x1688 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1632:	8b 81       	ldd	r24, Y+3	; 0x03
    1634:	81 30       	cpi	r24, 0x01	; 1
    1636:	a1 f4       	brne	.+40     	; 0x1660 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1638:	a1 e3       	ldi	r26, 0x31	; 49
    163a:	b0 e0       	ldi	r27, 0x00	; 0
    163c:	e1 e3       	ldi	r30, 0x31	; 49
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	80 81       	ld	r24, Z
    1642:	48 2f       	mov	r20, r24
    1644:	8a 81       	ldd	r24, Y+2	; 0x02
    1646:	28 2f       	mov	r18, r24
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	81 e0       	ldi	r24, 0x01	; 1
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	02 2e       	mov	r0, r18
    1650:	02 c0       	rjmp	.+4      	; 0x1656 <GPIO_setupPinDirection+0x194>
    1652:	88 0f       	add	r24, r24
    1654:	99 1f       	adc	r25, r25
    1656:	0a 94       	dec	r0
    1658:	e2 f7       	brpl	.-8      	; 0x1652 <GPIO_setupPinDirection+0x190>
    165a:	84 2b       	or	r24, r20
    165c:	8c 93       	st	X, r24
    165e:	14 c0       	rjmp	.+40     	; 0x1688 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1660:	a1 e3       	ldi	r26, 0x31	; 49
    1662:	b0 e0       	ldi	r27, 0x00	; 0
    1664:	e1 e3       	ldi	r30, 0x31	; 49
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	80 81       	ld	r24, Z
    166a:	48 2f       	mov	r20, r24
    166c:	8a 81       	ldd	r24, Y+2	; 0x02
    166e:	28 2f       	mov	r18, r24
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	81 e0       	ldi	r24, 0x01	; 1
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	02 2e       	mov	r0, r18
    1678:	02 c0       	rjmp	.+4      	; 0x167e <GPIO_setupPinDirection+0x1bc>
    167a:	88 0f       	add	r24, r24
    167c:	99 1f       	adc	r25, r25
    167e:	0a 94       	dec	r0
    1680:	e2 f7       	brpl	.-8      	; 0x167a <GPIO_setupPinDirection+0x1b8>
    1682:	80 95       	com	r24
    1684:	84 23       	and	r24, r20
    1686:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1688:	0f 90       	pop	r0
    168a:	0f 90       	pop	r0
    168c:	0f 90       	pop	r0
    168e:	0f 90       	pop	r0
    1690:	0f 90       	pop	r0
    1692:	cf 91       	pop	r28
    1694:	df 91       	pop	r29
    1696:	08 95       	ret

00001698 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1698:	df 93       	push	r29
    169a:	cf 93       	push	r28
    169c:	00 d0       	rcall	.+0      	; 0x169e <GPIO_writePin+0x6>
    169e:	00 d0       	rcall	.+0      	; 0x16a0 <GPIO_writePin+0x8>
    16a0:	0f 92       	push	r0
    16a2:	cd b7       	in	r28, 0x3d	; 61
    16a4:	de b7       	in	r29, 0x3e	; 62
    16a6:	89 83       	std	Y+1, r24	; 0x01
    16a8:	6a 83       	std	Y+2, r22	; 0x02
    16aa:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    16ac:	8a 81       	ldd	r24, Y+2	; 0x02
    16ae:	88 30       	cpi	r24, 0x08	; 8
    16b0:	08 f0       	brcs	.+2      	; 0x16b4 <GPIO_writePin+0x1c>
    16b2:	d5 c0       	rjmp	.+426    	; 0x185e <GPIO_writePin+0x1c6>
    16b4:	89 81       	ldd	r24, Y+1	; 0x01
    16b6:	84 30       	cpi	r24, 0x04	; 4
    16b8:	08 f0       	brcs	.+2      	; 0x16bc <GPIO_writePin+0x24>
    16ba:	d1 c0       	rjmp	.+418    	; 0x185e <GPIO_writePin+0x1c6>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    16bc:	89 81       	ldd	r24, Y+1	; 0x01
    16be:	28 2f       	mov	r18, r24
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	3d 83       	std	Y+5, r19	; 0x05
    16c4:	2c 83       	std	Y+4, r18	; 0x04
    16c6:	8c 81       	ldd	r24, Y+4	; 0x04
    16c8:	9d 81       	ldd	r25, Y+5	; 0x05
    16ca:	81 30       	cpi	r24, 0x01	; 1
    16cc:	91 05       	cpc	r25, r1
    16ce:	09 f4       	brne	.+2      	; 0x16d2 <GPIO_writePin+0x3a>
    16d0:	43 c0       	rjmp	.+134    	; 0x1758 <GPIO_writePin+0xc0>
    16d2:	2c 81       	ldd	r18, Y+4	; 0x04
    16d4:	3d 81       	ldd	r19, Y+5	; 0x05
    16d6:	22 30       	cpi	r18, 0x02	; 2
    16d8:	31 05       	cpc	r19, r1
    16da:	2c f4       	brge	.+10     	; 0x16e6 <GPIO_writePin+0x4e>
    16dc:	8c 81       	ldd	r24, Y+4	; 0x04
    16de:	9d 81       	ldd	r25, Y+5	; 0x05
    16e0:	00 97       	sbiw	r24, 0x00	; 0
    16e2:	71 f0       	breq	.+28     	; 0x1700 <GPIO_writePin+0x68>
    16e4:	bc c0       	rjmp	.+376    	; 0x185e <GPIO_writePin+0x1c6>
    16e6:	2c 81       	ldd	r18, Y+4	; 0x04
    16e8:	3d 81       	ldd	r19, Y+5	; 0x05
    16ea:	22 30       	cpi	r18, 0x02	; 2
    16ec:	31 05       	cpc	r19, r1
    16ee:	09 f4       	brne	.+2      	; 0x16f2 <GPIO_writePin+0x5a>
    16f0:	5f c0       	rjmp	.+190    	; 0x17b0 <GPIO_writePin+0x118>
    16f2:	8c 81       	ldd	r24, Y+4	; 0x04
    16f4:	9d 81       	ldd	r25, Y+5	; 0x05
    16f6:	83 30       	cpi	r24, 0x03	; 3
    16f8:	91 05       	cpc	r25, r1
    16fa:	09 f4       	brne	.+2      	; 0x16fe <GPIO_writePin+0x66>
    16fc:	85 c0       	rjmp	.+266    	; 0x1808 <GPIO_writePin+0x170>
    16fe:	af c0       	rjmp	.+350    	; 0x185e <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1700:	8b 81       	ldd	r24, Y+3	; 0x03
    1702:	81 30       	cpi	r24, 0x01	; 1
    1704:	a1 f4       	brne	.+40     	; 0x172e <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1706:	ab e3       	ldi	r26, 0x3B	; 59
    1708:	b0 e0       	ldi	r27, 0x00	; 0
    170a:	eb e3       	ldi	r30, 0x3B	; 59
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	80 81       	ld	r24, Z
    1710:	48 2f       	mov	r20, r24
    1712:	8a 81       	ldd	r24, Y+2	; 0x02
    1714:	28 2f       	mov	r18, r24
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	02 2e       	mov	r0, r18
    171e:	02 c0       	rjmp	.+4      	; 0x1724 <GPIO_writePin+0x8c>
    1720:	88 0f       	add	r24, r24
    1722:	99 1f       	adc	r25, r25
    1724:	0a 94       	dec	r0
    1726:	e2 f7       	brpl	.-8      	; 0x1720 <GPIO_writePin+0x88>
    1728:	84 2b       	or	r24, r20
    172a:	8c 93       	st	X, r24
    172c:	98 c0       	rjmp	.+304    	; 0x185e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    172e:	ab e3       	ldi	r26, 0x3B	; 59
    1730:	b0 e0       	ldi	r27, 0x00	; 0
    1732:	eb e3       	ldi	r30, 0x3B	; 59
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	80 81       	ld	r24, Z
    1738:	48 2f       	mov	r20, r24
    173a:	8a 81       	ldd	r24, Y+2	; 0x02
    173c:	28 2f       	mov	r18, r24
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	02 2e       	mov	r0, r18
    1746:	02 c0       	rjmp	.+4      	; 0x174c <GPIO_writePin+0xb4>
    1748:	88 0f       	add	r24, r24
    174a:	99 1f       	adc	r25, r25
    174c:	0a 94       	dec	r0
    174e:	e2 f7       	brpl	.-8      	; 0x1748 <GPIO_writePin+0xb0>
    1750:	80 95       	com	r24
    1752:	84 23       	and	r24, r20
    1754:	8c 93       	st	X, r24
    1756:	83 c0       	rjmp	.+262    	; 0x185e <GPIO_writePin+0x1c6>
			}
			break;

		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1758:	8b 81       	ldd	r24, Y+3	; 0x03
    175a:	81 30       	cpi	r24, 0x01	; 1
    175c:	a1 f4       	brne	.+40     	; 0x1786 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    175e:	a8 e3       	ldi	r26, 0x38	; 56
    1760:	b0 e0       	ldi	r27, 0x00	; 0
    1762:	e8 e3       	ldi	r30, 0x38	; 56
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	80 81       	ld	r24, Z
    1768:	48 2f       	mov	r20, r24
    176a:	8a 81       	ldd	r24, Y+2	; 0x02
    176c:	28 2f       	mov	r18, r24
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	02 2e       	mov	r0, r18
    1776:	02 c0       	rjmp	.+4      	; 0x177c <GPIO_writePin+0xe4>
    1778:	88 0f       	add	r24, r24
    177a:	99 1f       	adc	r25, r25
    177c:	0a 94       	dec	r0
    177e:	e2 f7       	brpl	.-8      	; 0x1778 <GPIO_writePin+0xe0>
    1780:	84 2b       	or	r24, r20
    1782:	8c 93       	st	X, r24
    1784:	6c c0       	rjmp	.+216    	; 0x185e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1786:	a8 e3       	ldi	r26, 0x38	; 56
    1788:	b0 e0       	ldi	r27, 0x00	; 0
    178a:	e8 e3       	ldi	r30, 0x38	; 56
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	80 81       	ld	r24, Z
    1790:	48 2f       	mov	r20, r24
    1792:	8a 81       	ldd	r24, Y+2	; 0x02
    1794:	28 2f       	mov	r18, r24
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	81 e0       	ldi	r24, 0x01	; 1
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	02 2e       	mov	r0, r18
    179e:	02 c0       	rjmp	.+4      	; 0x17a4 <GPIO_writePin+0x10c>
    17a0:	88 0f       	add	r24, r24
    17a2:	99 1f       	adc	r25, r25
    17a4:	0a 94       	dec	r0
    17a6:	e2 f7       	brpl	.-8      	; 0x17a0 <GPIO_writePin+0x108>
    17a8:	80 95       	com	r24
    17aa:	84 23       	and	r24, r20
    17ac:	8c 93       	st	X, r24
    17ae:	57 c0       	rjmp	.+174    	; 0x185e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    17b0:	8b 81       	ldd	r24, Y+3	; 0x03
    17b2:	81 30       	cpi	r24, 0x01	; 1
    17b4:	a1 f4       	brne	.+40     	; 0x17de <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    17b6:	a5 e3       	ldi	r26, 0x35	; 53
    17b8:	b0 e0       	ldi	r27, 0x00	; 0
    17ba:	e5 e3       	ldi	r30, 0x35	; 53
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	80 81       	ld	r24, Z
    17c0:	48 2f       	mov	r20, r24
    17c2:	8a 81       	ldd	r24, Y+2	; 0x02
    17c4:	28 2f       	mov	r18, r24
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	81 e0       	ldi	r24, 0x01	; 1
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	02 2e       	mov	r0, r18
    17ce:	02 c0       	rjmp	.+4      	; 0x17d4 <GPIO_writePin+0x13c>
    17d0:	88 0f       	add	r24, r24
    17d2:	99 1f       	adc	r25, r25
    17d4:	0a 94       	dec	r0
    17d6:	e2 f7       	brpl	.-8      	; 0x17d0 <GPIO_writePin+0x138>
    17d8:	84 2b       	or	r24, r20
    17da:	8c 93       	st	X, r24
    17dc:	40 c0       	rjmp	.+128    	; 0x185e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    17de:	a5 e3       	ldi	r26, 0x35	; 53
    17e0:	b0 e0       	ldi	r27, 0x00	; 0
    17e2:	e5 e3       	ldi	r30, 0x35	; 53
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	80 81       	ld	r24, Z
    17e8:	48 2f       	mov	r20, r24
    17ea:	8a 81       	ldd	r24, Y+2	; 0x02
    17ec:	28 2f       	mov	r18, r24
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	02 2e       	mov	r0, r18
    17f6:	02 c0       	rjmp	.+4      	; 0x17fc <GPIO_writePin+0x164>
    17f8:	88 0f       	add	r24, r24
    17fa:	99 1f       	adc	r25, r25
    17fc:	0a 94       	dec	r0
    17fe:	e2 f7       	brpl	.-8      	; 0x17f8 <GPIO_writePin+0x160>
    1800:	80 95       	com	r24
    1802:	84 23       	and	r24, r20
    1804:	8c 93       	st	X, r24
    1806:	2b c0       	rjmp	.+86     	; 0x185e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1808:	8b 81       	ldd	r24, Y+3	; 0x03
    180a:	81 30       	cpi	r24, 0x01	; 1
    180c:	a1 f4       	brne	.+40     	; 0x1836 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    180e:	a2 e3       	ldi	r26, 0x32	; 50
    1810:	b0 e0       	ldi	r27, 0x00	; 0
    1812:	e2 e3       	ldi	r30, 0x32	; 50
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	80 81       	ld	r24, Z
    1818:	48 2f       	mov	r20, r24
    181a:	8a 81       	ldd	r24, Y+2	; 0x02
    181c:	28 2f       	mov	r18, r24
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	02 2e       	mov	r0, r18
    1826:	02 c0       	rjmp	.+4      	; 0x182c <GPIO_writePin+0x194>
    1828:	88 0f       	add	r24, r24
    182a:	99 1f       	adc	r25, r25
    182c:	0a 94       	dec	r0
    182e:	e2 f7       	brpl	.-8      	; 0x1828 <GPIO_writePin+0x190>
    1830:	84 2b       	or	r24, r20
    1832:	8c 93       	st	X, r24
    1834:	14 c0       	rjmp	.+40     	; 0x185e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1836:	a2 e3       	ldi	r26, 0x32	; 50
    1838:	b0 e0       	ldi	r27, 0x00	; 0
    183a:	e2 e3       	ldi	r30, 0x32	; 50
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	80 81       	ld	r24, Z
    1840:	48 2f       	mov	r20, r24
    1842:	8a 81       	ldd	r24, Y+2	; 0x02
    1844:	28 2f       	mov	r18, r24
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	02 2e       	mov	r0, r18
    184e:	02 c0       	rjmp	.+4      	; 0x1854 <GPIO_writePin+0x1bc>
    1850:	88 0f       	add	r24, r24
    1852:	99 1f       	adc	r25, r25
    1854:	0a 94       	dec	r0
    1856:	e2 f7       	brpl	.-8      	; 0x1850 <GPIO_writePin+0x1b8>
    1858:	80 95       	com	r24
    185a:	84 23       	and	r24, r20
    185c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    185e:	0f 90       	pop	r0
    1860:	0f 90       	pop	r0
    1862:	0f 90       	pop	r0
    1864:	0f 90       	pop	r0
    1866:	0f 90       	pop	r0
    1868:	cf 91       	pop	r28
    186a:	df 91       	pop	r29
    186c:	08 95       	ret

0000186e <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    186e:	df 93       	push	r29
    1870:	cf 93       	push	r28
    1872:	00 d0       	rcall	.+0      	; 0x1874 <GPIO_readPin+0x6>
    1874:	00 d0       	rcall	.+0      	; 0x1876 <GPIO_readPin+0x8>
    1876:	0f 92       	push	r0
    1878:	cd b7       	in	r28, 0x3d	; 61
    187a:	de b7       	in	r29, 0x3e	; 62
    187c:	8a 83       	std	Y+2, r24	; 0x02
    187e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1880:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1882:	8b 81       	ldd	r24, Y+3	; 0x03
    1884:	88 30       	cpi	r24, 0x08	; 8
    1886:	08 f0       	brcs	.+2      	; 0x188a <GPIO_readPin+0x1c>
    1888:	84 c0       	rjmp	.+264    	; 0x1992 <GPIO_readPin+0x124>
    188a:	8a 81       	ldd	r24, Y+2	; 0x02
    188c:	84 30       	cpi	r24, 0x04	; 4
    188e:	08 f0       	brcs	.+2      	; 0x1892 <GPIO_readPin+0x24>
    1890:	80 c0       	rjmp	.+256    	; 0x1992 <GPIO_readPin+0x124>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    1892:	8a 81       	ldd	r24, Y+2	; 0x02
    1894:	28 2f       	mov	r18, r24
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	3d 83       	std	Y+5, r19	; 0x05
    189a:	2c 83       	std	Y+4, r18	; 0x04
    189c:	4c 81       	ldd	r20, Y+4	; 0x04
    189e:	5d 81       	ldd	r21, Y+5	; 0x05
    18a0:	41 30       	cpi	r20, 0x01	; 1
    18a2:	51 05       	cpc	r21, r1
    18a4:	79 f1       	breq	.+94     	; 0x1904 <GPIO_readPin+0x96>
    18a6:	8c 81       	ldd	r24, Y+4	; 0x04
    18a8:	9d 81       	ldd	r25, Y+5	; 0x05
    18aa:	82 30       	cpi	r24, 0x02	; 2
    18ac:	91 05       	cpc	r25, r1
    18ae:	34 f4       	brge	.+12     	; 0x18bc <GPIO_readPin+0x4e>
    18b0:	2c 81       	ldd	r18, Y+4	; 0x04
    18b2:	3d 81       	ldd	r19, Y+5	; 0x05
    18b4:	21 15       	cp	r18, r1
    18b6:	31 05       	cpc	r19, r1
    18b8:	69 f0       	breq	.+26     	; 0x18d4 <GPIO_readPin+0x66>
    18ba:	6b c0       	rjmp	.+214    	; 0x1992 <GPIO_readPin+0x124>
    18bc:	4c 81       	ldd	r20, Y+4	; 0x04
    18be:	5d 81       	ldd	r21, Y+5	; 0x05
    18c0:	42 30       	cpi	r20, 0x02	; 2
    18c2:	51 05       	cpc	r21, r1
    18c4:	b9 f1       	breq	.+110    	; 0x1934 <GPIO_readPin+0xc6>
    18c6:	8c 81       	ldd	r24, Y+4	; 0x04
    18c8:	9d 81       	ldd	r25, Y+5	; 0x05
    18ca:	83 30       	cpi	r24, 0x03	; 3
    18cc:	91 05       	cpc	r25, r1
    18ce:	09 f4       	brne	.+2      	; 0x18d2 <GPIO_readPin+0x64>
    18d0:	49 c0       	rjmp	.+146    	; 0x1964 <GPIO_readPin+0xf6>
    18d2:	5f c0       	rjmp	.+190    	; 0x1992 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    18d4:	e9 e3       	ldi	r30, 0x39	; 57
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	80 81       	ld	r24, Z
    18da:	28 2f       	mov	r18, r24
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	8b 81       	ldd	r24, Y+3	; 0x03
    18e0:	88 2f       	mov	r24, r24
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	a9 01       	movw	r20, r18
    18e6:	02 c0       	rjmp	.+4      	; 0x18ec <GPIO_readPin+0x7e>
    18e8:	55 95       	asr	r21
    18ea:	47 95       	ror	r20
    18ec:	8a 95       	dec	r24
    18ee:	e2 f7       	brpl	.-8      	; 0x18e8 <GPIO_readPin+0x7a>
    18f0:	ca 01       	movw	r24, r20
    18f2:	81 70       	andi	r24, 0x01	; 1
    18f4:	90 70       	andi	r25, 0x00	; 0
    18f6:	88 23       	and	r24, r24
    18f8:	19 f0       	breq	.+6      	; 0x1900 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    18fa:	81 e0       	ldi	r24, 0x01	; 1
    18fc:	89 83       	std	Y+1, r24	; 0x01
    18fe:	49 c0       	rjmp	.+146    	; 0x1992 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1900:	19 82       	std	Y+1, r1	; 0x01
    1902:	47 c0       	rjmp	.+142    	; 0x1992 <GPIO_readPin+0x124>
			}
			break;

		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1904:	e6 e3       	ldi	r30, 0x36	; 54
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	80 81       	ld	r24, Z
    190a:	28 2f       	mov	r18, r24
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	8b 81       	ldd	r24, Y+3	; 0x03
    1910:	88 2f       	mov	r24, r24
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	a9 01       	movw	r20, r18
    1916:	02 c0       	rjmp	.+4      	; 0x191c <GPIO_readPin+0xae>
    1918:	55 95       	asr	r21
    191a:	47 95       	ror	r20
    191c:	8a 95       	dec	r24
    191e:	e2 f7       	brpl	.-8      	; 0x1918 <GPIO_readPin+0xaa>
    1920:	ca 01       	movw	r24, r20
    1922:	81 70       	andi	r24, 0x01	; 1
    1924:	90 70       	andi	r25, 0x00	; 0
    1926:	88 23       	and	r24, r24
    1928:	19 f0       	breq	.+6      	; 0x1930 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	89 83       	std	Y+1, r24	; 0x01
    192e:	31 c0       	rjmp	.+98     	; 0x1992 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1930:	19 82       	std	Y+1, r1	; 0x01
    1932:	2f c0       	rjmp	.+94     	; 0x1992 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1934:	e3 e3       	ldi	r30, 0x33	; 51
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	80 81       	ld	r24, Z
    193a:	28 2f       	mov	r18, r24
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	8b 81       	ldd	r24, Y+3	; 0x03
    1940:	88 2f       	mov	r24, r24
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	a9 01       	movw	r20, r18
    1946:	02 c0       	rjmp	.+4      	; 0x194c <GPIO_readPin+0xde>
    1948:	55 95       	asr	r21
    194a:	47 95       	ror	r20
    194c:	8a 95       	dec	r24
    194e:	e2 f7       	brpl	.-8      	; 0x1948 <GPIO_readPin+0xda>
    1950:	ca 01       	movw	r24, r20
    1952:	81 70       	andi	r24, 0x01	; 1
    1954:	90 70       	andi	r25, 0x00	; 0
    1956:	88 23       	and	r24, r24
    1958:	19 f0       	breq	.+6      	; 0x1960 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	89 83       	std	Y+1, r24	; 0x01
    195e:	19 c0       	rjmp	.+50     	; 0x1992 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1960:	19 82       	std	Y+1, r1	; 0x01
    1962:	17 c0       	rjmp	.+46     	; 0x1992 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1964:	e0 e3       	ldi	r30, 0x30	; 48
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	80 81       	ld	r24, Z
    196a:	28 2f       	mov	r18, r24
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	8b 81       	ldd	r24, Y+3	; 0x03
    1970:	88 2f       	mov	r24, r24
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	a9 01       	movw	r20, r18
    1976:	02 c0       	rjmp	.+4      	; 0x197c <GPIO_readPin+0x10e>
    1978:	55 95       	asr	r21
    197a:	47 95       	ror	r20
    197c:	8a 95       	dec	r24
    197e:	e2 f7       	brpl	.-8      	; 0x1978 <GPIO_readPin+0x10a>
    1980:	ca 01       	movw	r24, r20
    1982:	81 70       	andi	r24, 0x01	; 1
    1984:	90 70       	andi	r25, 0x00	; 0
    1986:	88 23       	and	r24, r24
    1988:	19 f0       	breq	.+6      	; 0x1990 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    198a:	81 e0       	ldi	r24, 0x01	; 1
    198c:	89 83       	std	Y+1, r24	; 0x01
    198e:	01 c0       	rjmp	.+2      	; 0x1992 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1990:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return pin_value;
    1992:	89 81       	ldd	r24, Y+1	; 0x01
}
    1994:	0f 90       	pop	r0
    1996:	0f 90       	pop	r0
    1998:	0f 90       	pop	r0
    199a:	0f 90       	pop	r0
    199c:	0f 90       	pop	r0
    199e:	cf 91       	pop	r28
    19a0:	df 91       	pop	r29
    19a2:	08 95       	ret

000019a4 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    19a4:	df 93       	push	r29
    19a6:	cf 93       	push	r28
    19a8:	00 d0       	rcall	.+0      	; 0x19aa <GPIO_setupPortDirection+0x6>
    19aa:	00 d0       	rcall	.+0      	; 0x19ac <GPIO_setupPortDirection+0x8>
    19ac:	cd b7       	in	r28, 0x3d	; 61
    19ae:	de b7       	in	r29, 0x3e	; 62
    19b0:	89 83       	std	Y+1, r24	; 0x01
    19b2:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    19b4:	89 81       	ldd	r24, Y+1	; 0x01
    19b6:	84 30       	cpi	r24, 0x04	; 4
    19b8:	90 f5       	brcc	.+100    	; 0x1a1e <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    19ba:	89 81       	ldd	r24, Y+1	; 0x01
    19bc:	28 2f       	mov	r18, r24
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	3c 83       	std	Y+4, r19	; 0x04
    19c2:	2b 83       	std	Y+3, r18	; 0x03
    19c4:	8b 81       	ldd	r24, Y+3	; 0x03
    19c6:	9c 81       	ldd	r25, Y+4	; 0x04
    19c8:	81 30       	cpi	r24, 0x01	; 1
    19ca:	91 05       	cpc	r25, r1
    19cc:	d1 f0       	breq	.+52     	; 0x1a02 <GPIO_setupPortDirection+0x5e>
    19ce:	2b 81       	ldd	r18, Y+3	; 0x03
    19d0:	3c 81       	ldd	r19, Y+4	; 0x04
    19d2:	22 30       	cpi	r18, 0x02	; 2
    19d4:	31 05       	cpc	r19, r1
    19d6:	2c f4       	brge	.+10     	; 0x19e2 <GPIO_setupPortDirection+0x3e>
    19d8:	8b 81       	ldd	r24, Y+3	; 0x03
    19da:	9c 81       	ldd	r25, Y+4	; 0x04
    19dc:	00 97       	sbiw	r24, 0x00	; 0
    19de:	61 f0       	breq	.+24     	; 0x19f8 <GPIO_setupPortDirection+0x54>
    19e0:	1e c0       	rjmp	.+60     	; 0x1a1e <GPIO_setupPortDirection+0x7a>
    19e2:	2b 81       	ldd	r18, Y+3	; 0x03
    19e4:	3c 81       	ldd	r19, Y+4	; 0x04
    19e6:	22 30       	cpi	r18, 0x02	; 2
    19e8:	31 05       	cpc	r19, r1
    19ea:	81 f0       	breq	.+32     	; 0x1a0c <GPIO_setupPortDirection+0x68>
    19ec:	8b 81       	ldd	r24, Y+3	; 0x03
    19ee:	9c 81       	ldd	r25, Y+4	; 0x04
    19f0:	83 30       	cpi	r24, 0x03	; 3
    19f2:	91 05       	cpc	r25, r1
    19f4:	81 f0       	breq	.+32     	; 0x1a16 <GPIO_setupPortDirection+0x72>
    19f6:	13 c0       	rjmp	.+38     	; 0x1a1e <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    19f8:	ea e3       	ldi	r30, 0x3A	; 58
    19fa:	f0 e0       	ldi	r31, 0x00	; 0
    19fc:	8a 81       	ldd	r24, Y+2	; 0x02
    19fe:	80 83       	st	Z, r24
    1a00:	0e c0       	rjmp	.+28     	; 0x1a1e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1a02:	e7 e3       	ldi	r30, 0x37	; 55
    1a04:	f0 e0       	ldi	r31, 0x00	; 0
    1a06:	8a 81       	ldd	r24, Y+2	; 0x02
    1a08:	80 83       	st	Z, r24
    1a0a:	09 c0       	rjmp	.+18     	; 0x1a1e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1a0c:	e4 e3       	ldi	r30, 0x34	; 52
    1a0e:	f0 e0       	ldi	r31, 0x00	; 0
    1a10:	8a 81       	ldd	r24, Y+2	; 0x02
    1a12:	80 83       	st	Z, r24
    1a14:	04 c0       	rjmp	.+8      	; 0x1a1e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1a16:	e1 e3       	ldi	r30, 0x31	; 49
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1c:	80 83       	st	Z, r24
			break;
		}
	}
}
    1a1e:	0f 90       	pop	r0
    1a20:	0f 90       	pop	r0
    1a22:	0f 90       	pop	r0
    1a24:	0f 90       	pop	r0
    1a26:	cf 91       	pop	r28
    1a28:	df 91       	pop	r29
    1a2a:	08 95       	ret

00001a2c <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1a2c:	df 93       	push	r29
    1a2e:	cf 93       	push	r28
    1a30:	00 d0       	rcall	.+0      	; 0x1a32 <GPIO_writePort+0x6>
    1a32:	00 d0       	rcall	.+0      	; 0x1a34 <GPIO_writePort+0x8>
    1a34:	cd b7       	in	r28, 0x3d	; 61
    1a36:	de b7       	in	r29, 0x3e	; 62
    1a38:	89 83       	std	Y+1, r24	; 0x01
    1a3a:	6a 83       	std	Y+2, r22	; 0x02
	if((port_num >= NUM_OF_PORTS))
    1a3c:	89 81       	ldd	r24, Y+1	; 0x01
    1a3e:	84 30       	cpi	r24, 0x04	; 4
    1a40:	90 f5       	brcc	.+100    	; 0x1aa6 <GPIO_writePort+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    1a42:	89 81       	ldd	r24, Y+1	; 0x01
    1a44:	28 2f       	mov	r18, r24
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	3c 83       	std	Y+4, r19	; 0x04
    1a4a:	2b 83       	std	Y+3, r18	; 0x03
    1a4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a50:	81 30       	cpi	r24, 0x01	; 1
    1a52:	91 05       	cpc	r25, r1
    1a54:	d1 f0       	breq	.+52     	; 0x1a8a <GPIO_writePort+0x5e>
    1a56:	2b 81       	ldd	r18, Y+3	; 0x03
    1a58:	3c 81       	ldd	r19, Y+4	; 0x04
    1a5a:	22 30       	cpi	r18, 0x02	; 2
    1a5c:	31 05       	cpc	r19, r1
    1a5e:	2c f4       	brge	.+10     	; 0x1a6a <GPIO_writePort+0x3e>
    1a60:	8b 81       	ldd	r24, Y+3	; 0x03
    1a62:	9c 81       	ldd	r25, Y+4	; 0x04
    1a64:	00 97       	sbiw	r24, 0x00	; 0
    1a66:	61 f0       	breq	.+24     	; 0x1a80 <GPIO_writePort+0x54>
    1a68:	1e c0       	rjmp	.+60     	; 0x1aa6 <GPIO_writePort+0x7a>
    1a6a:	2b 81       	ldd	r18, Y+3	; 0x03
    1a6c:	3c 81       	ldd	r19, Y+4	; 0x04
    1a6e:	22 30       	cpi	r18, 0x02	; 2
    1a70:	31 05       	cpc	r19, r1
    1a72:	81 f0       	breq	.+32     	; 0x1a94 <GPIO_writePort+0x68>
    1a74:	8b 81       	ldd	r24, Y+3	; 0x03
    1a76:	9c 81       	ldd	r25, Y+4	; 0x04
    1a78:	83 30       	cpi	r24, 0x03	; 3
    1a7a:	91 05       	cpc	r25, r1
    1a7c:	81 f0       	breq	.+32     	; 0x1a9e <GPIO_writePort+0x72>
    1a7e:	13 c0       	rjmp	.+38     	; 0x1aa6 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1a80:	eb e3       	ldi	r30, 0x3B	; 59
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	8a 81       	ldd	r24, Y+2	; 0x02
    1a86:	80 83       	st	Z, r24
    1a88:	0e c0       	rjmp	.+28     	; 0x1aa6 <GPIO_writePort+0x7a>
			break;

		case PORTB_ID:
			PORTB = value;
    1a8a:	e8 e3       	ldi	r30, 0x38	; 56
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a90:	80 83       	st	Z, r24
    1a92:	09 c0       	rjmp	.+18     	; 0x1aa6 <GPIO_writePort+0x7a>
			break;

		case PORTC_ID:
			PORTC = value;
    1a94:	e5 e3       	ldi	r30, 0x35	; 53
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9a:	80 83       	st	Z, r24
    1a9c:	04 c0       	rjmp	.+8      	; 0x1aa6 <GPIO_writePort+0x7a>
			break;

		case PORTD_ID:
			PORTD = value;
    1a9e:	e2 e3       	ldi	r30, 0x32	; 50
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa4:	80 83       	st	Z, r24
			break;
		}
	}
}
    1aa6:	0f 90       	pop	r0
    1aa8:	0f 90       	pop	r0
    1aaa:	0f 90       	pop	r0
    1aac:	0f 90       	pop	r0
    1aae:	cf 91       	pop	r28
    1ab0:	df 91       	pop	r29
    1ab2:	08 95       	ret

00001ab4 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{	uint8 value = LOGIC_LOW;
    1ab4:	df 93       	push	r29
    1ab6:	cf 93       	push	r28
    1ab8:	00 d0       	rcall	.+0      	; 0x1aba <GPIO_readPort+0x6>
    1aba:	00 d0       	rcall	.+0      	; 0x1abc <GPIO_readPort+0x8>
    1abc:	cd b7       	in	r28, 0x3d	; 61
    1abe:	de b7       	in	r29, 0x3e	; 62
    1ac0:	8a 83       	std	Y+2, r24	; 0x02
    1ac2:	19 82       	std	Y+1, r1	; 0x01

	if((port_num >= NUM_OF_PORTS))
    1ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac6:	84 30       	cpi	r24, 0x04	; 4
    1ac8:	90 f5       	brcc	.+100    	; 0x1b2e <GPIO_readPort+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    1aca:	8a 81       	ldd	r24, Y+2	; 0x02
    1acc:	28 2f       	mov	r18, r24
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	3c 83       	std	Y+4, r19	; 0x04
    1ad2:	2b 83       	std	Y+3, r18	; 0x03
    1ad4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad8:	81 30       	cpi	r24, 0x01	; 1
    1ada:	91 05       	cpc	r25, r1
    1adc:	d1 f0       	breq	.+52     	; 0x1b12 <GPIO_readPort+0x5e>
    1ade:	2b 81       	ldd	r18, Y+3	; 0x03
    1ae0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ae2:	22 30       	cpi	r18, 0x02	; 2
    1ae4:	31 05       	cpc	r19, r1
    1ae6:	2c f4       	brge	.+10     	; 0x1af2 <GPIO_readPort+0x3e>
    1ae8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aea:	9c 81       	ldd	r25, Y+4	; 0x04
    1aec:	00 97       	sbiw	r24, 0x00	; 0
    1aee:	61 f0       	breq	.+24     	; 0x1b08 <GPIO_readPort+0x54>
    1af0:	1e c0       	rjmp	.+60     	; 0x1b2e <GPIO_readPort+0x7a>
    1af2:	2b 81       	ldd	r18, Y+3	; 0x03
    1af4:	3c 81       	ldd	r19, Y+4	; 0x04
    1af6:	22 30       	cpi	r18, 0x02	; 2
    1af8:	31 05       	cpc	r19, r1
    1afa:	81 f0       	breq	.+32     	; 0x1b1c <GPIO_readPort+0x68>
    1afc:	8b 81       	ldd	r24, Y+3	; 0x03
    1afe:	9c 81       	ldd	r25, Y+4	; 0x04
    1b00:	83 30       	cpi	r24, 0x03	; 3
    1b02:	91 05       	cpc	r25, r1
    1b04:	81 f0       	breq	.+32     	; 0x1b26 <GPIO_readPort+0x72>
    1b06:	13 c0       	rjmp	.+38     	; 0x1b2e <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1b08:	e9 e3       	ldi	r30, 0x39	; 57
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	80 81       	ld	r24, Z
    1b0e:	89 83       	std	Y+1, r24	; 0x01
    1b10:	0e c0       	rjmp	.+28     	; 0x1b2e <GPIO_readPort+0x7a>
			break;

		case PORTB_ID:
			value = PINB;
    1b12:	e6 e3       	ldi	r30, 0x36	; 54
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	80 81       	ld	r24, Z
    1b18:	89 83       	std	Y+1, r24	; 0x01
    1b1a:	09 c0       	rjmp	.+18     	; 0x1b2e <GPIO_readPort+0x7a>
			break;

		case PORTC_ID:
			value = PINC;
    1b1c:	e3 e3       	ldi	r30, 0x33	; 51
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	80 81       	ld	r24, Z
    1b22:	89 83       	std	Y+1, r24	; 0x01
    1b24:	04 c0       	rjmp	.+8      	; 0x1b2e <GPIO_readPort+0x7a>
			break;

		case PORTD_ID:
			value = PIND;
    1b26:	e0 e3       	ldi	r30, 0x30	; 48
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	80 81       	ld	r24, Z
    1b2c:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return value;
    1b2e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b30:	0f 90       	pop	r0
    1b32:	0f 90       	pop	r0
    1b34:	0f 90       	pop	r0
    1b36:	0f 90       	pop	r0
    1b38:	cf 91       	pop	r28
    1b3a:	df 91       	pop	r29
    1b3c:	08 95       	ret

00001b3e <SendToControl>:
 * [Description]   : A function to send data(byte) to CONTROL ECU
 *
 * [Args in]       : uint8 g_sentData
 * [Args out]      : NONE
 *******************************************************************************/
void SendToControl(uint8 sentDataTo_CONTROL ){
    1b3e:	df 93       	push	r29
    1b40:	cf 93       	push	r28
    1b42:	0f 92       	push	r0
    1b44:	cd b7       	in	r28, 0x3d	; 61
    1b46:	de b7       	in	r29, 0x3e	; 62
    1b48:	89 83       	std	Y+1, r24	; 0x01

	UART_sendByte(START_SENDING); /* notation that HMI is ready is ready to send */
    1b4a:	80 e5       	ldi	r24, 0x50	; 80
    1b4c:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <UART_sendByte>
	while(UART_recieveByte()!= START_RECEIVEING); /*wait until the control ecu is ready to receive*/
    1b50:	0e 94 1d 1e 	call	0x3c3a	; 0x3c3a <UART_recieveByte>
    1b54:	81 35       	cpi	r24, 0x51	; 81
    1b56:	e1 f7       	brne	.-8      	; 0x1b50 <SendToControl+0x12>
	UART_sendByte(sentDataTo_CONTROL);
    1b58:	89 81       	ldd	r24, Y+1	; 0x01
    1b5a:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <UART_sendByte>
	while(UART_recieveByte()!= COMPLETE_RECEIVEING); /*wait until the control ecu received the whole data*/
    1b5e:	0e 94 1d 1e 	call	0x3c3a	; 0x3c3a <UART_recieveByte>
    1b62:	82 35       	cpi	r24, 0x52	; 82
    1b64:	e1 f7       	brne	.-8      	; 0x1b5e <SendToControl+0x20>
}
    1b66:	0f 90       	pop	r0
    1b68:	cf 91       	pop	r28
    1b6a:	df 91       	pop	r29
    1b6c:	08 95       	ret

00001b6e <RecieveFromControl>:
 * [Description]   : A function to receive data(byte) from CONTROL ECU
 *
 * [Args in]       : NONE
 * [Args out]      : uint8 receivedDataFrom_CONTROL
 *******************************************************************************/
uint8 RecieveFromControl(void){
    1b6e:	df 93       	push	r29
    1b70:	cf 93       	push	r28
    1b72:	cd b7       	in	r28, 0x3d	; 61
    1b74:	de b7       	in	r29, 0x3e	; 62

	while(UART_recieveByte()!=START_SENDING); /*wait until the control ecu ready to send */
    1b76:	0e 94 1d 1e 	call	0x3c3a	; 0x3c3a <UART_recieveByte>
    1b7a:	80 35       	cpi	r24, 0x50	; 80
    1b7c:	e1 f7       	brne	.-8      	; 0x1b76 <RecieveFromControl+0x8>
	UART_sendByte(START_RECEIVEING); /*HMI is sending its notation to start receiving*/
    1b7e:	81 e5       	ldi	r24, 0x51	; 81
    1b80:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <UART_sendByte>
	receivedDataFrom_CONTROL=UART_recieveByte();  /*Receive the data*/
    1b84:	0e 94 1d 1e 	call	0x3c3a	; 0x3c3a <UART_recieveByte>
    1b88:	80 93 7b 01 	sts	0x017B, r24
	UART_sendByte(COMPLETE_RECEIVEING); /*HMI is ensuring that the whole data has been received*/
    1b8c:	82 e5       	ldi	r24, 0x52	; 82
    1b8e:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <UART_sendByte>
	return receivedDataFrom_CONTROL;
    1b92:	80 91 7b 01 	lds	r24, 0x017B
}
    1b96:	cf 91       	pop	r28
    1b98:	df 91       	pop	r29
    1b9a:	08 95       	ret

00001b9c <Enter_Password>:
 * [Description]   : A function to enter user password
 *
 * [Args in]       : NONE
 * [Args out]      : NONE
 *******************************************************************************/
void Enter_Password(void){
    1b9c:	df 93       	push	r29
    1b9e:	cf 93       	push	r28
    1ba0:	cd b7       	in	r28, 0x3d	; 61
    1ba2:	de b7       	in	r29, 0x3e	; 62
    1ba4:	60 97       	sbiw	r28, 0x10	; 16
    1ba6:	0f b6       	in	r0, 0x3f	; 63
    1ba8:	f8 94       	cli
    1baa:	de bf       	out	0x3e, r29	; 62
    1bac:	0f be       	out	0x3f, r0	; 63
    1bae:	cd bf       	out	0x3d, r28	; 61

	uint8 i;
	uint8 key=0;                        /*variable to hold keypad pressed buttons value*/
    1bb0:	1f 86       	std	Y+15, r1	; 0x0f
	for(i=0;i<5;i++){                   /*loop 5 times to enter the 5 integer number password*/
    1bb2:	18 8a       	std	Y+16, r1	; 0x10
    1bb4:	8a c0       	rjmp	.+276    	; 0x1cca <Enter_Password+0x12e>
		key = KEYPAD_getPressedKey();   /*get the value of the pressed button*/
    1bb6:	0e 94 d0 19 	call	0x33a0	; 0x33a0 <KEYPAD_getPressedKey>
    1bba:	8f 87       	std	Y+15, r24	; 0x0f
		if((key <= 9) && (key >= 0)){   /*don't take any thing but integer numbers*/
    1bbc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bbe:	8a 30       	cpi	r24, 0x0A	; 10
    1bc0:	60 f4       	brcc	.+24     	; 0x1bda <Enter_Password+0x3e>
			password[i]=key;            /*save each char in password array*/
    1bc2:	88 89       	ldd	r24, Y+16	; 0x10
    1bc4:	88 2f       	mov	r24, r24
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	fc 01       	movw	r30, r24
    1bca:	e2 59       	subi	r30, 0x92	; 146
    1bcc:	fe 4f       	sbci	r31, 0xFE	; 254
    1bce:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bd0:	80 83       	st	Z, r24
			LCD_displayCharacter('*');  /*display an * instead of the number for security*/
    1bd2:	8a e2       	ldi	r24, 0x2A	; 42
    1bd4:	0e 94 bb 07 	call	0xf76	; 0xf76 <LCD_displayCharacter>
    1bd8:	03 c0       	rjmp	.+6      	; 0x1be0 <Enter_Password+0x44>
		}
		else{
			i--;                        /*when entering anything but integers don't count that an entry*/
    1bda:	88 89       	ldd	r24, Y+16	; 0x10
    1bdc:	81 50       	subi	r24, 0x01	; 1
    1bde:	88 8b       	std	Y+16, r24	; 0x10
    1be0:	80 e0       	ldi	r24, 0x00	; 0
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	aa ef       	ldi	r26, 0xFA	; 250
    1be6:	b3 e4       	ldi	r27, 0x43	; 67
    1be8:	8b 87       	std	Y+11, r24	; 0x0b
    1bea:	9c 87       	std	Y+12, r25	; 0x0c
    1bec:	ad 87       	std	Y+13, r26	; 0x0d
    1bee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bf0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bf2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bf4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bf6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bf8:	20 e0       	ldi	r18, 0x00	; 0
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	4a e7       	ldi	r20, 0x7A	; 122
    1bfe:	53 e4       	ldi	r21, 0x43	; 67
    1c00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c04:	dc 01       	movw	r26, r24
    1c06:	cb 01       	movw	r24, r22
    1c08:	8f 83       	std	Y+7, r24	; 0x07
    1c0a:	98 87       	std	Y+8, r25	; 0x08
    1c0c:	a9 87       	std	Y+9, r26	; 0x09
    1c0e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c10:	6f 81       	ldd	r22, Y+7	; 0x07
    1c12:	78 85       	ldd	r23, Y+8	; 0x08
    1c14:	89 85       	ldd	r24, Y+9	; 0x09
    1c16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c18:	20 e0       	ldi	r18, 0x00	; 0
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	40 e8       	ldi	r20, 0x80	; 128
    1c1e:	5f e3       	ldi	r21, 0x3F	; 63
    1c20:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c24:	88 23       	and	r24, r24
    1c26:	2c f4       	brge	.+10     	; 0x1c32 <Enter_Password+0x96>
		__ticks = 1;
    1c28:	81 e0       	ldi	r24, 0x01	; 1
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	9e 83       	std	Y+6, r25	; 0x06
    1c2e:	8d 83       	std	Y+5, r24	; 0x05
    1c30:	3f c0       	rjmp	.+126    	; 0x1cb0 <Enter_Password+0x114>
	else if (__tmp > 65535)
    1c32:	6f 81       	ldd	r22, Y+7	; 0x07
    1c34:	78 85       	ldd	r23, Y+8	; 0x08
    1c36:	89 85       	ldd	r24, Y+9	; 0x09
    1c38:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c3a:	20 e0       	ldi	r18, 0x00	; 0
    1c3c:	3f ef       	ldi	r19, 0xFF	; 255
    1c3e:	4f e7       	ldi	r20, 0x7F	; 127
    1c40:	57 e4       	ldi	r21, 0x47	; 71
    1c42:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c46:	18 16       	cp	r1, r24
    1c48:	4c f5       	brge	.+82     	; 0x1c9c <Enter_Password+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c50:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	40 e2       	ldi	r20, 0x20	; 32
    1c58:	51 e4       	ldi	r21, 0x41	; 65
    1c5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c5e:	dc 01       	movw	r26, r24
    1c60:	cb 01       	movw	r24, r22
    1c62:	bc 01       	movw	r22, r24
    1c64:	cd 01       	movw	r24, r26
    1c66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c6a:	dc 01       	movw	r26, r24
    1c6c:	cb 01       	movw	r24, r22
    1c6e:	9e 83       	std	Y+6, r25	; 0x06
    1c70:	8d 83       	std	Y+5, r24	; 0x05
    1c72:	0f c0       	rjmp	.+30     	; 0x1c92 <Enter_Password+0xf6>
    1c74:	89 e1       	ldi	r24, 0x19	; 25
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	9c 83       	std	Y+4, r25	; 0x04
    1c7a:	8b 83       	std	Y+3, r24	; 0x03
    1c7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c80:	01 97       	sbiw	r24, 0x01	; 1
    1c82:	f1 f7       	brne	.-4      	; 0x1c80 <Enter_Password+0xe4>
    1c84:	9c 83       	std	Y+4, r25	; 0x04
    1c86:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c88:	8d 81       	ldd	r24, Y+5	; 0x05
    1c8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c8c:	01 97       	sbiw	r24, 0x01	; 1
    1c8e:	9e 83       	std	Y+6, r25	; 0x06
    1c90:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c92:	8d 81       	ldd	r24, Y+5	; 0x05
    1c94:	9e 81       	ldd	r25, Y+6	; 0x06
    1c96:	00 97       	sbiw	r24, 0x00	; 0
    1c98:	69 f7       	brne	.-38     	; 0x1c74 <Enter_Password+0xd8>
    1c9a:	14 c0       	rjmp	.+40     	; 0x1cc4 <Enter_Password+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c9c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c9e:	78 85       	ldd	r23, Y+8	; 0x08
    1ca0:	89 85       	ldd	r24, Y+9	; 0x09
    1ca2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ca4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca8:	dc 01       	movw	r26, r24
    1caa:	cb 01       	movw	r24, r22
    1cac:	9e 83       	std	Y+6, r25	; 0x06
    1cae:	8d 83       	std	Y+5, r24	; 0x05
    1cb0:	8d 81       	ldd	r24, Y+5	; 0x05
    1cb2:	9e 81       	ldd	r25, Y+6	; 0x06
    1cb4:	9a 83       	std	Y+2, r25	; 0x02
    1cb6:	89 83       	std	Y+1, r24	; 0x01
    1cb8:	89 81       	ldd	r24, Y+1	; 0x01
    1cba:	9a 81       	ldd	r25, Y+2	; 0x02
    1cbc:	01 97       	sbiw	r24, 0x01	; 1
    1cbe:	f1 f7       	brne	.-4      	; 0x1cbc <Enter_Password+0x120>
    1cc0:	9a 83       	std	Y+2, r25	; 0x02
    1cc2:	89 83       	std	Y+1, r24	; 0x01
 *******************************************************************************/
void Enter_Password(void){

	uint8 i;
	uint8 key=0;                        /*variable to hold keypad pressed buttons value*/
	for(i=0;i<5;i++){                   /*loop 5 times to enter the 5 integer number password*/
    1cc4:	88 89       	ldd	r24, Y+16	; 0x10
    1cc6:	8f 5f       	subi	r24, 0xFF	; 255
    1cc8:	88 8b       	std	Y+16, r24	; 0x10
    1cca:	88 89       	ldd	r24, Y+16	; 0x10
    1ccc:	85 30       	cpi	r24, 0x05	; 5
    1cce:	08 f4       	brcc	.+2      	; 0x1cd2 <Enter_Password+0x136>
    1cd0:	72 cf       	rjmp	.-284    	; 0x1bb6 <Enter_Password+0x1a>
		else{
			i--;                        /*when entering anything but integers don't count that an entry*/
		}
		_delay_ms(500);
	}
}
    1cd2:	60 96       	adiw	r28, 0x10	; 16
    1cd4:	0f b6       	in	r0, 0x3f	; 63
    1cd6:	f8 94       	cli
    1cd8:	de bf       	out	0x3e, r29	; 62
    1cda:	0f be       	out	0x3f, r0	; 63
    1cdc:	cd bf       	out	0x3d, r28	; 61
    1cde:	cf 91       	pop	r28
    1ce0:	df 91       	pop	r29
    1ce2:	08 95       	ret

00001ce4 <new_pasword>:
 * [Description]   : A function to create new password
 *
 * [Args in]       : NONE
 * [Args out]      : NONE
 *******************************************************************************/
void new_pasword(void){
    1ce4:	df 93       	push	r29
    1ce6:	cf 93       	push	r28
    1ce8:	cd b7       	in	r28, 0x3d	; 61
    1cea:	de b7       	in	r29, 0x3e	; 62
    1cec:	2e 97       	sbiw	r28, 0x0e	; 14
    1cee:	0f b6       	in	r0, 0x3f	; 63
    1cf0:	f8 94       	cli
    1cf2:	de bf       	out	0x3e, r29	; 62
    1cf4:	0f be       	out	0x3f, r0	; 63
    1cf6:	cd bf       	out	0x3d, r28	; 61
	matched_flag=0;   /*make the system ready(Reset system) to receive a new password*/
    1cf8:	10 92 62 01 	sts	0x0162, r1
    1cfc:	b3 c0       	rjmp	.+358    	; 0x1e64 <new_pasword+0x180>

	while(0==matched_flag){      /*never make any progress until password matching*/
		LCD_clearScreen();
    1cfe:	0e 94 57 0a 	call	0x14ae	; 0x14ae <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"Enter new Pass:");
    1d02:	20 e6       	ldi	r18, 0x60	; 96
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	80 e0       	ldi	r24, 0x00	; 0
    1d08:	60 e0       	ldi	r22, 0x00	; 0
    1d0a:	a9 01       	movw	r20, r18
    1d0c:	0e 94 1b 0a 	call	0x1436	; 0x1436 <LCD_displayStringRowColumn>
		LCD_moveCursor(1,0);
    1d10:	81 e0       	ldi	r24, 0x01	; 1
    1d12:	60 e0       	ldi	r22, 0x00	; 0
    1d14:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <LCD_moveCursor>
		Enter_Password();               /*ask the user to enter password*/
    1d18:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <Enter_Password>
		save_pass_to_control(password); /*send the first password to control for matching checking*/
    1d1c:	8e e6       	ldi	r24, 0x6E	; 110
    1d1e:	91 e0       	ldi	r25, 0x01	; 1
    1d20:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <save_pass_to_control>
		LCD_clearScreen();
    1d24:	0e 94 57 0a 	call	0x14ae	; 0x14ae <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"Re-Enter password:");
    1d28:	20 e7       	ldi	r18, 0x70	; 112
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	80 e0       	ldi	r24, 0x00	; 0
    1d2e:	60 e0       	ldi	r22, 0x00	; 0
    1d30:	a9 01       	movw	r20, r18
    1d32:	0e 94 1b 0a 	call	0x1436	; 0x1436 <LCD_displayStringRowColumn>
		LCD_moveCursor(1,0);
    1d36:	81 e0       	ldi	r24, 0x01	; 1
    1d38:	60 e0       	ldi	r22, 0x00	; 0
    1d3a:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <LCD_moveCursor>
		Enter_Password();               /*ask the user to enter password*/
    1d3e:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <Enter_Password>
		save_pass_to_control(password); /*send the first password to control for matching checking*/
    1d42:	8e e6       	ldi	r24, 0x6E	; 110
    1d44:	91 e0       	ldi	r25, 0x01	; 1
    1d46:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <save_pass_to_control>

		matched_flag = RecieveFromControl(); /*receive the matching value after compare in CONTROL*/
    1d4a:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <RecieveFromControl>
    1d4e:	80 93 62 01 	sts	0x0162, r24
		LCD_clearScreen();
    1d52:	0e 94 57 0a 	call	0x14ae	; 0x14ae <LCD_clearScreen>

		if(0==matched_flag){                 /*if miss-matching*/
    1d56:	80 91 62 01 	lds	r24, 0x0162
    1d5a:	88 23       	and	r24, r24
    1d5c:	09 f0       	breq	.+2      	; 0x1d60 <new_pasword+0x7c>
    1d5e:	82 c0       	rjmp	.+260    	; 0x1e64 <new_pasword+0x180>
			LCD_clearScreen();
    1d60:	0e 94 57 0a 	call	0x14ae	; 0x14ae <LCD_clearScreen>
			LCD_displayStringRowColumn(0,2,"MissMatching!!");
    1d64:	23 e8       	ldi	r18, 0x83	; 131
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	80 e0       	ldi	r24, 0x00	; 0
    1d6a:	62 e0       	ldi	r22, 0x02	; 2
    1d6c:	a9 01       	movw	r20, r18
    1d6e:	0e 94 1b 0a 	call	0x1436	; 0x1436 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1,2," Try Again!!!");
    1d72:	22 e9       	ldi	r18, 0x92	; 146
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	81 e0       	ldi	r24, 0x01	; 1
    1d78:	62 e0       	ldi	r22, 0x02	; 2
    1d7a:	a9 01       	movw	r20, r18
    1d7c:	0e 94 1b 0a 	call	0x1436	; 0x1436 <LCD_displayStringRowColumn>
    1d80:	80 e0       	ldi	r24, 0x00	; 0
    1d82:	90 e8       	ldi	r25, 0x80	; 128
    1d84:	ab eb       	ldi	r26, 0xBB	; 187
    1d86:	b4 e4       	ldi	r27, 0x44	; 68
    1d88:	8b 87       	std	Y+11, r24	; 0x0b
    1d8a:	9c 87       	std	Y+12, r25	; 0x0c
    1d8c:	ad 87       	std	Y+13, r26	; 0x0d
    1d8e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d90:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d92:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d94:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d96:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d98:	20 e0       	ldi	r18, 0x00	; 0
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	4a e7       	ldi	r20, 0x7A	; 122
    1d9e:	53 e4       	ldi	r21, 0x43	; 67
    1da0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1da4:	dc 01       	movw	r26, r24
    1da6:	cb 01       	movw	r24, r22
    1da8:	8f 83       	std	Y+7, r24	; 0x07
    1daa:	98 87       	std	Y+8, r25	; 0x08
    1dac:	a9 87       	std	Y+9, r26	; 0x09
    1dae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1db0:	6f 81       	ldd	r22, Y+7	; 0x07
    1db2:	78 85       	ldd	r23, Y+8	; 0x08
    1db4:	89 85       	ldd	r24, Y+9	; 0x09
    1db6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1db8:	20 e0       	ldi	r18, 0x00	; 0
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	40 e8       	ldi	r20, 0x80	; 128
    1dbe:	5f e3       	ldi	r21, 0x3F	; 63
    1dc0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dc4:	88 23       	and	r24, r24
    1dc6:	2c f4       	brge	.+10     	; 0x1dd2 <new_pasword+0xee>
		__ticks = 1;
    1dc8:	81 e0       	ldi	r24, 0x01	; 1
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	9e 83       	std	Y+6, r25	; 0x06
    1dce:	8d 83       	std	Y+5, r24	; 0x05
    1dd0:	3f c0       	rjmp	.+126    	; 0x1e50 <new_pasword+0x16c>
	else if (__tmp > 65535)
    1dd2:	6f 81       	ldd	r22, Y+7	; 0x07
    1dd4:	78 85       	ldd	r23, Y+8	; 0x08
    1dd6:	89 85       	ldd	r24, Y+9	; 0x09
    1dd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dda:	20 e0       	ldi	r18, 0x00	; 0
    1ddc:	3f ef       	ldi	r19, 0xFF	; 255
    1dde:	4f e7       	ldi	r20, 0x7F	; 127
    1de0:	57 e4       	ldi	r21, 0x47	; 71
    1de2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1de6:	18 16       	cp	r1, r24
    1de8:	4c f5       	brge	.+82     	; 0x1e3c <new_pasword+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dea:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dec:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dee:	8d 85       	ldd	r24, Y+13	; 0x0d
    1df0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	40 e2       	ldi	r20, 0x20	; 32
    1df8:	51 e4       	ldi	r21, 0x41	; 65
    1dfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dfe:	dc 01       	movw	r26, r24
    1e00:	cb 01       	movw	r24, r22
    1e02:	bc 01       	movw	r22, r24
    1e04:	cd 01       	movw	r24, r26
    1e06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	9e 83       	std	Y+6, r25	; 0x06
    1e10:	8d 83       	std	Y+5, r24	; 0x05
    1e12:	0f c0       	rjmp	.+30     	; 0x1e32 <new_pasword+0x14e>
    1e14:	89 e1       	ldi	r24, 0x19	; 25
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	9c 83       	std	Y+4, r25	; 0x04
    1e1a:	8b 83       	std	Y+3, r24	; 0x03
    1e1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e20:	01 97       	sbiw	r24, 0x01	; 1
    1e22:	f1 f7       	brne	.-4      	; 0x1e20 <new_pasword+0x13c>
    1e24:	9c 83       	std	Y+4, r25	; 0x04
    1e26:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e28:	8d 81       	ldd	r24, Y+5	; 0x05
    1e2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e2c:	01 97       	sbiw	r24, 0x01	; 1
    1e2e:	9e 83       	std	Y+6, r25	; 0x06
    1e30:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e32:	8d 81       	ldd	r24, Y+5	; 0x05
    1e34:	9e 81       	ldd	r25, Y+6	; 0x06
    1e36:	00 97       	sbiw	r24, 0x00	; 0
    1e38:	69 f7       	brne	.-38     	; 0x1e14 <new_pasword+0x130>
    1e3a:	14 c0       	rjmp	.+40     	; 0x1e64 <new_pasword+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e3c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e3e:	78 85       	ldd	r23, Y+8	; 0x08
    1e40:	89 85       	ldd	r24, Y+9	; 0x09
    1e42:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e48:	dc 01       	movw	r26, r24
    1e4a:	cb 01       	movw	r24, r22
    1e4c:	9e 83       	std	Y+6, r25	; 0x06
    1e4e:	8d 83       	std	Y+5, r24	; 0x05
    1e50:	8d 81       	ldd	r24, Y+5	; 0x05
    1e52:	9e 81       	ldd	r25, Y+6	; 0x06
    1e54:	9a 83       	std	Y+2, r25	; 0x02
    1e56:	89 83       	std	Y+1, r24	; 0x01
    1e58:	89 81       	ldd	r24, Y+1	; 0x01
    1e5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e5c:	01 97       	sbiw	r24, 0x01	; 1
    1e5e:	f1 f7       	brne	.-4      	; 0x1e5c <new_pasword+0x178>
    1e60:	9a 83       	std	Y+2, r25	; 0x02
    1e62:	89 83       	std	Y+1, r24	; 0x01
 * [Args out]      : NONE
 *******************************************************************************/
void new_pasword(void){
	matched_flag=0;   /*make the system ready(Reset system) to receive a new password*/

	while(0==matched_flag){      /*never make any progress until password matching*/
    1e64:	80 91 62 01 	lds	r24, 0x0162
    1e68:	88 23       	and	r24, r24
    1e6a:	09 f4       	brne	.+2      	; 0x1e6e <new_pasword+0x18a>
    1e6c:	48 cf       	rjmp	.-368    	; 0x1cfe <new_pasword+0x1a>
			LCD_displayStringRowColumn(1,2," Try Again!!!");
			_delay_ms(1500);
		}
		/*if matched main options screen will be displayed on the HMI LCD*/
	}
}
    1e6e:	2e 96       	adiw	r28, 0x0e	; 14
    1e70:	0f b6       	in	r0, 0x3f	; 63
    1e72:	f8 94       	cli
    1e74:	de bf       	out	0x3e, r29	; 62
    1e76:	0f be       	out	0x3f, r0	; 63
    1e78:	cd bf       	out	0x3d, r28	; 61
    1e7a:	cf 91       	pop	r28
    1e7c:	df 91       	pop	r29
    1e7e:	08 95       	ret

00001e80 <save_pass_to_control>:
 * [Description]   : A function to send password to CONTROL ECU
 *
 * [Args in]       : uint8 *sent_data
 * [Args out]      : NONE
 *******************************************************************************/
void save_pass_to_control(uint8 *sent_data){
    1e80:	df 93       	push	r29
    1e82:	cf 93       	push	r28
    1e84:	00 d0       	rcall	.+0      	; 0x1e86 <save_pass_to_control+0x6>
    1e86:	0f 92       	push	r0
    1e88:	cd b7       	in	r28, 0x3d	; 61
    1e8a:	de b7       	in	r29, 0x3e	; 62
    1e8c:	9b 83       	std	Y+3, r25	; 0x03
    1e8e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i;
	for(i=0;i<5;i++){
    1e90:	19 82       	std	Y+1, r1	; 0x01
    1e92:	0e c0       	rjmp	.+28     	; 0x1eb0 <save_pass_to_control+0x30>
		UART_sendByte(*(sent_data+i));  /*send the 5 char password to the CONTROL ECU*/
    1e94:	89 81       	ldd	r24, Y+1	; 0x01
    1e96:	28 2f       	mov	r18, r24
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e9e:	fc 01       	movw	r30, r24
    1ea0:	e2 0f       	add	r30, r18
    1ea2:	f3 1f       	adc	r31, r19
    1ea4:	80 81       	ld	r24, Z
    1ea6:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <UART_sendByte>
 * [Args in]       : uint8 *sent_data
 * [Args out]      : NONE
 *******************************************************************************/
void save_pass_to_control(uint8 *sent_data){
	uint8 i;
	for(i=0;i<5;i++){
    1eaa:	89 81       	ldd	r24, Y+1	; 0x01
    1eac:	8f 5f       	subi	r24, 0xFF	; 255
    1eae:	89 83       	std	Y+1, r24	; 0x01
    1eb0:	89 81       	ldd	r24, Y+1	; 0x01
    1eb2:	85 30       	cpi	r24, 0x05	; 5
    1eb4:	78 f3       	brcs	.-34     	; 0x1e94 <save_pass_to_control+0x14>
		UART_sendByte(*(sent_data+i));  /*send the 5 char password to the CONTROL ECU*/
	}
}
    1eb6:	0f 90       	pop	r0
    1eb8:	0f 90       	pop	r0
    1eba:	0f 90       	pop	r0
    1ebc:	cf 91       	pop	r28
    1ebe:	df 91       	pop	r29
    1ec0:	08 95       	ret

00001ec2 <g_tick_Incrementor>:
 *  				 to control time duration
 *
 * [Args in]       : NONE
 * [Args out]      : NONE
 *******************************************************************************/
void g_tick_Incrementor(void){
    1ec2:	df 93       	push	r29
    1ec4:	cf 93       	push	r28
    1ec6:	cd b7       	in	r28, 0x3d	; 61
    1ec8:	de b7       	in	r29, 0x3e	; 62
	g_tick++;                      /*increment g_tick for time handling*/
    1eca:	80 91 77 01 	lds	r24, 0x0177
    1ece:	90 91 78 01 	lds	r25, 0x0178
    1ed2:	a0 91 79 01 	lds	r26, 0x0179
    1ed6:	b0 91 7a 01 	lds	r27, 0x017A
    1eda:	01 96       	adiw	r24, 0x01	; 1
    1edc:	a1 1d       	adc	r26, r1
    1ede:	b1 1d       	adc	r27, r1
    1ee0:	80 93 77 01 	sts	0x0177, r24
    1ee4:	90 93 78 01 	sts	0x0178, r25
    1ee8:	a0 93 79 01 	sts	0x0179, r26
    1eec:	b0 93 7a 01 	sts	0x017A, r27
}
    1ef0:	cf 91       	pop	r28
    1ef2:	df 91       	pop	r29
    1ef4:	08 95       	ret

00001ef6 <set_UP_HMI_Timer>:
 * [Description]   : A function to configure and initialize the timer
 *
 * [Args in]       : NONE
 * [Args out]      : NONE
 *******************************************************************************/
void set_UP_HMI_Timer(void){
    1ef6:	df 93       	push	r29
    1ef8:	cf 93       	push	r28
    1efa:	cd b7       	in	r28, 0x3d	; 61
    1efc:	de b7       	in	r29, 0x3e	; 62
    1efe:	2c 97       	sbiw	r28, 0x0c	; 12
    1f00:	0f b6       	in	r0, 0x3f	; 63
    1f02:	f8 94       	cli
    1f04:	de bf       	out	0x3e, r29	; 62
    1f06:	0f be       	out	0x3f, r0	; 63
    1f08:	cd bf       	out	0x3d, r28	; 61
	Timer_ConfigType Config_Ptr = {Timer0,compare,0,250,F_CPU_1024};   /*configurations of Timer*/
    1f0a:	ce 01       	movw	r24, r28
    1f0c:	01 96       	adiw	r24, 0x01	; 1
    1f0e:	99 87       	std	Y+9, r25	; 0x09
    1f10:	88 87       	std	Y+8, r24	; 0x08
    1f12:	e3 e5       	ldi	r30, 0x53	; 83
    1f14:	f1 e0       	ldi	r31, 0x01	; 1
    1f16:	fb 87       	std	Y+11, r31	; 0x0b
    1f18:	ea 87       	std	Y+10, r30	; 0x0a
    1f1a:	f7 e0       	ldi	r31, 0x07	; 7
    1f1c:	fc 87       	std	Y+12, r31	; 0x0c
    1f1e:	ea 85       	ldd	r30, Y+10	; 0x0a
    1f20:	fb 85       	ldd	r31, Y+11	; 0x0b
    1f22:	00 80       	ld	r0, Z
    1f24:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f26:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f28:	01 96       	adiw	r24, 0x01	; 1
    1f2a:	9b 87       	std	Y+11, r25	; 0x0b
    1f2c:	8a 87       	std	Y+10, r24	; 0x0a
    1f2e:	e8 85       	ldd	r30, Y+8	; 0x08
    1f30:	f9 85       	ldd	r31, Y+9	; 0x09
    1f32:	00 82       	st	Z, r0
    1f34:	88 85       	ldd	r24, Y+8	; 0x08
    1f36:	99 85       	ldd	r25, Y+9	; 0x09
    1f38:	01 96       	adiw	r24, 0x01	; 1
    1f3a:	99 87       	std	Y+9, r25	; 0x09
    1f3c:	88 87       	std	Y+8, r24	; 0x08
    1f3e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f40:	91 50       	subi	r25, 0x01	; 1
    1f42:	9c 87       	std	Y+12, r25	; 0x0c
    1f44:	ec 85       	ldd	r30, Y+12	; 0x0c
    1f46:	ee 23       	and	r30, r30
    1f48:	51 f7       	brne	.-44     	; 0x1f1e <set_UP_HMI_Timer+0x28>
	Timer_Init(&Config_Ptr);            /*initializing Timer*/
    1f4a:	ce 01       	movw	r24, r28
    1f4c:	01 96       	adiw	r24, 0x01	; 1
    1f4e:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <Timer_Init>
	Timer0_SetCallBack(g_tick_Incrementor);   /*passing the callBack Function to timer to set it*/
    1f52:	81 e6       	ldi	r24, 0x61	; 97
    1f54:	9f e0       	ldi	r25, 0x0F	; 15
    1f56:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <Timer0_SetCallBack>
}
    1f5a:	2c 96       	adiw	r28, 0x0c	; 12
    1f5c:	0f b6       	in	r0, 0x3f	; 63
    1f5e:	f8 94       	cli
    1f60:	de bf       	out	0x3e, r29	; 62
    1f62:	0f be       	out	0x3f, r0	; 63
    1f64:	cd bf       	out	0x3d, r28	; 61
    1f66:	cf 91       	pop	r28
    1f68:	df 91       	pop	r29
    1f6a:	08 95       	ret

00001f6c <DoorMovement>:
 * [Description]   : A function to control door movement after unlocking the door lock
 *
 * [Args in]       : NONE
 * [Args out]      : NONE
 *******************************************************************************/
void DoorMovement(void){
    1f6c:	0f 93       	push	r16
    1f6e:	1f 93       	push	r17
    1f70:	df 93       	push	r29
    1f72:	cf 93       	push	r28
    1f74:	cd b7       	in	r28, 0x3d	; 61
    1f76:	de b7       	in	r29, 0x3e	; 62
    1f78:	c8 5a       	subi	r28, 0xA8	; 168
    1f7a:	d0 40       	sbci	r29, 0x00	; 0
    1f7c:	0f b6       	in	r0, 0x3f	; 63
    1f7e:	f8 94       	cli
    1f80:	de bf       	out	0x3e, r29	; 62
    1f82:	0f be       	out	0x3f, r0	; 63
    1f84:	cd bf       	out	0x3d, r28	; 61
	/*timer tick = (1/(1000000/1024))*250 = 0.256 */
	set_UP_HMI_Timer();    /*Timer is on to calculate how much the door will be opened*/
    1f86:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <set_UP_HMI_Timer>
	LCD_clearScreen();
    1f8a:	0e 94 57 0a 	call	0x14ae	; 0x14ae <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"DoorIsOpening");
    1f8e:	20 ea       	ldi	r18, 0xA0	; 160
    1f90:	30 e0       	ldi	r19, 0x00	; 0
    1f92:	80 e0       	ldi	r24, 0x00	; 0
    1f94:	60 e0       	ldi	r22, 0x00	; 0
    1f96:	a9 01       	movw	r20, r18
    1f98:	0e 94 1b 0a 	call	0x1436	; 0x1436 <LCD_displayStringRowColumn>
    1f9c:	5c c4       	rjmp	.+2232   	; 0x2856 <DoorMovement+0x8ea>

	while(g_tick<59){      /*The door will be closing for 15 seconds (15/0.256=59)*/
		LCD_displayStringRowColumn(0,13,".");
    1f9e:	2e ea       	ldi	r18, 0xAE	; 174
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	80 e0       	ldi	r24, 0x00	; 0
    1fa4:	6d e0       	ldi	r22, 0x0D	; 13
    1fa6:	a9 01       	movw	r20, r18
    1fa8:	0e 94 1b 0a 	call	0x1436	; 0x1436 <LCD_displayStringRowColumn>
    1fac:	fe 01       	movw	r30, r28
    1fae:	eb 55       	subi	r30, 0x5B	; 91
    1fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb2:	80 e0       	ldi	r24, 0x00	; 0
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	a8 e4       	ldi	r26, 0x48	; 72
    1fb8:	b3 e4       	ldi	r27, 0x43	; 67
    1fba:	80 83       	st	Z, r24
    1fbc:	91 83       	std	Z+1, r25	; 0x01
    1fbe:	a2 83       	std	Z+2, r26	; 0x02
    1fc0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fc2:	8e 01       	movw	r16, r28
    1fc4:	0f 55       	subi	r16, 0x5F	; 95
    1fc6:	1f 4f       	sbci	r17, 0xFF	; 255
    1fc8:	fe 01       	movw	r30, r28
    1fca:	eb 55       	subi	r30, 0x5B	; 91
    1fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fce:	60 81       	ld	r22, Z
    1fd0:	71 81       	ldd	r23, Z+1	; 0x01
    1fd2:	82 81       	ldd	r24, Z+2	; 0x02
    1fd4:	93 81       	ldd	r25, Z+3	; 0x03
    1fd6:	20 e0       	ldi	r18, 0x00	; 0
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	4a e7       	ldi	r20, 0x7A	; 122
    1fdc:	53 e4       	ldi	r21, 0x43	; 67
    1fde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe2:	dc 01       	movw	r26, r24
    1fe4:	cb 01       	movw	r24, r22
    1fe6:	f8 01       	movw	r30, r16
    1fe8:	80 83       	st	Z, r24
    1fea:	91 83       	std	Z+1, r25	; 0x01
    1fec:	a2 83       	std	Z+2, r26	; 0x02
    1fee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ff0:	fe 01       	movw	r30, r28
    1ff2:	ef 55       	subi	r30, 0x5F	; 95
    1ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff6:	60 81       	ld	r22, Z
    1ff8:	71 81       	ldd	r23, Z+1	; 0x01
    1ffa:	82 81       	ldd	r24, Z+2	; 0x02
    1ffc:	93 81       	ldd	r25, Z+3	; 0x03
    1ffe:	20 e0       	ldi	r18, 0x00	; 0
    2000:	30 e0       	ldi	r19, 0x00	; 0
    2002:	40 e8       	ldi	r20, 0x80	; 128
    2004:	5f e3       	ldi	r21, 0x3F	; 63
    2006:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    200a:	88 23       	and	r24, r24
    200c:	44 f4       	brge	.+16     	; 0x201e <DoorMovement+0xb2>
		__ticks = 1;
    200e:	fe 01       	movw	r30, r28
    2010:	e1 56       	subi	r30, 0x61	; 97
    2012:	ff 4f       	sbci	r31, 0xFF	; 255
    2014:	81 e0       	ldi	r24, 0x01	; 1
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	91 83       	std	Z+1, r25	; 0x01
    201a:	80 83       	st	Z, r24
    201c:	64 c0       	rjmp	.+200    	; 0x20e6 <DoorMovement+0x17a>
	else if (__tmp > 65535)
    201e:	fe 01       	movw	r30, r28
    2020:	ef 55       	subi	r30, 0x5F	; 95
    2022:	ff 4f       	sbci	r31, 0xFF	; 255
    2024:	60 81       	ld	r22, Z
    2026:	71 81       	ldd	r23, Z+1	; 0x01
    2028:	82 81       	ldd	r24, Z+2	; 0x02
    202a:	93 81       	ldd	r25, Z+3	; 0x03
    202c:	20 e0       	ldi	r18, 0x00	; 0
    202e:	3f ef       	ldi	r19, 0xFF	; 255
    2030:	4f e7       	ldi	r20, 0x7F	; 127
    2032:	57 e4       	ldi	r21, 0x47	; 71
    2034:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2038:	18 16       	cp	r1, r24
    203a:	0c f0       	brlt	.+2      	; 0x203e <DoorMovement+0xd2>
    203c:	43 c0       	rjmp	.+134    	; 0x20c4 <DoorMovement+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    203e:	fe 01       	movw	r30, r28
    2040:	eb 55       	subi	r30, 0x5B	; 91
    2042:	ff 4f       	sbci	r31, 0xFF	; 255
    2044:	60 81       	ld	r22, Z
    2046:	71 81       	ldd	r23, Z+1	; 0x01
    2048:	82 81       	ldd	r24, Z+2	; 0x02
    204a:	93 81       	ldd	r25, Z+3	; 0x03
    204c:	20 e0       	ldi	r18, 0x00	; 0
    204e:	30 e0       	ldi	r19, 0x00	; 0
    2050:	40 e2       	ldi	r20, 0x20	; 32
    2052:	51 e4       	ldi	r21, 0x41	; 65
    2054:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2058:	dc 01       	movw	r26, r24
    205a:	cb 01       	movw	r24, r22
    205c:	8e 01       	movw	r16, r28
    205e:	01 56       	subi	r16, 0x61	; 97
    2060:	1f 4f       	sbci	r17, 0xFF	; 255
    2062:	bc 01       	movw	r22, r24
    2064:	cd 01       	movw	r24, r26
    2066:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    206a:	dc 01       	movw	r26, r24
    206c:	cb 01       	movw	r24, r22
    206e:	f8 01       	movw	r30, r16
    2070:	91 83       	std	Z+1, r25	; 0x01
    2072:	80 83       	st	Z, r24
    2074:	1f c0       	rjmp	.+62     	; 0x20b4 <DoorMovement+0x148>
    2076:	fe 01       	movw	r30, r28
    2078:	e3 56       	subi	r30, 0x63	; 99
    207a:	ff 4f       	sbci	r31, 0xFF	; 255
    207c:	89 e1       	ldi	r24, 0x19	; 25
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	91 83       	std	Z+1, r25	; 0x01
    2082:	80 83       	st	Z, r24
    2084:	fe 01       	movw	r30, r28
    2086:	e3 56       	subi	r30, 0x63	; 99
    2088:	ff 4f       	sbci	r31, 0xFF	; 255
    208a:	80 81       	ld	r24, Z
    208c:	91 81       	ldd	r25, Z+1	; 0x01
    208e:	01 97       	sbiw	r24, 0x01	; 1
    2090:	f1 f7       	brne	.-4      	; 0x208e <DoorMovement+0x122>
    2092:	fe 01       	movw	r30, r28
    2094:	e3 56       	subi	r30, 0x63	; 99
    2096:	ff 4f       	sbci	r31, 0xFF	; 255
    2098:	91 83       	std	Z+1, r25	; 0x01
    209a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    209c:	de 01       	movw	r26, r28
    209e:	a1 56       	subi	r26, 0x61	; 97
    20a0:	bf 4f       	sbci	r27, 0xFF	; 255
    20a2:	fe 01       	movw	r30, r28
    20a4:	e1 56       	subi	r30, 0x61	; 97
    20a6:	ff 4f       	sbci	r31, 0xFF	; 255
    20a8:	80 81       	ld	r24, Z
    20aa:	91 81       	ldd	r25, Z+1	; 0x01
    20ac:	01 97       	sbiw	r24, 0x01	; 1
    20ae:	11 96       	adiw	r26, 0x01	; 1
    20b0:	9c 93       	st	X, r25
    20b2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20b4:	fe 01       	movw	r30, r28
    20b6:	e1 56       	subi	r30, 0x61	; 97
    20b8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ba:	80 81       	ld	r24, Z
    20bc:	91 81       	ldd	r25, Z+1	; 0x01
    20be:	00 97       	sbiw	r24, 0x00	; 0
    20c0:	d1 f6       	brne	.-76     	; 0x2076 <DoorMovement+0x10a>
    20c2:	27 c0       	rjmp	.+78     	; 0x2112 <DoorMovement+0x1a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20c4:	8e 01       	movw	r16, r28
    20c6:	01 56       	subi	r16, 0x61	; 97
    20c8:	1f 4f       	sbci	r17, 0xFF	; 255
    20ca:	fe 01       	movw	r30, r28
    20cc:	ef 55       	subi	r30, 0x5F	; 95
    20ce:	ff 4f       	sbci	r31, 0xFF	; 255
    20d0:	60 81       	ld	r22, Z
    20d2:	71 81       	ldd	r23, Z+1	; 0x01
    20d4:	82 81       	ldd	r24, Z+2	; 0x02
    20d6:	93 81       	ldd	r25, Z+3	; 0x03
    20d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20dc:	dc 01       	movw	r26, r24
    20de:	cb 01       	movw	r24, r22
    20e0:	f8 01       	movw	r30, r16
    20e2:	91 83       	std	Z+1, r25	; 0x01
    20e4:	80 83       	st	Z, r24
    20e6:	de 01       	movw	r26, r28
    20e8:	a5 56       	subi	r26, 0x65	; 101
    20ea:	bf 4f       	sbci	r27, 0xFF	; 255
    20ec:	fe 01       	movw	r30, r28
    20ee:	e1 56       	subi	r30, 0x61	; 97
    20f0:	ff 4f       	sbci	r31, 0xFF	; 255
    20f2:	80 81       	ld	r24, Z
    20f4:	91 81       	ldd	r25, Z+1	; 0x01
    20f6:	8d 93       	st	X+, r24
    20f8:	9c 93       	st	X, r25
    20fa:	fe 01       	movw	r30, r28
    20fc:	e5 56       	subi	r30, 0x65	; 101
    20fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2100:	80 81       	ld	r24, Z
    2102:	91 81       	ldd	r25, Z+1	; 0x01
    2104:	01 97       	sbiw	r24, 0x01	; 1
    2106:	f1 f7       	brne	.-4      	; 0x2104 <DoorMovement+0x198>
    2108:	fe 01       	movw	r30, r28
    210a:	e5 56       	subi	r30, 0x65	; 101
    210c:	ff 4f       	sbci	r31, 0xFF	; 255
    210e:	91 83       	std	Z+1, r25	; 0x01
    2110:	80 83       	st	Z, r24
		_delay_ms(WASTE);
		LCD_displayStringRowColumn(0,14,".");
    2112:	2e ea       	ldi	r18, 0xAE	; 174
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	80 e0       	ldi	r24, 0x00	; 0
    2118:	6e e0       	ldi	r22, 0x0E	; 14
    211a:	a9 01       	movw	r20, r18
    211c:	0e 94 1b 0a 	call	0x1436	; 0x1436 <LCD_displayStringRowColumn>
    2120:	fe 01       	movw	r30, r28
    2122:	e9 56       	subi	r30, 0x69	; 105
    2124:	ff 4f       	sbci	r31, 0xFF	; 255
    2126:	80 e0       	ldi	r24, 0x00	; 0
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	a8 e4       	ldi	r26, 0x48	; 72
    212c:	b3 e4       	ldi	r27, 0x43	; 67
    212e:	80 83       	st	Z, r24
    2130:	91 83       	std	Z+1, r25	; 0x01
    2132:	a2 83       	std	Z+2, r26	; 0x02
    2134:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2136:	8e 01       	movw	r16, r28
    2138:	0d 56       	subi	r16, 0x6D	; 109
    213a:	1f 4f       	sbci	r17, 0xFF	; 255
    213c:	fe 01       	movw	r30, r28
    213e:	e9 56       	subi	r30, 0x69	; 105
    2140:	ff 4f       	sbci	r31, 0xFF	; 255
    2142:	60 81       	ld	r22, Z
    2144:	71 81       	ldd	r23, Z+1	; 0x01
    2146:	82 81       	ldd	r24, Z+2	; 0x02
    2148:	93 81       	ldd	r25, Z+3	; 0x03
    214a:	20 e0       	ldi	r18, 0x00	; 0
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	4a e7       	ldi	r20, 0x7A	; 122
    2150:	53 e4       	ldi	r21, 0x43	; 67
    2152:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2156:	dc 01       	movw	r26, r24
    2158:	cb 01       	movw	r24, r22
    215a:	f8 01       	movw	r30, r16
    215c:	80 83       	st	Z, r24
    215e:	91 83       	std	Z+1, r25	; 0x01
    2160:	a2 83       	std	Z+2, r26	; 0x02
    2162:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2164:	fe 01       	movw	r30, r28
    2166:	ed 56       	subi	r30, 0x6D	; 109
    2168:	ff 4f       	sbci	r31, 0xFF	; 255
    216a:	60 81       	ld	r22, Z
    216c:	71 81       	ldd	r23, Z+1	; 0x01
    216e:	82 81       	ldd	r24, Z+2	; 0x02
    2170:	93 81       	ldd	r25, Z+3	; 0x03
    2172:	20 e0       	ldi	r18, 0x00	; 0
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	40 e8       	ldi	r20, 0x80	; 128
    2178:	5f e3       	ldi	r21, 0x3F	; 63
    217a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    217e:	88 23       	and	r24, r24
    2180:	44 f4       	brge	.+16     	; 0x2192 <DoorMovement+0x226>
		__ticks = 1;
    2182:	fe 01       	movw	r30, r28
    2184:	ef 56       	subi	r30, 0x6F	; 111
    2186:	ff 4f       	sbci	r31, 0xFF	; 255
    2188:	81 e0       	ldi	r24, 0x01	; 1
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	91 83       	std	Z+1, r25	; 0x01
    218e:	80 83       	st	Z, r24
    2190:	64 c0       	rjmp	.+200    	; 0x225a <DoorMovement+0x2ee>
	else if (__tmp > 65535)
    2192:	fe 01       	movw	r30, r28
    2194:	ed 56       	subi	r30, 0x6D	; 109
    2196:	ff 4f       	sbci	r31, 0xFF	; 255
    2198:	60 81       	ld	r22, Z
    219a:	71 81       	ldd	r23, Z+1	; 0x01
    219c:	82 81       	ldd	r24, Z+2	; 0x02
    219e:	93 81       	ldd	r25, Z+3	; 0x03
    21a0:	20 e0       	ldi	r18, 0x00	; 0
    21a2:	3f ef       	ldi	r19, 0xFF	; 255
    21a4:	4f e7       	ldi	r20, 0x7F	; 127
    21a6:	57 e4       	ldi	r21, 0x47	; 71
    21a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21ac:	18 16       	cp	r1, r24
    21ae:	0c f0       	brlt	.+2      	; 0x21b2 <DoorMovement+0x246>
    21b0:	43 c0       	rjmp	.+134    	; 0x2238 <DoorMovement+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21b2:	fe 01       	movw	r30, r28
    21b4:	e9 56       	subi	r30, 0x69	; 105
    21b6:	ff 4f       	sbci	r31, 0xFF	; 255
    21b8:	60 81       	ld	r22, Z
    21ba:	71 81       	ldd	r23, Z+1	; 0x01
    21bc:	82 81       	ldd	r24, Z+2	; 0x02
    21be:	93 81       	ldd	r25, Z+3	; 0x03
    21c0:	20 e0       	ldi	r18, 0x00	; 0
    21c2:	30 e0       	ldi	r19, 0x00	; 0
    21c4:	40 e2       	ldi	r20, 0x20	; 32
    21c6:	51 e4       	ldi	r21, 0x41	; 65
    21c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21cc:	dc 01       	movw	r26, r24
    21ce:	cb 01       	movw	r24, r22
    21d0:	8e 01       	movw	r16, r28
    21d2:	0f 56       	subi	r16, 0x6F	; 111
    21d4:	1f 4f       	sbci	r17, 0xFF	; 255
    21d6:	bc 01       	movw	r22, r24
    21d8:	cd 01       	movw	r24, r26
    21da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21de:	dc 01       	movw	r26, r24
    21e0:	cb 01       	movw	r24, r22
    21e2:	f8 01       	movw	r30, r16
    21e4:	91 83       	std	Z+1, r25	; 0x01
    21e6:	80 83       	st	Z, r24
    21e8:	1f c0       	rjmp	.+62     	; 0x2228 <DoorMovement+0x2bc>
    21ea:	fe 01       	movw	r30, r28
    21ec:	e1 57       	subi	r30, 0x71	; 113
    21ee:	ff 4f       	sbci	r31, 0xFF	; 255
    21f0:	89 e1       	ldi	r24, 0x19	; 25
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	91 83       	std	Z+1, r25	; 0x01
    21f6:	80 83       	st	Z, r24
    21f8:	fe 01       	movw	r30, r28
    21fa:	e1 57       	subi	r30, 0x71	; 113
    21fc:	ff 4f       	sbci	r31, 0xFF	; 255
    21fe:	80 81       	ld	r24, Z
    2200:	91 81       	ldd	r25, Z+1	; 0x01
    2202:	01 97       	sbiw	r24, 0x01	; 1
    2204:	f1 f7       	brne	.-4      	; 0x2202 <DoorMovement+0x296>
    2206:	fe 01       	movw	r30, r28
    2208:	e1 57       	subi	r30, 0x71	; 113
    220a:	ff 4f       	sbci	r31, 0xFF	; 255
    220c:	91 83       	std	Z+1, r25	; 0x01
    220e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2210:	de 01       	movw	r26, r28
    2212:	af 56       	subi	r26, 0x6F	; 111
    2214:	bf 4f       	sbci	r27, 0xFF	; 255
    2216:	fe 01       	movw	r30, r28
    2218:	ef 56       	subi	r30, 0x6F	; 111
    221a:	ff 4f       	sbci	r31, 0xFF	; 255
    221c:	80 81       	ld	r24, Z
    221e:	91 81       	ldd	r25, Z+1	; 0x01
    2220:	01 97       	sbiw	r24, 0x01	; 1
    2222:	11 96       	adiw	r26, 0x01	; 1
    2224:	9c 93       	st	X, r25
    2226:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2228:	fe 01       	movw	r30, r28
    222a:	ef 56       	subi	r30, 0x6F	; 111
    222c:	ff 4f       	sbci	r31, 0xFF	; 255
    222e:	80 81       	ld	r24, Z
    2230:	91 81       	ldd	r25, Z+1	; 0x01
    2232:	00 97       	sbiw	r24, 0x00	; 0
    2234:	d1 f6       	brne	.-76     	; 0x21ea <DoorMovement+0x27e>
    2236:	27 c0       	rjmp	.+78     	; 0x2286 <DoorMovement+0x31a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2238:	8e 01       	movw	r16, r28
    223a:	0f 56       	subi	r16, 0x6F	; 111
    223c:	1f 4f       	sbci	r17, 0xFF	; 255
    223e:	fe 01       	movw	r30, r28
    2240:	ed 56       	subi	r30, 0x6D	; 109
    2242:	ff 4f       	sbci	r31, 0xFF	; 255
    2244:	60 81       	ld	r22, Z
    2246:	71 81       	ldd	r23, Z+1	; 0x01
    2248:	82 81       	ldd	r24, Z+2	; 0x02
    224a:	93 81       	ldd	r25, Z+3	; 0x03
    224c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2250:	dc 01       	movw	r26, r24
    2252:	cb 01       	movw	r24, r22
    2254:	f8 01       	movw	r30, r16
    2256:	91 83       	std	Z+1, r25	; 0x01
    2258:	80 83       	st	Z, r24
    225a:	de 01       	movw	r26, r28
    225c:	a3 57       	subi	r26, 0x73	; 115
    225e:	bf 4f       	sbci	r27, 0xFF	; 255
    2260:	fe 01       	movw	r30, r28
    2262:	ef 56       	subi	r30, 0x6F	; 111
    2264:	ff 4f       	sbci	r31, 0xFF	; 255
    2266:	80 81       	ld	r24, Z
    2268:	91 81       	ldd	r25, Z+1	; 0x01
    226a:	8d 93       	st	X+, r24
    226c:	9c 93       	st	X, r25
    226e:	fe 01       	movw	r30, r28
    2270:	e3 57       	subi	r30, 0x73	; 115
    2272:	ff 4f       	sbci	r31, 0xFF	; 255
    2274:	80 81       	ld	r24, Z
    2276:	91 81       	ldd	r25, Z+1	; 0x01
    2278:	01 97       	sbiw	r24, 0x01	; 1
    227a:	f1 f7       	brne	.-4      	; 0x2278 <DoorMovement+0x30c>
    227c:	fe 01       	movw	r30, r28
    227e:	e3 57       	subi	r30, 0x73	; 115
    2280:	ff 4f       	sbci	r31, 0xFF	; 255
    2282:	91 83       	std	Z+1, r25	; 0x01
    2284:	80 83       	st	Z, r24
		_delay_ms(WASTE);
		LCD_displayStringRowColumn(0,15,".");
    2286:	2e ea       	ldi	r18, 0xAE	; 174
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	80 e0       	ldi	r24, 0x00	; 0
    228c:	6f e0       	ldi	r22, 0x0F	; 15
    228e:	a9 01       	movw	r20, r18
    2290:	0e 94 1b 0a 	call	0x1436	; 0x1436 <LCD_displayStringRowColumn>
    2294:	fe 01       	movw	r30, r28
    2296:	e7 57       	subi	r30, 0x77	; 119
    2298:	ff 4f       	sbci	r31, 0xFF	; 255
    229a:	80 e0       	ldi	r24, 0x00	; 0
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	a8 e4       	ldi	r26, 0x48	; 72
    22a0:	b3 e4       	ldi	r27, 0x43	; 67
    22a2:	80 83       	st	Z, r24
    22a4:	91 83       	std	Z+1, r25	; 0x01
    22a6:	a2 83       	std	Z+2, r26	; 0x02
    22a8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22aa:	8e 01       	movw	r16, r28
    22ac:	0b 57       	subi	r16, 0x7B	; 123
    22ae:	1f 4f       	sbci	r17, 0xFF	; 255
    22b0:	fe 01       	movw	r30, r28
    22b2:	e7 57       	subi	r30, 0x77	; 119
    22b4:	ff 4f       	sbci	r31, 0xFF	; 255
    22b6:	60 81       	ld	r22, Z
    22b8:	71 81       	ldd	r23, Z+1	; 0x01
    22ba:	82 81       	ldd	r24, Z+2	; 0x02
    22bc:	93 81       	ldd	r25, Z+3	; 0x03
    22be:	20 e0       	ldi	r18, 0x00	; 0
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	4a e7       	ldi	r20, 0x7A	; 122
    22c4:	53 e4       	ldi	r21, 0x43	; 67
    22c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ca:	dc 01       	movw	r26, r24
    22cc:	cb 01       	movw	r24, r22
    22ce:	f8 01       	movw	r30, r16
    22d0:	80 83       	st	Z, r24
    22d2:	91 83       	std	Z+1, r25	; 0x01
    22d4:	a2 83       	std	Z+2, r26	; 0x02
    22d6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22d8:	fe 01       	movw	r30, r28
    22da:	eb 57       	subi	r30, 0x7B	; 123
    22dc:	ff 4f       	sbci	r31, 0xFF	; 255
    22de:	60 81       	ld	r22, Z
    22e0:	71 81       	ldd	r23, Z+1	; 0x01
    22e2:	82 81       	ldd	r24, Z+2	; 0x02
    22e4:	93 81       	ldd	r25, Z+3	; 0x03
    22e6:	20 e0       	ldi	r18, 0x00	; 0
    22e8:	30 e0       	ldi	r19, 0x00	; 0
    22ea:	40 e8       	ldi	r20, 0x80	; 128
    22ec:	5f e3       	ldi	r21, 0x3F	; 63
    22ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22f2:	88 23       	and	r24, r24
    22f4:	44 f4       	brge	.+16     	; 0x2306 <DoorMovement+0x39a>
		__ticks = 1;
    22f6:	fe 01       	movw	r30, r28
    22f8:	ed 57       	subi	r30, 0x7D	; 125
    22fa:	ff 4f       	sbci	r31, 0xFF	; 255
    22fc:	81 e0       	ldi	r24, 0x01	; 1
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	91 83       	std	Z+1, r25	; 0x01
    2302:	80 83       	st	Z, r24
    2304:	64 c0       	rjmp	.+200    	; 0x23ce <DoorMovement+0x462>
	else if (__tmp > 65535)
    2306:	fe 01       	movw	r30, r28
    2308:	eb 57       	subi	r30, 0x7B	; 123
    230a:	ff 4f       	sbci	r31, 0xFF	; 255
    230c:	60 81       	ld	r22, Z
    230e:	71 81       	ldd	r23, Z+1	; 0x01
    2310:	82 81       	ldd	r24, Z+2	; 0x02
    2312:	93 81       	ldd	r25, Z+3	; 0x03
    2314:	20 e0       	ldi	r18, 0x00	; 0
    2316:	3f ef       	ldi	r19, 0xFF	; 255
    2318:	4f e7       	ldi	r20, 0x7F	; 127
    231a:	57 e4       	ldi	r21, 0x47	; 71
    231c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2320:	18 16       	cp	r1, r24
    2322:	0c f0       	brlt	.+2      	; 0x2326 <DoorMovement+0x3ba>
    2324:	43 c0       	rjmp	.+134    	; 0x23ac <DoorMovement+0x440>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2326:	fe 01       	movw	r30, r28
    2328:	e7 57       	subi	r30, 0x77	; 119
    232a:	ff 4f       	sbci	r31, 0xFF	; 255
    232c:	60 81       	ld	r22, Z
    232e:	71 81       	ldd	r23, Z+1	; 0x01
    2330:	82 81       	ldd	r24, Z+2	; 0x02
    2332:	93 81       	ldd	r25, Z+3	; 0x03
    2334:	20 e0       	ldi	r18, 0x00	; 0
    2336:	30 e0       	ldi	r19, 0x00	; 0
    2338:	40 e2       	ldi	r20, 0x20	; 32
    233a:	51 e4       	ldi	r21, 0x41	; 65
    233c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2340:	dc 01       	movw	r26, r24
    2342:	cb 01       	movw	r24, r22
    2344:	8e 01       	movw	r16, r28
    2346:	0d 57       	subi	r16, 0x7D	; 125
    2348:	1f 4f       	sbci	r17, 0xFF	; 255
    234a:	bc 01       	movw	r22, r24
    234c:	cd 01       	movw	r24, r26
    234e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2352:	dc 01       	movw	r26, r24
    2354:	cb 01       	movw	r24, r22
    2356:	f8 01       	movw	r30, r16
    2358:	91 83       	std	Z+1, r25	; 0x01
    235a:	80 83       	st	Z, r24
    235c:	1f c0       	rjmp	.+62     	; 0x239c <DoorMovement+0x430>
    235e:	fe 01       	movw	r30, r28
    2360:	ef 57       	subi	r30, 0x7F	; 127
    2362:	ff 4f       	sbci	r31, 0xFF	; 255
    2364:	89 e1       	ldi	r24, 0x19	; 25
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	91 83       	std	Z+1, r25	; 0x01
    236a:	80 83       	st	Z, r24
    236c:	fe 01       	movw	r30, r28
    236e:	ef 57       	subi	r30, 0x7F	; 127
    2370:	ff 4f       	sbci	r31, 0xFF	; 255
    2372:	80 81       	ld	r24, Z
    2374:	91 81       	ldd	r25, Z+1	; 0x01
    2376:	01 97       	sbiw	r24, 0x01	; 1
    2378:	f1 f7       	brne	.-4      	; 0x2376 <DoorMovement+0x40a>
    237a:	fe 01       	movw	r30, r28
    237c:	ef 57       	subi	r30, 0x7F	; 127
    237e:	ff 4f       	sbci	r31, 0xFF	; 255
    2380:	91 83       	std	Z+1, r25	; 0x01
    2382:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2384:	de 01       	movw	r26, r28
    2386:	ad 57       	subi	r26, 0x7D	; 125
    2388:	bf 4f       	sbci	r27, 0xFF	; 255
    238a:	fe 01       	movw	r30, r28
    238c:	ed 57       	subi	r30, 0x7D	; 125
    238e:	ff 4f       	sbci	r31, 0xFF	; 255
    2390:	80 81       	ld	r24, Z
    2392:	91 81       	ldd	r25, Z+1	; 0x01
    2394:	01 97       	sbiw	r24, 0x01	; 1
    2396:	11 96       	adiw	r26, 0x01	; 1
    2398:	9c 93       	st	X, r25
    239a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    239c:	fe 01       	movw	r30, r28
    239e:	ed 57       	subi	r30, 0x7D	; 125
    23a0:	ff 4f       	sbci	r31, 0xFF	; 255
    23a2:	80 81       	ld	r24, Z
    23a4:	91 81       	ldd	r25, Z+1	; 0x01
    23a6:	00 97       	sbiw	r24, 0x00	; 0
    23a8:	d1 f6       	brne	.-76     	; 0x235e <DoorMovement+0x3f2>
    23aa:	27 c0       	rjmp	.+78     	; 0x23fa <DoorMovement+0x48e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23ac:	8e 01       	movw	r16, r28
    23ae:	0d 57       	subi	r16, 0x7D	; 125
    23b0:	1f 4f       	sbci	r17, 0xFF	; 255
    23b2:	fe 01       	movw	r30, r28
    23b4:	eb 57       	subi	r30, 0x7B	; 123
    23b6:	ff 4f       	sbci	r31, 0xFF	; 255
    23b8:	60 81       	ld	r22, Z
    23ba:	71 81       	ldd	r23, Z+1	; 0x01
    23bc:	82 81       	ldd	r24, Z+2	; 0x02
    23be:	93 81       	ldd	r25, Z+3	; 0x03
    23c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23c4:	dc 01       	movw	r26, r24
    23c6:	cb 01       	movw	r24, r22
    23c8:	f8 01       	movw	r30, r16
    23ca:	91 83       	std	Z+1, r25	; 0x01
    23cc:	80 83       	st	Z, r24
    23ce:	de 01       	movw	r26, r28
    23d0:	a1 58       	subi	r26, 0x81	; 129
    23d2:	bf 4f       	sbci	r27, 0xFF	; 255
    23d4:	fe 01       	movw	r30, r28
    23d6:	ed 57       	subi	r30, 0x7D	; 125
    23d8:	ff 4f       	sbci	r31, 0xFF	; 255
    23da:	80 81       	ld	r24, Z
    23dc:	91 81       	ldd	r25, Z+1	; 0x01
    23de:	8d 93       	st	X+, r24
    23e0:	9c 93       	st	X, r25
    23e2:	fe 01       	movw	r30, r28
    23e4:	e1 58       	subi	r30, 0x81	; 129
    23e6:	ff 4f       	sbci	r31, 0xFF	; 255
    23e8:	80 81       	ld	r24, Z
    23ea:	91 81       	ldd	r25, Z+1	; 0x01
    23ec:	01 97       	sbiw	r24, 0x01	; 1
    23ee:	f1 f7       	brne	.-4      	; 0x23ec <DoorMovement+0x480>
    23f0:	fe 01       	movw	r30, r28
    23f2:	e1 58       	subi	r30, 0x81	; 129
    23f4:	ff 4f       	sbci	r31, 0xFF	; 255
    23f6:	91 83       	std	Z+1, r25	; 0x01
    23f8:	80 83       	st	Z, r24
		_delay_ms(WASTE);
		LCD_displayStringRowColumn(0,15," ");
    23fa:	20 eb       	ldi	r18, 0xB0	; 176
    23fc:	30 e0       	ldi	r19, 0x00	; 0
    23fe:	80 e0       	ldi	r24, 0x00	; 0
    2400:	6f e0       	ldi	r22, 0x0F	; 15
    2402:	a9 01       	movw	r20, r18
    2404:	0e 94 1b 0a 	call	0x1436	; 0x1436 <LCD_displayStringRowColumn>
    2408:	fe 01       	movw	r30, r28
    240a:	e5 58       	subi	r30, 0x85	; 133
    240c:	ff 4f       	sbci	r31, 0xFF	; 255
    240e:	80 e0       	ldi	r24, 0x00	; 0
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	a8 e4       	ldi	r26, 0x48	; 72
    2414:	b3 e4       	ldi	r27, 0x43	; 67
    2416:	80 83       	st	Z, r24
    2418:	91 83       	std	Z+1, r25	; 0x01
    241a:	a2 83       	std	Z+2, r26	; 0x02
    241c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    241e:	8e 01       	movw	r16, r28
    2420:	09 58       	subi	r16, 0x89	; 137
    2422:	1f 4f       	sbci	r17, 0xFF	; 255
    2424:	fe 01       	movw	r30, r28
    2426:	e5 58       	subi	r30, 0x85	; 133
    2428:	ff 4f       	sbci	r31, 0xFF	; 255
    242a:	60 81       	ld	r22, Z
    242c:	71 81       	ldd	r23, Z+1	; 0x01
    242e:	82 81       	ldd	r24, Z+2	; 0x02
    2430:	93 81       	ldd	r25, Z+3	; 0x03
    2432:	20 e0       	ldi	r18, 0x00	; 0
    2434:	30 e0       	ldi	r19, 0x00	; 0
    2436:	4a e7       	ldi	r20, 0x7A	; 122
    2438:	53 e4       	ldi	r21, 0x43	; 67
    243a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    243e:	dc 01       	movw	r26, r24
    2440:	cb 01       	movw	r24, r22
    2442:	f8 01       	movw	r30, r16
    2444:	80 83       	st	Z, r24
    2446:	91 83       	std	Z+1, r25	; 0x01
    2448:	a2 83       	std	Z+2, r26	; 0x02
    244a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    244c:	fe 01       	movw	r30, r28
    244e:	e9 58       	subi	r30, 0x89	; 137
    2450:	ff 4f       	sbci	r31, 0xFF	; 255
    2452:	60 81       	ld	r22, Z
    2454:	71 81       	ldd	r23, Z+1	; 0x01
    2456:	82 81       	ldd	r24, Z+2	; 0x02
    2458:	93 81       	ldd	r25, Z+3	; 0x03
    245a:	20 e0       	ldi	r18, 0x00	; 0
    245c:	30 e0       	ldi	r19, 0x00	; 0
    245e:	40 e8       	ldi	r20, 0x80	; 128
    2460:	5f e3       	ldi	r21, 0x3F	; 63
    2462:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2466:	88 23       	and	r24, r24
    2468:	44 f4       	brge	.+16     	; 0x247a <DoorMovement+0x50e>
		__ticks = 1;
    246a:	fe 01       	movw	r30, r28
    246c:	eb 58       	subi	r30, 0x8B	; 139
    246e:	ff 4f       	sbci	r31, 0xFF	; 255
    2470:	81 e0       	ldi	r24, 0x01	; 1
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	91 83       	std	Z+1, r25	; 0x01
    2476:	80 83       	st	Z, r24
    2478:	64 c0       	rjmp	.+200    	; 0x2542 <DoorMovement+0x5d6>
	else if (__tmp > 65535)
    247a:	fe 01       	movw	r30, r28
    247c:	e9 58       	subi	r30, 0x89	; 137
    247e:	ff 4f       	sbci	r31, 0xFF	; 255
    2480:	60 81       	ld	r22, Z
    2482:	71 81       	ldd	r23, Z+1	; 0x01
    2484:	82 81       	ldd	r24, Z+2	; 0x02
    2486:	93 81       	ldd	r25, Z+3	; 0x03
    2488:	20 e0       	ldi	r18, 0x00	; 0
    248a:	3f ef       	ldi	r19, 0xFF	; 255
    248c:	4f e7       	ldi	r20, 0x7F	; 127
    248e:	57 e4       	ldi	r21, 0x47	; 71
    2490:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2494:	18 16       	cp	r1, r24
    2496:	0c f0       	brlt	.+2      	; 0x249a <DoorMovement+0x52e>
    2498:	43 c0       	rjmp	.+134    	; 0x2520 <DoorMovement+0x5b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    249a:	fe 01       	movw	r30, r28
    249c:	e5 58       	subi	r30, 0x85	; 133
    249e:	ff 4f       	sbci	r31, 0xFF	; 255
    24a0:	60 81       	ld	r22, Z
    24a2:	71 81       	ldd	r23, Z+1	; 0x01
    24a4:	82 81       	ldd	r24, Z+2	; 0x02
    24a6:	93 81       	ldd	r25, Z+3	; 0x03
    24a8:	20 e0       	ldi	r18, 0x00	; 0
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	40 e2       	ldi	r20, 0x20	; 32
    24ae:	51 e4       	ldi	r21, 0x41	; 65
    24b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b4:	dc 01       	movw	r26, r24
    24b6:	cb 01       	movw	r24, r22
    24b8:	8e 01       	movw	r16, r28
    24ba:	0b 58       	subi	r16, 0x8B	; 139
    24bc:	1f 4f       	sbci	r17, 0xFF	; 255
    24be:	bc 01       	movw	r22, r24
    24c0:	cd 01       	movw	r24, r26
    24c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c6:	dc 01       	movw	r26, r24
    24c8:	cb 01       	movw	r24, r22
    24ca:	f8 01       	movw	r30, r16
    24cc:	91 83       	std	Z+1, r25	; 0x01
    24ce:	80 83       	st	Z, r24
    24d0:	1f c0       	rjmp	.+62     	; 0x2510 <DoorMovement+0x5a4>
    24d2:	fe 01       	movw	r30, r28
    24d4:	ed 58       	subi	r30, 0x8D	; 141
    24d6:	ff 4f       	sbci	r31, 0xFF	; 255
    24d8:	89 e1       	ldi	r24, 0x19	; 25
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	91 83       	std	Z+1, r25	; 0x01
    24de:	80 83       	st	Z, r24
    24e0:	fe 01       	movw	r30, r28
    24e2:	ed 58       	subi	r30, 0x8D	; 141
    24e4:	ff 4f       	sbci	r31, 0xFF	; 255
    24e6:	80 81       	ld	r24, Z
    24e8:	91 81       	ldd	r25, Z+1	; 0x01
    24ea:	01 97       	sbiw	r24, 0x01	; 1
    24ec:	f1 f7       	brne	.-4      	; 0x24ea <DoorMovement+0x57e>
    24ee:	fe 01       	movw	r30, r28
    24f0:	ed 58       	subi	r30, 0x8D	; 141
    24f2:	ff 4f       	sbci	r31, 0xFF	; 255
    24f4:	91 83       	std	Z+1, r25	; 0x01
    24f6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24f8:	de 01       	movw	r26, r28
    24fa:	ab 58       	subi	r26, 0x8B	; 139
    24fc:	bf 4f       	sbci	r27, 0xFF	; 255
    24fe:	fe 01       	movw	r30, r28
    2500:	eb 58       	subi	r30, 0x8B	; 139
    2502:	ff 4f       	sbci	r31, 0xFF	; 255
    2504:	80 81       	ld	r24, Z
    2506:	91 81       	ldd	r25, Z+1	; 0x01
    2508:	01 97       	sbiw	r24, 0x01	; 1
    250a:	11 96       	adiw	r26, 0x01	; 1
    250c:	9c 93       	st	X, r25
    250e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2510:	fe 01       	movw	r30, r28
    2512:	eb 58       	subi	r30, 0x8B	; 139
    2514:	ff 4f       	sbci	r31, 0xFF	; 255
    2516:	80 81       	ld	r24, Z
    2518:	91 81       	ldd	r25, Z+1	; 0x01
    251a:	00 97       	sbiw	r24, 0x00	; 0
    251c:	d1 f6       	brne	.-76     	; 0x24d2 <DoorMovement+0x566>
    251e:	27 c0       	rjmp	.+78     	; 0x256e <DoorMovement+0x602>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2520:	8e 01       	movw	r16, r28
    2522:	0b 58       	subi	r16, 0x8B	; 139
    2524:	1f 4f       	sbci	r17, 0xFF	; 255
    2526:	fe 01       	movw	r30, r28
    2528:	e9 58       	subi	r30, 0x89	; 137
    252a:	ff 4f       	sbci	r31, 0xFF	; 255
    252c:	60 81       	ld	r22, Z
    252e:	71 81       	ldd	r23, Z+1	; 0x01
    2530:	82 81       	ldd	r24, Z+2	; 0x02
    2532:	93 81       	ldd	r25, Z+3	; 0x03
    2534:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2538:	dc 01       	movw	r26, r24
    253a:	cb 01       	movw	r24, r22
    253c:	f8 01       	movw	r30, r16
    253e:	91 83       	std	Z+1, r25	; 0x01
    2540:	80 83       	st	Z, r24
    2542:	de 01       	movw	r26, r28
    2544:	af 58       	subi	r26, 0x8F	; 143
    2546:	bf 4f       	sbci	r27, 0xFF	; 255
    2548:	fe 01       	movw	r30, r28
    254a:	eb 58       	subi	r30, 0x8B	; 139
    254c:	ff 4f       	sbci	r31, 0xFF	; 255
    254e:	80 81       	ld	r24, Z
    2550:	91 81       	ldd	r25, Z+1	; 0x01
    2552:	8d 93       	st	X+, r24
    2554:	9c 93       	st	X, r25
    2556:	fe 01       	movw	r30, r28
    2558:	ef 58       	subi	r30, 0x8F	; 143
    255a:	ff 4f       	sbci	r31, 0xFF	; 255
    255c:	80 81       	ld	r24, Z
    255e:	91 81       	ldd	r25, Z+1	; 0x01
    2560:	01 97       	sbiw	r24, 0x01	; 1
    2562:	f1 f7       	brne	.-4      	; 0x2560 <DoorMovement+0x5f4>
    2564:	fe 01       	movw	r30, r28
    2566:	ef 58       	subi	r30, 0x8F	; 143
    2568:	ff 4f       	sbci	r31, 0xFF	; 255
    256a:	91 83       	std	Z+1, r25	; 0x01
    256c:	80 83       	st	Z, r24
		_delay_ms(WASTE);
		LCD_displayStringRowColumn(0,14," ");
    256e:	20 eb       	ldi	r18, 0xB0	; 176
    2570:	30 e0       	ldi	r19, 0x00	; 0
    2572:	80 e0       	ldi	r24, 0x00	; 0
    2574:	6e e0       	ldi	r22, 0x0E	; 14
    2576:	a9 01       	movw	r20, r18
    2578:	0e 94 1b 0a 	call	0x1436	; 0x1436 <LCD_displayStringRowColumn>
    257c:	fe 01       	movw	r30, r28
    257e:	e3 59       	subi	r30, 0x93	; 147
    2580:	ff 4f       	sbci	r31, 0xFF	; 255
    2582:	80 e0       	ldi	r24, 0x00	; 0
    2584:	90 e0       	ldi	r25, 0x00	; 0
    2586:	a8 e4       	ldi	r26, 0x48	; 72
    2588:	b3 e4       	ldi	r27, 0x43	; 67
    258a:	80 83       	st	Z, r24
    258c:	91 83       	std	Z+1, r25	; 0x01
    258e:	a2 83       	std	Z+2, r26	; 0x02
    2590:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2592:	8e 01       	movw	r16, r28
    2594:	07 59       	subi	r16, 0x97	; 151
    2596:	1f 4f       	sbci	r17, 0xFF	; 255
    2598:	fe 01       	movw	r30, r28
    259a:	e3 59       	subi	r30, 0x93	; 147
    259c:	ff 4f       	sbci	r31, 0xFF	; 255
    259e:	60 81       	ld	r22, Z
    25a0:	71 81       	ldd	r23, Z+1	; 0x01
    25a2:	82 81       	ldd	r24, Z+2	; 0x02
    25a4:	93 81       	ldd	r25, Z+3	; 0x03
    25a6:	20 e0       	ldi	r18, 0x00	; 0
    25a8:	30 e0       	ldi	r19, 0x00	; 0
    25aa:	4a e7       	ldi	r20, 0x7A	; 122
    25ac:	53 e4       	ldi	r21, 0x43	; 67
    25ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b2:	dc 01       	movw	r26, r24
    25b4:	cb 01       	movw	r24, r22
    25b6:	f8 01       	movw	r30, r16
    25b8:	80 83       	st	Z, r24
    25ba:	91 83       	std	Z+1, r25	; 0x01
    25bc:	a2 83       	std	Z+2, r26	; 0x02
    25be:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25c0:	fe 01       	movw	r30, r28
    25c2:	e7 59       	subi	r30, 0x97	; 151
    25c4:	ff 4f       	sbci	r31, 0xFF	; 255
    25c6:	60 81       	ld	r22, Z
    25c8:	71 81       	ldd	r23, Z+1	; 0x01
    25ca:	82 81       	ldd	r24, Z+2	; 0x02
    25cc:	93 81       	ldd	r25, Z+3	; 0x03
    25ce:	20 e0       	ldi	r18, 0x00	; 0
    25d0:	30 e0       	ldi	r19, 0x00	; 0
    25d2:	40 e8       	ldi	r20, 0x80	; 128
    25d4:	5f e3       	ldi	r21, 0x3F	; 63
    25d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25da:	88 23       	and	r24, r24
    25dc:	44 f4       	brge	.+16     	; 0x25ee <DoorMovement+0x682>
		__ticks = 1;
    25de:	fe 01       	movw	r30, r28
    25e0:	e9 59       	subi	r30, 0x99	; 153
    25e2:	ff 4f       	sbci	r31, 0xFF	; 255
    25e4:	81 e0       	ldi	r24, 0x01	; 1
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	91 83       	std	Z+1, r25	; 0x01
    25ea:	80 83       	st	Z, r24
    25ec:	64 c0       	rjmp	.+200    	; 0x26b6 <DoorMovement+0x74a>
	else if (__tmp > 65535)
    25ee:	fe 01       	movw	r30, r28
    25f0:	e7 59       	subi	r30, 0x97	; 151
    25f2:	ff 4f       	sbci	r31, 0xFF	; 255
    25f4:	60 81       	ld	r22, Z
    25f6:	71 81       	ldd	r23, Z+1	; 0x01
    25f8:	82 81       	ldd	r24, Z+2	; 0x02
    25fa:	93 81       	ldd	r25, Z+3	; 0x03
    25fc:	20 e0       	ldi	r18, 0x00	; 0
    25fe:	3f ef       	ldi	r19, 0xFF	; 255
    2600:	4f e7       	ldi	r20, 0x7F	; 127
    2602:	57 e4       	ldi	r21, 0x47	; 71
    2604:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2608:	18 16       	cp	r1, r24
    260a:	0c f0       	brlt	.+2      	; 0x260e <DoorMovement+0x6a2>
    260c:	43 c0       	rjmp	.+134    	; 0x2694 <DoorMovement+0x728>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    260e:	fe 01       	movw	r30, r28
    2610:	e3 59       	subi	r30, 0x93	; 147
    2612:	ff 4f       	sbci	r31, 0xFF	; 255
    2614:	60 81       	ld	r22, Z
    2616:	71 81       	ldd	r23, Z+1	; 0x01
    2618:	82 81       	ldd	r24, Z+2	; 0x02
    261a:	93 81       	ldd	r25, Z+3	; 0x03
    261c:	20 e0       	ldi	r18, 0x00	; 0
    261e:	30 e0       	ldi	r19, 0x00	; 0
    2620:	40 e2       	ldi	r20, 0x20	; 32
    2622:	51 e4       	ldi	r21, 0x41	; 65
    2624:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2628:	dc 01       	movw	r26, r24
    262a:	cb 01       	movw	r24, r22
    262c:	8e 01       	movw	r16, r28
    262e:	09 59       	subi	r16, 0x99	; 153
    2630:	1f 4f       	sbci	r17, 0xFF	; 255
    2632:	bc 01       	movw	r22, r24
    2634:	cd 01       	movw	r24, r26
    2636:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    263a:	dc 01       	movw	r26, r24
    263c:	cb 01       	movw	r24, r22
    263e:	f8 01       	movw	r30, r16
    2640:	91 83       	std	Z+1, r25	; 0x01
    2642:	80 83       	st	Z, r24
    2644:	1f c0       	rjmp	.+62     	; 0x2684 <DoorMovement+0x718>
    2646:	fe 01       	movw	r30, r28
    2648:	eb 59       	subi	r30, 0x9B	; 155
    264a:	ff 4f       	sbci	r31, 0xFF	; 255
    264c:	89 e1       	ldi	r24, 0x19	; 25
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	91 83       	std	Z+1, r25	; 0x01
    2652:	80 83       	st	Z, r24
    2654:	fe 01       	movw	r30, r28
    2656:	eb 59       	subi	r30, 0x9B	; 155
    2658:	ff 4f       	sbci	r31, 0xFF	; 255
    265a:	80 81       	ld	r24, Z
    265c:	91 81       	ldd	r25, Z+1	; 0x01
    265e:	01 97       	sbiw	r24, 0x01	; 1
    2660:	f1 f7       	brne	.-4      	; 0x265e <DoorMovement+0x6f2>
    2662:	fe 01       	movw	r30, r28
    2664:	eb 59       	subi	r30, 0x9B	; 155
    2666:	ff 4f       	sbci	r31, 0xFF	; 255
    2668:	91 83       	std	Z+1, r25	; 0x01
    266a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    266c:	de 01       	movw	r26, r28
    266e:	a9 59       	subi	r26, 0x99	; 153
    2670:	bf 4f       	sbci	r27, 0xFF	; 255
    2672:	fe 01       	movw	r30, r28
    2674:	e9 59       	subi	r30, 0x99	; 153
    2676:	ff 4f       	sbci	r31, 0xFF	; 255
    2678:	80 81       	ld	r24, Z
    267a:	91 81       	ldd	r25, Z+1	; 0x01
    267c:	01 97       	sbiw	r24, 0x01	; 1
    267e:	11 96       	adiw	r26, 0x01	; 1
    2680:	9c 93       	st	X, r25
    2682:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2684:	fe 01       	movw	r30, r28
    2686:	e9 59       	subi	r30, 0x99	; 153
    2688:	ff 4f       	sbci	r31, 0xFF	; 255
    268a:	80 81       	ld	r24, Z
    268c:	91 81       	ldd	r25, Z+1	; 0x01
    268e:	00 97       	sbiw	r24, 0x00	; 0
    2690:	d1 f6       	brne	.-76     	; 0x2646 <DoorMovement+0x6da>
    2692:	27 c0       	rjmp	.+78     	; 0x26e2 <DoorMovement+0x776>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2694:	8e 01       	movw	r16, r28
    2696:	09 59       	subi	r16, 0x99	; 153
    2698:	1f 4f       	sbci	r17, 0xFF	; 255
    269a:	fe 01       	movw	r30, r28
    269c:	e7 59       	subi	r30, 0x97	; 151
    269e:	ff 4f       	sbci	r31, 0xFF	; 255
    26a0:	60 81       	ld	r22, Z
    26a2:	71 81       	ldd	r23, Z+1	; 0x01
    26a4:	82 81       	ldd	r24, Z+2	; 0x02
    26a6:	93 81       	ldd	r25, Z+3	; 0x03
    26a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ac:	dc 01       	movw	r26, r24
    26ae:	cb 01       	movw	r24, r22
    26b0:	f8 01       	movw	r30, r16
    26b2:	91 83       	std	Z+1, r25	; 0x01
    26b4:	80 83       	st	Z, r24
    26b6:	de 01       	movw	r26, r28
    26b8:	ad 59       	subi	r26, 0x9D	; 157
    26ba:	bf 4f       	sbci	r27, 0xFF	; 255
    26bc:	fe 01       	movw	r30, r28
    26be:	e9 59       	subi	r30, 0x99	; 153
    26c0:	ff 4f       	sbci	r31, 0xFF	; 255
    26c2:	80 81       	ld	r24, Z
    26c4:	91 81       	ldd	r25, Z+1	; 0x01
    26c6:	8d 93       	st	X+, r24
    26c8:	9c 93       	st	X, r25
    26ca:	fe 01       	movw	r30, r28
    26cc:	ed 59       	subi	r30, 0x9D	; 157
    26ce:	ff 4f       	sbci	r31, 0xFF	; 255
    26d0:	80 81       	ld	r24, Z
    26d2:	91 81       	ldd	r25, Z+1	; 0x01
    26d4:	01 97       	sbiw	r24, 0x01	; 1
    26d6:	f1 f7       	brne	.-4      	; 0x26d4 <DoorMovement+0x768>
    26d8:	fe 01       	movw	r30, r28
    26da:	ed 59       	subi	r30, 0x9D	; 157
    26dc:	ff 4f       	sbci	r31, 0xFF	; 255
    26de:	91 83       	std	Z+1, r25	; 0x01
    26e0:	80 83       	st	Z, r24
		_delay_ms(WASTE);
		LCD_displayStringRowColumn(0,13," ");
    26e2:	20 eb       	ldi	r18, 0xB0	; 176
    26e4:	30 e0       	ldi	r19, 0x00	; 0
    26e6:	80 e0       	ldi	r24, 0x00	; 0
    26e8:	6d e0       	ldi	r22, 0x0D	; 13
    26ea:	a9 01       	movw	r20, r18
    26ec:	0e 94 1b 0a 	call	0x1436	; 0x1436 <LCD_displayStringRowColumn>
    26f0:	fe 01       	movw	r30, r28
    26f2:	e1 5a       	subi	r30, 0xA1	; 161
    26f4:	ff 4f       	sbci	r31, 0xFF	; 255
    26f6:	80 e0       	ldi	r24, 0x00	; 0
    26f8:	90 e0       	ldi	r25, 0x00	; 0
    26fa:	a8 e4       	ldi	r26, 0x48	; 72
    26fc:	b3 e4       	ldi	r27, 0x43	; 67
    26fe:	80 83       	st	Z, r24
    2700:	91 83       	std	Z+1, r25	; 0x01
    2702:	a2 83       	std	Z+2, r26	; 0x02
    2704:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2706:	8e 01       	movw	r16, r28
    2708:	05 5a       	subi	r16, 0xA5	; 165
    270a:	1f 4f       	sbci	r17, 0xFF	; 255
    270c:	fe 01       	movw	r30, r28
    270e:	e1 5a       	subi	r30, 0xA1	; 161
    2710:	ff 4f       	sbci	r31, 0xFF	; 255
    2712:	60 81       	ld	r22, Z
    2714:	71 81       	ldd	r23, Z+1	; 0x01
    2716:	82 81       	ldd	r24, Z+2	; 0x02
    2718:	93 81       	ldd	r25, Z+3	; 0x03
    271a:	20 e0       	ldi	r18, 0x00	; 0
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	4a e7       	ldi	r20, 0x7A	; 122
    2720:	53 e4       	ldi	r21, 0x43	; 67
    2722:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2726:	dc 01       	movw	r26, r24
    2728:	cb 01       	movw	r24, r22
    272a:	f8 01       	movw	r30, r16
    272c:	80 83       	st	Z, r24
    272e:	91 83       	std	Z+1, r25	; 0x01
    2730:	a2 83       	std	Z+2, r26	; 0x02
    2732:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2734:	fe 01       	movw	r30, r28
    2736:	e5 5a       	subi	r30, 0xA5	; 165
    2738:	ff 4f       	sbci	r31, 0xFF	; 255
    273a:	60 81       	ld	r22, Z
    273c:	71 81       	ldd	r23, Z+1	; 0x01
    273e:	82 81       	ldd	r24, Z+2	; 0x02
    2740:	93 81       	ldd	r25, Z+3	; 0x03
    2742:	20 e0       	ldi	r18, 0x00	; 0
    2744:	30 e0       	ldi	r19, 0x00	; 0
    2746:	40 e8       	ldi	r20, 0x80	; 128
    2748:	5f e3       	ldi	r21, 0x3F	; 63
    274a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    274e:	88 23       	and	r24, r24
    2750:	44 f4       	brge	.+16     	; 0x2762 <DoorMovement+0x7f6>
		__ticks = 1;
    2752:	fe 01       	movw	r30, r28
    2754:	e7 5a       	subi	r30, 0xA7	; 167
    2756:	ff 4f       	sbci	r31, 0xFF	; 255
    2758:	81 e0       	ldi	r24, 0x01	; 1
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	91 83       	std	Z+1, r25	; 0x01
    275e:	80 83       	st	Z, r24
    2760:	64 c0       	rjmp	.+200    	; 0x282a <DoorMovement+0x8be>
	else if (__tmp > 65535)
    2762:	fe 01       	movw	r30, r28
    2764:	e5 5a       	subi	r30, 0xA5	; 165
    2766:	ff 4f       	sbci	r31, 0xFF	; 255
    2768:	60 81       	ld	r22, Z
    276a:	71 81       	ldd	r23, Z+1	; 0x01
    276c:	82 81       	ldd	r24, Z+2	; 0x02
    276e:	93 81       	ldd	r25, Z+3	; 0x03
    2770:	20 e0       	ldi	r18, 0x00	; 0
    2772:	3f ef       	ldi	r19, 0xFF	; 255
    2774:	4f e7       	ldi	r20, 0x7F	; 127
    2776:	57 e4       	ldi	r21, 0x47	; 71
    2778:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    277c:	18 16       	cp	r1, r24
    277e:	0c f0       	brlt	.+2      	; 0x2782 <DoorMovement+0x816>
    2780:	43 c0       	rjmp	.+134    	; 0x2808 <DoorMovement+0x89c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2782:	fe 01       	movw	r30, r28
    2784:	e1 5a       	subi	r30, 0xA1	; 161
    2786:	ff 4f       	sbci	r31, 0xFF	; 255
    2788:	60 81       	ld	r22, Z
    278a:	71 81       	ldd	r23, Z+1	; 0x01
    278c:	82 81       	ldd	r24, Z+2	; 0x02
    278e:	93 81       	ldd	r25, Z+3	; 0x03
    2790:	20 e0       	ldi	r18, 0x00	; 0
    2792:	30 e0       	ldi	r19, 0x00	; 0
    2794:	40 e2       	ldi	r20, 0x20	; 32
    2796:	51 e4       	ldi	r21, 0x41	; 65
    2798:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    279c:	dc 01       	movw	r26, r24
    279e:	cb 01       	movw	r24, r22
    27a0:	8e 01       	movw	r16, r28
    27a2:	07 5a       	subi	r16, 0xA7	; 167
    27a4:	1f 4f       	sbci	r17, 0xFF	; 255
    27a6:	bc 01       	movw	r22, r24
    27a8:	cd 01       	movw	r24, r26
    27aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ae:	dc 01       	movw	r26, r24
    27b0:	cb 01       	movw	r24, r22
    27b2:	f8 01       	movw	r30, r16
    27b4:	91 83       	std	Z+1, r25	; 0x01
    27b6:	80 83       	st	Z, r24
    27b8:	1f c0       	rjmp	.+62     	; 0x27f8 <DoorMovement+0x88c>
    27ba:	fe 01       	movw	r30, r28
    27bc:	e9 5a       	subi	r30, 0xA9	; 169
    27be:	ff 4f       	sbci	r31, 0xFF	; 255
    27c0:	89 e1       	ldi	r24, 0x19	; 25
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	91 83       	std	Z+1, r25	; 0x01
    27c6:	80 83       	st	Z, r24
    27c8:	fe 01       	movw	r30, r28
    27ca:	e9 5a       	subi	r30, 0xA9	; 169
    27cc:	ff 4f       	sbci	r31, 0xFF	; 255
    27ce:	80 81       	ld	r24, Z
    27d0:	91 81       	ldd	r25, Z+1	; 0x01
    27d2:	01 97       	sbiw	r24, 0x01	; 1
    27d4:	f1 f7       	brne	.-4      	; 0x27d2 <DoorMovement+0x866>
    27d6:	fe 01       	movw	r30, r28
    27d8:	e9 5a       	subi	r30, 0xA9	; 169
    27da:	ff 4f       	sbci	r31, 0xFF	; 255
    27dc:	91 83       	std	Z+1, r25	; 0x01
    27de:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27e0:	de 01       	movw	r26, r28
    27e2:	a7 5a       	subi	r26, 0xA7	; 167
    27e4:	bf 4f       	sbci	r27, 0xFF	; 255
    27e6:	fe 01       	movw	r30, r28
    27e8:	e7 5a       	subi	r30, 0xA7	; 167
    27ea:	ff 4f       	sbci	r31, 0xFF	; 255
    27ec:	80 81       	ld	r24, Z
    27ee:	91 81       	ldd	r25, Z+1	; 0x01
    27f0:	01 97       	sbiw	r24, 0x01	; 1
    27f2:	11 96       	adiw	r26, 0x01	; 1
    27f4:	9c 93       	st	X, r25
    27f6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27f8:	fe 01       	movw	r30, r28
    27fa:	e7 5a       	subi	r30, 0xA7	; 167
    27fc:	ff 4f       	sbci	r31, 0xFF	; 255
    27fe:	80 81       	ld	r24, Z
    2800:	91 81       	ldd	r25, Z+1	; 0x01
    2802:	00 97       	sbiw	r24, 0x00	; 0
    2804:	d1 f6       	brne	.-76     	; 0x27ba <DoorMovement+0x84e>
    2806:	27 c0       	rjmp	.+78     	; 0x2856 <DoorMovement+0x8ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2808:	8e 01       	movw	r16, r28
    280a:	07 5a       	subi	r16, 0xA7	; 167
    280c:	1f 4f       	sbci	r17, 0xFF	; 255
    280e:	fe 01       	movw	r30, r28
    2810:	e5 5a       	subi	r30, 0xA5	; 165
    2812:	ff 4f       	sbci	r31, 0xFF	; 255
    2814:	60 81       	ld	r22, Z
    2816:	71 81       	ldd	r23, Z+1	; 0x01
    2818:	82 81       	ldd	r24, Z+2	; 0x02
    281a:	93 81       	ldd	r25, Z+3	; 0x03
    281c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2820:	dc 01       	movw	r26, r24
    2822:	cb 01       	movw	r24, r22
    2824:	f8 01       	movw	r30, r16
    2826:	91 83       	std	Z+1, r25	; 0x01
    2828:	80 83       	st	Z, r24
    282a:	de 01       	movw	r26, r28
    282c:	ab 5a       	subi	r26, 0xAB	; 171
    282e:	bf 4f       	sbci	r27, 0xFF	; 255
    2830:	fe 01       	movw	r30, r28
    2832:	e7 5a       	subi	r30, 0xA7	; 167
    2834:	ff 4f       	sbci	r31, 0xFF	; 255
    2836:	80 81       	ld	r24, Z
    2838:	91 81       	ldd	r25, Z+1	; 0x01
    283a:	8d 93       	st	X+, r24
    283c:	9c 93       	st	X, r25
    283e:	fe 01       	movw	r30, r28
    2840:	eb 5a       	subi	r30, 0xAB	; 171
    2842:	ff 4f       	sbci	r31, 0xFF	; 255
    2844:	80 81       	ld	r24, Z
    2846:	91 81       	ldd	r25, Z+1	; 0x01
    2848:	01 97       	sbiw	r24, 0x01	; 1
    284a:	f1 f7       	brne	.-4      	; 0x2848 <DoorMovement+0x8dc>
    284c:	fe 01       	movw	r30, r28
    284e:	eb 5a       	subi	r30, 0xAB	; 171
    2850:	ff 4f       	sbci	r31, 0xFF	; 255
    2852:	91 83       	std	Z+1, r25	; 0x01
    2854:	80 83       	st	Z, r24
	/*timer tick = (1/(1000000/1024))*250 = 0.256 */
	set_UP_HMI_Timer();    /*Timer is on to calculate how much the door will be opened*/
	LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,"DoorIsOpening");

	while(g_tick<59){      /*The door will be closing for 15 seconds (15/0.256=59)*/
    2856:	80 91 77 01 	lds	r24, 0x0177
    285a:	90 91 78 01 	lds	r25, 0x0178
    285e:	a0 91 79 01 	lds	r26, 0x0179
    2862:	b0 91 7a 01 	lds	r27, 0x017A
    2866:	8b 33       	cpi	r24, 0x3B	; 59
    2868:	91 05       	cpc	r25, r1
    286a:	a1 05       	cpc	r26, r1
    286c:	b1 05       	cpc	r27, r1
    286e:	08 f4       	brcc	.+2      	; 0x2872 <DoorMovement+0x906>
    2870:	96 cb       	rjmp	.-2260   	; 0x1f9e <DoorMovement+0x32>
		LCD_displayStringRowColumn(0,14," ");
		_delay_ms(WASTE);
		LCD_displayStringRowColumn(0,13," ");
		_delay_ms(WASTE);
	}
	g_tick=0;              /*reset to start a new duration*/
    2872:	10 92 77 01 	sts	0x0177, r1
    2876:	10 92 78 01 	sts	0x0178, r1
    287a:	10 92 79 01 	sts	0x0179, r1
    287e:	10 92 7a 01 	sts	0x017A, r1
	LCD_clearScreen();
    2882:	0e 94 57 0a 	call	0x14ae	; 0x14ae <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"HELLO Master, :)");
    2886:	22 eb       	ldi	r18, 0xB2	; 178
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	80 e0       	ldi	r24, 0x00	; 0
    288c:	60 e0       	ldi	r22, 0x00	; 0
    288e:	a9 01       	movw	r20, r18
    2890:	0e 94 1b 0a 	call	0x1436	; 0x1436 <LCD_displayStringRowColumn>
	while(g_tick<12); 	   /*The door will be holding for 3 seconds (3/0.256=12)*/
    2894:	80 91 77 01 	lds	r24, 0x0177
    2898:	90 91 78 01 	lds	r25, 0x0178
    289c:	a0 91 79 01 	lds	r26, 0x0179
    28a0:	b0 91 7a 01 	lds	r27, 0x017A
    28a4:	8c 30       	cpi	r24, 0x0C	; 12
    28a6:	91 05       	cpc	r25, r1
    28a8:	a1 05       	cpc	r26, r1
    28aa:	b1 05       	cpc	r27, r1
    28ac:	98 f3       	brcs	.-26     	; 0x2894 <DoorMovement+0x928>
	g_tick=0;              /*reset to start a new duration*/
    28ae:	10 92 77 01 	sts	0x0177, r1
    28b2:	10 92 78 01 	sts	0x0178, r1
    28b6:	10 92 79 01 	sts	0x0179, r1
    28ba:	10 92 7a 01 	sts	0x017A, r1
	LCD_clearScreen();
    28be:	0e 94 57 0a 	call	0x14ae	; 0x14ae <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"DoorIsClosing");
    28c2:	23 ec       	ldi	r18, 0xC3	; 195
    28c4:	30 e0       	ldi	r19, 0x00	; 0
    28c6:	80 e0       	ldi	r24, 0x00	; 0
    28c8:	60 e0       	ldi	r22, 0x00	; 0
    28ca:	a9 01       	movw	r20, r18
    28cc:	0e 94 1b 0a 	call	0x1436	; 0x1436 <LCD_displayStringRowColumn>
    28d0:	2a c3       	rjmp	.+1620   	; 0x2f26 <DoorMovement+0xfba>
	while(g_tick<59){      /*The door will be closing for 15 seconds (15/0.256=59)*/
		LCD_displayStringRowColumn(0,13,".");
    28d2:	2e ea       	ldi	r18, 0xAE	; 174
    28d4:	30 e0       	ldi	r19, 0x00	; 0
    28d6:	80 e0       	ldi	r24, 0x00	; 0
    28d8:	6d e0       	ldi	r22, 0x0D	; 13
    28da:	a9 01       	movw	r20, r18
    28dc:	0e 94 1b 0a 	call	0x1436	; 0x1436 <LCD_displayStringRowColumn>
    28e0:	fe 01       	movw	r30, r28
    28e2:	ef 5a       	subi	r30, 0xAF	; 175
    28e4:	ff 4f       	sbci	r31, 0xFF	; 255
    28e6:	80 e0       	ldi	r24, 0x00	; 0
    28e8:	90 e0       	ldi	r25, 0x00	; 0
    28ea:	a8 e4       	ldi	r26, 0x48	; 72
    28ec:	b3 e4       	ldi	r27, 0x43	; 67
    28ee:	80 83       	st	Z, r24
    28f0:	91 83       	std	Z+1, r25	; 0x01
    28f2:	a2 83       	std	Z+2, r26	; 0x02
    28f4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28f6:	8e 01       	movw	r16, r28
    28f8:	03 5b       	subi	r16, 0xB3	; 179
    28fa:	1f 4f       	sbci	r17, 0xFF	; 255
    28fc:	fe 01       	movw	r30, r28
    28fe:	ef 5a       	subi	r30, 0xAF	; 175
    2900:	ff 4f       	sbci	r31, 0xFF	; 255
    2902:	60 81       	ld	r22, Z
    2904:	71 81       	ldd	r23, Z+1	; 0x01
    2906:	82 81       	ldd	r24, Z+2	; 0x02
    2908:	93 81       	ldd	r25, Z+3	; 0x03
    290a:	20 e0       	ldi	r18, 0x00	; 0
    290c:	30 e0       	ldi	r19, 0x00	; 0
    290e:	4a e7       	ldi	r20, 0x7A	; 122
    2910:	53 e4       	ldi	r21, 0x43	; 67
    2912:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2916:	dc 01       	movw	r26, r24
    2918:	cb 01       	movw	r24, r22
    291a:	f8 01       	movw	r30, r16
    291c:	80 83       	st	Z, r24
    291e:	91 83       	std	Z+1, r25	; 0x01
    2920:	a2 83       	std	Z+2, r26	; 0x02
    2922:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2924:	fe 01       	movw	r30, r28
    2926:	e3 5b       	subi	r30, 0xB3	; 179
    2928:	ff 4f       	sbci	r31, 0xFF	; 255
    292a:	60 81       	ld	r22, Z
    292c:	71 81       	ldd	r23, Z+1	; 0x01
    292e:	82 81       	ldd	r24, Z+2	; 0x02
    2930:	93 81       	ldd	r25, Z+3	; 0x03
    2932:	20 e0       	ldi	r18, 0x00	; 0
    2934:	30 e0       	ldi	r19, 0x00	; 0
    2936:	40 e8       	ldi	r20, 0x80	; 128
    2938:	5f e3       	ldi	r21, 0x3F	; 63
    293a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    293e:	88 23       	and	r24, r24
    2940:	44 f4       	brge	.+16     	; 0x2952 <DoorMovement+0x9e6>
		__ticks = 1;
    2942:	fe 01       	movw	r30, r28
    2944:	e5 5b       	subi	r30, 0xB5	; 181
    2946:	ff 4f       	sbci	r31, 0xFF	; 255
    2948:	81 e0       	ldi	r24, 0x01	; 1
    294a:	90 e0       	ldi	r25, 0x00	; 0
    294c:	91 83       	std	Z+1, r25	; 0x01
    294e:	80 83       	st	Z, r24
    2950:	64 c0       	rjmp	.+200    	; 0x2a1a <DoorMovement+0xaae>
	else if (__tmp > 65535)
    2952:	fe 01       	movw	r30, r28
    2954:	e3 5b       	subi	r30, 0xB3	; 179
    2956:	ff 4f       	sbci	r31, 0xFF	; 255
    2958:	60 81       	ld	r22, Z
    295a:	71 81       	ldd	r23, Z+1	; 0x01
    295c:	82 81       	ldd	r24, Z+2	; 0x02
    295e:	93 81       	ldd	r25, Z+3	; 0x03
    2960:	20 e0       	ldi	r18, 0x00	; 0
    2962:	3f ef       	ldi	r19, 0xFF	; 255
    2964:	4f e7       	ldi	r20, 0x7F	; 127
    2966:	57 e4       	ldi	r21, 0x47	; 71
    2968:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    296c:	18 16       	cp	r1, r24
    296e:	0c f0       	brlt	.+2      	; 0x2972 <DoorMovement+0xa06>
    2970:	43 c0       	rjmp	.+134    	; 0x29f8 <DoorMovement+0xa8c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2972:	fe 01       	movw	r30, r28
    2974:	ef 5a       	subi	r30, 0xAF	; 175
    2976:	ff 4f       	sbci	r31, 0xFF	; 255
    2978:	60 81       	ld	r22, Z
    297a:	71 81       	ldd	r23, Z+1	; 0x01
    297c:	82 81       	ldd	r24, Z+2	; 0x02
    297e:	93 81       	ldd	r25, Z+3	; 0x03
    2980:	20 e0       	ldi	r18, 0x00	; 0
    2982:	30 e0       	ldi	r19, 0x00	; 0
    2984:	40 e2       	ldi	r20, 0x20	; 32
    2986:	51 e4       	ldi	r21, 0x41	; 65
    2988:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    298c:	dc 01       	movw	r26, r24
    298e:	cb 01       	movw	r24, r22
    2990:	8e 01       	movw	r16, r28
    2992:	05 5b       	subi	r16, 0xB5	; 181
    2994:	1f 4f       	sbci	r17, 0xFF	; 255
    2996:	bc 01       	movw	r22, r24
    2998:	cd 01       	movw	r24, r26
    299a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    299e:	dc 01       	movw	r26, r24
    29a0:	cb 01       	movw	r24, r22
    29a2:	f8 01       	movw	r30, r16
    29a4:	91 83       	std	Z+1, r25	; 0x01
    29a6:	80 83       	st	Z, r24
    29a8:	1f c0       	rjmp	.+62     	; 0x29e8 <DoorMovement+0xa7c>
    29aa:	fe 01       	movw	r30, r28
    29ac:	e7 5b       	subi	r30, 0xB7	; 183
    29ae:	ff 4f       	sbci	r31, 0xFF	; 255
    29b0:	89 e1       	ldi	r24, 0x19	; 25
    29b2:	90 e0       	ldi	r25, 0x00	; 0
    29b4:	91 83       	std	Z+1, r25	; 0x01
    29b6:	80 83       	st	Z, r24
    29b8:	fe 01       	movw	r30, r28
    29ba:	e7 5b       	subi	r30, 0xB7	; 183
    29bc:	ff 4f       	sbci	r31, 0xFF	; 255
    29be:	80 81       	ld	r24, Z
    29c0:	91 81       	ldd	r25, Z+1	; 0x01
    29c2:	01 97       	sbiw	r24, 0x01	; 1
    29c4:	f1 f7       	brne	.-4      	; 0x29c2 <DoorMovement+0xa56>
    29c6:	fe 01       	movw	r30, r28
    29c8:	e7 5b       	subi	r30, 0xB7	; 183
    29ca:	ff 4f       	sbci	r31, 0xFF	; 255
    29cc:	91 83       	std	Z+1, r25	; 0x01
    29ce:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29d0:	de 01       	movw	r26, r28
    29d2:	a5 5b       	subi	r26, 0xB5	; 181
    29d4:	bf 4f       	sbci	r27, 0xFF	; 255
    29d6:	fe 01       	movw	r30, r28
    29d8:	e5 5b       	subi	r30, 0xB5	; 181
    29da:	ff 4f       	sbci	r31, 0xFF	; 255
    29dc:	80 81       	ld	r24, Z
    29de:	91 81       	ldd	r25, Z+1	; 0x01
    29e0:	01 97       	sbiw	r24, 0x01	; 1
    29e2:	11 96       	adiw	r26, 0x01	; 1
    29e4:	9c 93       	st	X, r25
    29e6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29e8:	fe 01       	movw	r30, r28
    29ea:	e5 5b       	subi	r30, 0xB5	; 181
    29ec:	ff 4f       	sbci	r31, 0xFF	; 255
    29ee:	80 81       	ld	r24, Z
    29f0:	91 81       	ldd	r25, Z+1	; 0x01
    29f2:	00 97       	sbiw	r24, 0x00	; 0
    29f4:	d1 f6       	brne	.-76     	; 0x29aa <DoorMovement+0xa3e>
    29f6:	27 c0       	rjmp	.+78     	; 0x2a46 <DoorMovement+0xada>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29f8:	8e 01       	movw	r16, r28
    29fa:	05 5b       	subi	r16, 0xB5	; 181
    29fc:	1f 4f       	sbci	r17, 0xFF	; 255
    29fe:	fe 01       	movw	r30, r28
    2a00:	e3 5b       	subi	r30, 0xB3	; 179
    2a02:	ff 4f       	sbci	r31, 0xFF	; 255
    2a04:	60 81       	ld	r22, Z
    2a06:	71 81       	ldd	r23, Z+1	; 0x01
    2a08:	82 81       	ldd	r24, Z+2	; 0x02
    2a0a:	93 81       	ldd	r25, Z+3	; 0x03
    2a0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a10:	dc 01       	movw	r26, r24
    2a12:	cb 01       	movw	r24, r22
    2a14:	f8 01       	movw	r30, r16
    2a16:	91 83       	std	Z+1, r25	; 0x01
    2a18:	80 83       	st	Z, r24
    2a1a:	de 01       	movw	r26, r28
    2a1c:	a9 5b       	subi	r26, 0xB9	; 185
    2a1e:	bf 4f       	sbci	r27, 0xFF	; 255
    2a20:	fe 01       	movw	r30, r28
    2a22:	e5 5b       	subi	r30, 0xB5	; 181
    2a24:	ff 4f       	sbci	r31, 0xFF	; 255
    2a26:	80 81       	ld	r24, Z
    2a28:	91 81       	ldd	r25, Z+1	; 0x01
    2a2a:	8d 93       	st	X+, r24
    2a2c:	9c 93       	st	X, r25
    2a2e:	fe 01       	movw	r30, r28
    2a30:	e9 5b       	subi	r30, 0xB9	; 185
    2a32:	ff 4f       	sbci	r31, 0xFF	; 255
    2a34:	80 81       	ld	r24, Z
    2a36:	91 81       	ldd	r25, Z+1	; 0x01
    2a38:	01 97       	sbiw	r24, 0x01	; 1
    2a3a:	f1 f7       	brne	.-4      	; 0x2a38 <DoorMovement+0xacc>
    2a3c:	fe 01       	movw	r30, r28
    2a3e:	e9 5b       	subi	r30, 0xB9	; 185
    2a40:	ff 4f       	sbci	r31, 0xFF	; 255
    2a42:	91 83       	std	Z+1, r25	; 0x01
    2a44:	80 83       	st	Z, r24
		_delay_ms(WASTE);
		LCD_displayStringRowColumn(0,14,".");
    2a46:	2e ea       	ldi	r18, 0xAE	; 174
    2a48:	30 e0       	ldi	r19, 0x00	; 0
    2a4a:	80 e0       	ldi	r24, 0x00	; 0
    2a4c:	6e e0       	ldi	r22, 0x0E	; 14
    2a4e:	a9 01       	movw	r20, r18
    2a50:	0e 94 1b 0a 	call	0x1436	; 0x1436 <LCD_displayStringRowColumn>
    2a54:	fe 01       	movw	r30, r28
    2a56:	ed 5b       	subi	r30, 0xBD	; 189
    2a58:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5a:	80 e0       	ldi	r24, 0x00	; 0
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
    2a5e:	a8 e4       	ldi	r26, 0x48	; 72
    2a60:	b3 e4       	ldi	r27, 0x43	; 67
    2a62:	80 83       	st	Z, r24
    2a64:	91 83       	std	Z+1, r25	; 0x01
    2a66:	a2 83       	std	Z+2, r26	; 0x02
    2a68:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a6a:	8e 01       	movw	r16, r28
    2a6c:	01 5c       	subi	r16, 0xC1	; 193
    2a6e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a70:	fe 01       	movw	r30, r28
    2a72:	ed 5b       	subi	r30, 0xBD	; 189
    2a74:	ff 4f       	sbci	r31, 0xFF	; 255
    2a76:	60 81       	ld	r22, Z
    2a78:	71 81       	ldd	r23, Z+1	; 0x01
    2a7a:	82 81       	ldd	r24, Z+2	; 0x02
    2a7c:	93 81       	ldd	r25, Z+3	; 0x03
    2a7e:	20 e0       	ldi	r18, 0x00	; 0
    2a80:	30 e0       	ldi	r19, 0x00	; 0
    2a82:	4a e7       	ldi	r20, 0x7A	; 122
    2a84:	53 e4       	ldi	r21, 0x43	; 67
    2a86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a8a:	dc 01       	movw	r26, r24
    2a8c:	cb 01       	movw	r24, r22
    2a8e:	f8 01       	movw	r30, r16
    2a90:	80 83       	st	Z, r24
    2a92:	91 83       	std	Z+1, r25	; 0x01
    2a94:	a2 83       	std	Z+2, r26	; 0x02
    2a96:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a98:	fe 01       	movw	r30, r28
    2a9a:	ff 96       	adiw	r30, 0x3f	; 63
    2a9c:	60 81       	ld	r22, Z
    2a9e:	71 81       	ldd	r23, Z+1	; 0x01
    2aa0:	82 81       	ldd	r24, Z+2	; 0x02
    2aa2:	93 81       	ldd	r25, Z+3	; 0x03
    2aa4:	20 e0       	ldi	r18, 0x00	; 0
    2aa6:	30 e0       	ldi	r19, 0x00	; 0
    2aa8:	40 e8       	ldi	r20, 0x80	; 128
    2aaa:	5f e3       	ldi	r21, 0x3F	; 63
    2aac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ab0:	88 23       	and	r24, r24
    2ab2:	2c f4       	brge	.+10     	; 0x2abe <DoorMovement+0xb52>
		__ticks = 1;
    2ab4:	81 e0       	ldi	r24, 0x01	; 1
    2ab6:	90 e0       	ldi	r25, 0x00	; 0
    2ab8:	9e af       	std	Y+62, r25	; 0x3e
    2aba:	8d af       	std	Y+61, r24	; 0x3d
    2abc:	46 c0       	rjmp	.+140    	; 0x2b4a <DoorMovement+0xbde>
	else if (__tmp > 65535)
    2abe:	fe 01       	movw	r30, r28
    2ac0:	ff 96       	adiw	r30, 0x3f	; 63
    2ac2:	60 81       	ld	r22, Z
    2ac4:	71 81       	ldd	r23, Z+1	; 0x01
    2ac6:	82 81       	ldd	r24, Z+2	; 0x02
    2ac8:	93 81       	ldd	r25, Z+3	; 0x03
    2aca:	20 e0       	ldi	r18, 0x00	; 0
    2acc:	3f ef       	ldi	r19, 0xFF	; 255
    2ace:	4f e7       	ldi	r20, 0x7F	; 127
    2ad0:	57 e4       	ldi	r21, 0x47	; 71
    2ad2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ad6:	18 16       	cp	r1, r24
    2ad8:	64 f5       	brge	.+88     	; 0x2b32 <DoorMovement+0xbc6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ada:	fe 01       	movw	r30, r28
    2adc:	ed 5b       	subi	r30, 0xBD	; 189
    2ade:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae0:	60 81       	ld	r22, Z
    2ae2:	71 81       	ldd	r23, Z+1	; 0x01
    2ae4:	82 81       	ldd	r24, Z+2	; 0x02
    2ae6:	93 81       	ldd	r25, Z+3	; 0x03
    2ae8:	20 e0       	ldi	r18, 0x00	; 0
    2aea:	30 e0       	ldi	r19, 0x00	; 0
    2aec:	40 e2       	ldi	r20, 0x20	; 32
    2aee:	51 e4       	ldi	r21, 0x41	; 65
    2af0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af4:	dc 01       	movw	r26, r24
    2af6:	cb 01       	movw	r24, r22
    2af8:	bc 01       	movw	r22, r24
    2afa:	cd 01       	movw	r24, r26
    2afc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b00:	dc 01       	movw	r26, r24
    2b02:	cb 01       	movw	r24, r22
    2b04:	9e af       	std	Y+62, r25	; 0x3e
    2b06:	8d af       	std	Y+61, r24	; 0x3d
    2b08:	0f c0       	rjmp	.+30     	; 0x2b28 <DoorMovement+0xbbc>
    2b0a:	89 e1       	ldi	r24, 0x19	; 25
    2b0c:	90 e0       	ldi	r25, 0x00	; 0
    2b0e:	9c af       	std	Y+60, r25	; 0x3c
    2b10:	8b af       	std	Y+59, r24	; 0x3b
    2b12:	8b ad       	ldd	r24, Y+59	; 0x3b
    2b14:	9c ad       	ldd	r25, Y+60	; 0x3c
    2b16:	01 97       	sbiw	r24, 0x01	; 1
    2b18:	f1 f7       	brne	.-4      	; 0x2b16 <DoorMovement+0xbaa>
    2b1a:	9c af       	std	Y+60, r25	; 0x3c
    2b1c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b1e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b20:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b22:	01 97       	sbiw	r24, 0x01	; 1
    2b24:	9e af       	std	Y+62, r25	; 0x3e
    2b26:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b28:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b2a:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b2c:	00 97       	sbiw	r24, 0x00	; 0
    2b2e:	69 f7       	brne	.-38     	; 0x2b0a <DoorMovement+0xb9e>
    2b30:	16 c0       	rjmp	.+44     	; 0x2b5e <DoorMovement+0xbf2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b32:	fe 01       	movw	r30, r28
    2b34:	ff 96       	adiw	r30, 0x3f	; 63
    2b36:	60 81       	ld	r22, Z
    2b38:	71 81       	ldd	r23, Z+1	; 0x01
    2b3a:	82 81       	ldd	r24, Z+2	; 0x02
    2b3c:	93 81       	ldd	r25, Z+3	; 0x03
    2b3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b42:	dc 01       	movw	r26, r24
    2b44:	cb 01       	movw	r24, r22
    2b46:	9e af       	std	Y+62, r25	; 0x3e
    2b48:	8d af       	std	Y+61, r24	; 0x3d
    2b4a:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b4c:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b4e:	9a af       	std	Y+58, r25	; 0x3a
    2b50:	89 af       	std	Y+57, r24	; 0x39
    2b52:	89 ad       	ldd	r24, Y+57	; 0x39
    2b54:	9a ad       	ldd	r25, Y+58	; 0x3a
    2b56:	01 97       	sbiw	r24, 0x01	; 1
    2b58:	f1 f7       	brne	.-4      	; 0x2b56 <DoorMovement+0xbea>
    2b5a:	9a af       	std	Y+58, r25	; 0x3a
    2b5c:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(WASTE);
		LCD_displayStringRowColumn(0,15,".");
    2b5e:	2e ea       	ldi	r18, 0xAE	; 174
    2b60:	30 e0       	ldi	r19, 0x00	; 0
    2b62:	80 e0       	ldi	r24, 0x00	; 0
    2b64:	6f e0       	ldi	r22, 0x0F	; 15
    2b66:	a9 01       	movw	r20, r18
    2b68:	0e 94 1b 0a 	call	0x1436	; 0x1436 <LCD_displayStringRowColumn>
    2b6c:	80 e0       	ldi	r24, 0x00	; 0
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	a8 e4       	ldi	r26, 0x48	; 72
    2b72:	b3 e4       	ldi	r27, 0x43	; 67
    2b74:	8d ab       	std	Y+53, r24	; 0x35
    2b76:	9e ab       	std	Y+54, r25	; 0x36
    2b78:	af ab       	std	Y+55, r26	; 0x37
    2b7a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b7c:	6d a9       	ldd	r22, Y+53	; 0x35
    2b7e:	7e a9       	ldd	r23, Y+54	; 0x36
    2b80:	8f a9       	ldd	r24, Y+55	; 0x37
    2b82:	98 ad       	ldd	r25, Y+56	; 0x38
    2b84:	20 e0       	ldi	r18, 0x00	; 0
    2b86:	30 e0       	ldi	r19, 0x00	; 0
    2b88:	4a e7       	ldi	r20, 0x7A	; 122
    2b8a:	53 e4       	ldi	r21, 0x43	; 67
    2b8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b90:	dc 01       	movw	r26, r24
    2b92:	cb 01       	movw	r24, r22
    2b94:	89 ab       	std	Y+49, r24	; 0x31
    2b96:	9a ab       	std	Y+50, r25	; 0x32
    2b98:	ab ab       	std	Y+51, r26	; 0x33
    2b9a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2b9c:	69 a9       	ldd	r22, Y+49	; 0x31
    2b9e:	7a a9       	ldd	r23, Y+50	; 0x32
    2ba0:	8b a9       	ldd	r24, Y+51	; 0x33
    2ba2:	9c a9       	ldd	r25, Y+52	; 0x34
    2ba4:	20 e0       	ldi	r18, 0x00	; 0
    2ba6:	30 e0       	ldi	r19, 0x00	; 0
    2ba8:	40 e8       	ldi	r20, 0x80	; 128
    2baa:	5f e3       	ldi	r21, 0x3F	; 63
    2bac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bb0:	88 23       	and	r24, r24
    2bb2:	2c f4       	brge	.+10     	; 0x2bbe <DoorMovement+0xc52>
		__ticks = 1;
    2bb4:	81 e0       	ldi	r24, 0x01	; 1
    2bb6:	90 e0       	ldi	r25, 0x00	; 0
    2bb8:	98 ab       	std	Y+48, r25	; 0x30
    2bba:	8f a7       	std	Y+47, r24	; 0x2f
    2bbc:	3f c0       	rjmp	.+126    	; 0x2c3c <DoorMovement+0xcd0>
	else if (__tmp > 65535)
    2bbe:	69 a9       	ldd	r22, Y+49	; 0x31
    2bc0:	7a a9       	ldd	r23, Y+50	; 0x32
    2bc2:	8b a9       	ldd	r24, Y+51	; 0x33
    2bc4:	9c a9       	ldd	r25, Y+52	; 0x34
    2bc6:	20 e0       	ldi	r18, 0x00	; 0
    2bc8:	3f ef       	ldi	r19, 0xFF	; 255
    2bca:	4f e7       	ldi	r20, 0x7F	; 127
    2bcc:	57 e4       	ldi	r21, 0x47	; 71
    2bce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bd2:	18 16       	cp	r1, r24
    2bd4:	4c f5       	brge	.+82     	; 0x2c28 <DoorMovement+0xcbc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bd6:	6d a9       	ldd	r22, Y+53	; 0x35
    2bd8:	7e a9       	ldd	r23, Y+54	; 0x36
    2bda:	8f a9       	ldd	r24, Y+55	; 0x37
    2bdc:	98 ad       	ldd	r25, Y+56	; 0x38
    2bde:	20 e0       	ldi	r18, 0x00	; 0
    2be0:	30 e0       	ldi	r19, 0x00	; 0
    2be2:	40 e2       	ldi	r20, 0x20	; 32
    2be4:	51 e4       	ldi	r21, 0x41	; 65
    2be6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bea:	dc 01       	movw	r26, r24
    2bec:	cb 01       	movw	r24, r22
    2bee:	bc 01       	movw	r22, r24
    2bf0:	cd 01       	movw	r24, r26
    2bf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bf6:	dc 01       	movw	r26, r24
    2bf8:	cb 01       	movw	r24, r22
    2bfa:	98 ab       	std	Y+48, r25	; 0x30
    2bfc:	8f a7       	std	Y+47, r24	; 0x2f
    2bfe:	0f c0       	rjmp	.+30     	; 0x2c1e <DoorMovement+0xcb2>
    2c00:	89 e1       	ldi	r24, 0x19	; 25
    2c02:	90 e0       	ldi	r25, 0x00	; 0
    2c04:	9e a7       	std	Y+46, r25	; 0x2e
    2c06:	8d a7       	std	Y+45, r24	; 0x2d
    2c08:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c0a:	9e a5       	ldd	r25, Y+46	; 0x2e
    2c0c:	01 97       	sbiw	r24, 0x01	; 1
    2c0e:	f1 f7       	brne	.-4      	; 0x2c0c <DoorMovement+0xca0>
    2c10:	9e a7       	std	Y+46, r25	; 0x2e
    2c12:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c14:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c16:	98 a9       	ldd	r25, Y+48	; 0x30
    2c18:	01 97       	sbiw	r24, 0x01	; 1
    2c1a:	98 ab       	std	Y+48, r25	; 0x30
    2c1c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c1e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c20:	98 a9       	ldd	r25, Y+48	; 0x30
    2c22:	00 97       	sbiw	r24, 0x00	; 0
    2c24:	69 f7       	brne	.-38     	; 0x2c00 <DoorMovement+0xc94>
    2c26:	14 c0       	rjmp	.+40     	; 0x2c50 <DoorMovement+0xce4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c28:	69 a9       	ldd	r22, Y+49	; 0x31
    2c2a:	7a a9       	ldd	r23, Y+50	; 0x32
    2c2c:	8b a9       	ldd	r24, Y+51	; 0x33
    2c2e:	9c a9       	ldd	r25, Y+52	; 0x34
    2c30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c34:	dc 01       	movw	r26, r24
    2c36:	cb 01       	movw	r24, r22
    2c38:	98 ab       	std	Y+48, r25	; 0x30
    2c3a:	8f a7       	std	Y+47, r24	; 0x2f
    2c3c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c3e:	98 a9       	ldd	r25, Y+48	; 0x30
    2c40:	9c a7       	std	Y+44, r25	; 0x2c
    2c42:	8b a7       	std	Y+43, r24	; 0x2b
    2c44:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c46:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c48:	01 97       	sbiw	r24, 0x01	; 1
    2c4a:	f1 f7       	brne	.-4      	; 0x2c48 <DoorMovement+0xcdc>
    2c4c:	9c a7       	std	Y+44, r25	; 0x2c
    2c4e:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(WASTE);
		LCD_displayStringRowColumn(0,15," ");
    2c50:	20 eb       	ldi	r18, 0xB0	; 176
    2c52:	30 e0       	ldi	r19, 0x00	; 0
    2c54:	80 e0       	ldi	r24, 0x00	; 0
    2c56:	6f e0       	ldi	r22, 0x0F	; 15
    2c58:	a9 01       	movw	r20, r18
    2c5a:	0e 94 1b 0a 	call	0x1436	; 0x1436 <LCD_displayStringRowColumn>
    2c5e:	80 e0       	ldi	r24, 0x00	; 0
    2c60:	90 e0       	ldi	r25, 0x00	; 0
    2c62:	a8 e4       	ldi	r26, 0x48	; 72
    2c64:	b3 e4       	ldi	r27, 0x43	; 67
    2c66:	8f a3       	std	Y+39, r24	; 0x27
    2c68:	98 a7       	std	Y+40, r25	; 0x28
    2c6a:	a9 a7       	std	Y+41, r26	; 0x29
    2c6c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c6e:	6f a1       	ldd	r22, Y+39	; 0x27
    2c70:	78 a5       	ldd	r23, Y+40	; 0x28
    2c72:	89 a5       	ldd	r24, Y+41	; 0x29
    2c74:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c76:	20 e0       	ldi	r18, 0x00	; 0
    2c78:	30 e0       	ldi	r19, 0x00	; 0
    2c7a:	4a e7       	ldi	r20, 0x7A	; 122
    2c7c:	53 e4       	ldi	r21, 0x43	; 67
    2c7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c82:	dc 01       	movw	r26, r24
    2c84:	cb 01       	movw	r24, r22
    2c86:	8b a3       	std	Y+35, r24	; 0x23
    2c88:	9c a3       	std	Y+36, r25	; 0x24
    2c8a:	ad a3       	std	Y+37, r26	; 0x25
    2c8c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2c8e:	6b a1       	ldd	r22, Y+35	; 0x23
    2c90:	7c a1       	ldd	r23, Y+36	; 0x24
    2c92:	8d a1       	ldd	r24, Y+37	; 0x25
    2c94:	9e a1       	ldd	r25, Y+38	; 0x26
    2c96:	20 e0       	ldi	r18, 0x00	; 0
    2c98:	30 e0       	ldi	r19, 0x00	; 0
    2c9a:	40 e8       	ldi	r20, 0x80	; 128
    2c9c:	5f e3       	ldi	r21, 0x3F	; 63
    2c9e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ca2:	88 23       	and	r24, r24
    2ca4:	2c f4       	brge	.+10     	; 0x2cb0 <DoorMovement+0xd44>
		__ticks = 1;
    2ca6:	81 e0       	ldi	r24, 0x01	; 1
    2ca8:	90 e0       	ldi	r25, 0x00	; 0
    2caa:	9a a3       	std	Y+34, r25	; 0x22
    2cac:	89 a3       	std	Y+33, r24	; 0x21
    2cae:	3f c0       	rjmp	.+126    	; 0x2d2e <DoorMovement+0xdc2>
	else if (__tmp > 65535)
    2cb0:	6b a1       	ldd	r22, Y+35	; 0x23
    2cb2:	7c a1       	ldd	r23, Y+36	; 0x24
    2cb4:	8d a1       	ldd	r24, Y+37	; 0x25
    2cb6:	9e a1       	ldd	r25, Y+38	; 0x26
    2cb8:	20 e0       	ldi	r18, 0x00	; 0
    2cba:	3f ef       	ldi	r19, 0xFF	; 255
    2cbc:	4f e7       	ldi	r20, 0x7F	; 127
    2cbe:	57 e4       	ldi	r21, 0x47	; 71
    2cc0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cc4:	18 16       	cp	r1, r24
    2cc6:	4c f5       	brge	.+82     	; 0x2d1a <DoorMovement+0xdae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cc8:	6f a1       	ldd	r22, Y+39	; 0x27
    2cca:	78 a5       	ldd	r23, Y+40	; 0x28
    2ccc:	89 a5       	ldd	r24, Y+41	; 0x29
    2cce:	9a a5       	ldd	r25, Y+42	; 0x2a
    2cd0:	20 e0       	ldi	r18, 0x00	; 0
    2cd2:	30 e0       	ldi	r19, 0x00	; 0
    2cd4:	40 e2       	ldi	r20, 0x20	; 32
    2cd6:	51 e4       	ldi	r21, 0x41	; 65
    2cd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cdc:	dc 01       	movw	r26, r24
    2cde:	cb 01       	movw	r24, r22
    2ce0:	bc 01       	movw	r22, r24
    2ce2:	cd 01       	movw	r24, r26
    2ce4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ce8:	dc 01       	movw	r26, r24
    2cea:	cb 01       	movw	r24, r22
    2cec:	9a a3       	std	Y+34, r25	; 0x22
    2cee:	89 a3       	std	Y+33, r24	; 0x21
    2cf0:	0f c0       	rjmp	.+30     	; 0x2d10 <DoorMovement+0xda4>
    2cf2:	89 e1       	ldi	r24, 0x19	; 25
    2cf4:	90 e0       	ldi	r25, 0x00	; 0
    2cf6:	98 a3       	std	Y+32, r25	; 0x20
    2cf8:	8f 8f       	std	Y+31, r24	; 0x1f
    2cfa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2cfc:	98 a1       	ldd	r25, Y+32	; 0x20
    2cfe:	01 97       	sbiw	r24, 0x01	; 1
    2d00:	f1 f7       	brne	.-4      	; 0x2cfe <DoorMovement+0xd92>
    2d02:	98 a3       	std	Y+32, r25	; 0x20
    2d04:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d06:	89 a1       	ldd	r24, Y+33	; 0x21
    2d08:	9a a1       	ldd	r25, Y+34	; 0x22
    2d0a:	01 97       	sbiw	r24, 0x01	; 1
    2d0c:	9a a3       	std	Y+34, r25	; 0x22
    2d0e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d10:	89 a1       	ldd	r24, Y+33	; 0x21
    2d12:	9a a1       	ldd	r25, Y+34	; 0x22
    2d14:	00 97       	sbiw	r24, 0x00	; 0
    2d16:	69 f7       	brne	.-38     	; 0x2cf2 <DoorMovement+0xd86>
    2d18:	14 c0       	rjmp	.+40     	; 0x2d42 <DoorMovement+0xdd6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d1a:	6b a1       	ldd	r22, Y+35	; 0x23
    2d1c:	7c a1       	ldd	r23, Y+36	; 0x24
    2d1e:	8d a1       	ldd	r24, Y+37	; 0x25
    2d20:	9e a1       	ldd	r25, Y+38	; 0x26
    2d22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d26:	dc 01       	movw	r26, r24
    2d28:	cb 01       	movw	r24, r22
    2d2a:	9a a3       	std	Y+34, r25	; 0x22
    2d2c:	89 a3       	std	Y+33, r24	; 0x21
    2d2e:	89 a1       	ldd	r24, Y+33	; 0x21
    2d30:	9a a1       	ldd	r25, Y+34	; 0x22
    2d32:	9e 8f       	std	Y+30, r25	; 0x1e
    2d34:	8d 8f       	std	Y+29, r24	; 0x1d
    2d36:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d38:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d3a:	01 97       	sbiw	r24, 0x01	; 1
    2d3c:	f1 f7       	brne	.-4      	; 0x2d3a <DoorMovement+0xdce>
    2d3e:	9e 8f       	std	Y+30, r25	; 0x1e
    2d40:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(WASTE);
		LCD_displayStringRowColumn(0,14," ");
    2d42:	20 eb       	ldi	r18, 0xB0	; 176
    2d44:	30 e0       	ldi	r19, 0x00	; 0
    2d46:	80 e0       	ldi	r24, 0x00	; 0
    2d48:	6e e0       	ldi	r22, 0x0E	; 14
    2d4a:	a9 01       	movw	r20, r18
    2d4c:	0e 94 1b 0a 	call	0x1436	; 0x1436 <LCD_displayStringRowColumn>
    2d50:	80 e0       	ldi	r24, 0x00	; 0
    2d52:	90 e0       	ldi	r25, 0x00	; 0
    2d54:	a8 e4       	ldi	r26, 0x48	; 72
    2d56:	b3 e4       	ldi	r27, 0x43	; 67
    2d58:	89 8f       	std	Y+25, r24	; 0x19
    2d5a:	9a 8f       	std	Y+26, r25	; 0x1a
    2d5c:	ab 8f       	std	Y+27, r26	; 0x1b
    2d5e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d60:	69 8d       	ldd	r22, Y+25	; 0x19
    2d62:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d64:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d66:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d68:	20 e0       	ldi	r18, 0x00	; 0
    2d6a:	30 e0       	ldi	r19, 0x00	; 0
    2d6c:	4a e7       	ldi	r20, 0x7A	; 122
    2d6e:	53 e4       	ldi	r21, 0x43	; 67
    2d70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d74:	dc 01       	movw	r26, r24
    2d76:	cb 01       	movw	r24, r22
    2d78:	8d 8b       	std	Y+21, r24	; 0x15
    2d7a:	9e 8b       	std	Y+22, r25	; 0x16
    2d7c:	af 8b       	std	Y+23, r26	; 0x17
    2d7e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d80:	6d 89       	ldd	r22, Y+21	; 0x15
    2d82:	7e 89       	ldd	r23, Y+22	; 0x16
    2d84:	8f 89       	ldd	r24, Y+23	; 0x17
    2d86:	98 8d       	ldd	r25, Y+24	; 0x18
    2d88:	20 e0       	ldi	r18, 0x00	; 0
    2d8a:	30 e0       	ldi	r19, 0x00	; 0
    2d8c:	40 e8       	ldi	r20, 0x80	; 128
    2d8e:	5f e3       	ldi	r21, 0x3F	; 63
    2d90:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d94:	88 23       	and	r24, r24
    2d96:	2c f4       	brge	.+10     	; 0x2da2 <DoorMovement+0xe36>
		__ticks = 1;
    2d98:	81 e0       	ldi	r24, 0x01	; 1
    2d9a:	90 e0       	ldi	r25, 0x00	; 0
    2d9c:	9c 8b       	std	Y+20, r25	; 0x14
    2d9e:	8b 8b       	std	Y+19, r24	; 0x13
    2da0:	3f c0       	rjmp	.+126    	; 0x2e20 <DoorMovement+0xeb4>
	else if (__tmp > 65535)
    2da2:	6d 89       	ldd	r22, Y+21	; 0x15
    2da4:	7e 89       	ldd	r23, Y+22	; 0x16
    2da6:	8f 89       	ldd	r24, Y+23	; 0x17
    2da8:	98 8d       	ldd	r25, Y+24	; 0x18
    2daa:	20 e0       	ldi	r18, 0x00	; 0
    2dac:	3f ef       	ldi	r19, 0xFF	; 255
    2dae:	4f e7       	ldi	r20, 0x7F	; 127
    2db0:	57 e4       	ldi	r21, 0x47	; 71
    2db2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2db6:	18 16       	cp	r1, r24
    2db8:	4c f5       	brge	.+82     	; 0x2e0c <DoorMovement+0xea0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dba:	69 8d       	ldd	r22, Y+25	; 0x19
    2dbc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2dbe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2dc0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2dc2:	20 e0       	ldi	r18, 0x00	; 0
    2dc4:	30 e0       	ldi	r19, 0x00	; 0
    2dc6:	40 e2       	ldi	r20, 0x20	; 32
    2dc8:	51 e4       	ldi	r21, 0x41	; 65
    2dca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dce:	dc 01       	movw	r26, r24
    2dd0:	cb 01       	movw	r24, r22
    2dd2:	bc 01       	movw	r22, r24
    2dd4:	cd 01       	movw	r24, r26
    2dd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dda:	dc 01       	movw	r26, r24
    2ddc:	cb 01       	movw	r24, r22
    2dde:	9c 8b       	std	Y+20, r25	; 0x14
    2de0:	8b 8b       	std	Y+19, r24	; 0x13
    2de2:	0f c0       	rjmp	.+30     	; 0x2e02 <DoorMovement+0xe96>
    2de4:	89 e1       	ldi	r24, 0x19	; 25
    2de6:	90 e0       	ldi	r25, 0x00	; 0
    2de8:	9a 8b       	std	Y+18, r25	; 0x12
    2dea:	89 8b       	std	Y+17, r24	; 0x11
    2dec:	89 89       	ldd	r24, Y+17	; 0x11
    2dee:	9a 89       	ldd	r25, Y+18	; 0x12
    2df0:	01 97       	sbiw	r24, 0x01	; 1
    2df2:	f1 f7       	brne	.-4      	; 0x2df0 <DoorMovement+0xe84>
    2df4:	9a 8b       	std	Y+18, r25	; 0x12
    2df6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2df8:	8b 89       	ldd	r24, Y+19	; 0x13
    2dfa:	9c 89       	ldd	r25, Y+20	; 0x14
    2dfc:	01 97       	sbiw	r24, 0x01	; 1
    2dfe:	9c 8b       	std	Y+20, r25	; 0x14
    2e00:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e02:	8b 89       	ldd	r24, Y+19	; 0x13
    2e04:	9c 89       	ldd	r25, Y+20	; 0x14
    2e06:	00 97       	sbiw	r24, 0x00	; 0
    2e08:	69 f7       	brne	.-38     	; 0x2de4 <DoorMovement+0xe78>
    2e0a:	14 c0       	rjmp	.+40     	; 0x2e34 <DoorMovement+0xec8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e0c:	6d 89       	ldd	r22, Y+21	; 0x15
    2e0e:	7e 89       	ldd	r23, Y+22	; 0x16
    2e10:	8f 89       	ldd	r24, Y+23	; 0x17
    2e12:	98 8d       	ldd	r25, Y+24	; 0x18
    2e14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e18:	dc 01       	movw	r26, r24
    2e1a:	cb 01       	movw	r24, r22
    2e1c:	9c 8b       	std	Y+20, r25	; 0x14
    2e1e:	8b 8b       	std	Y+19, r24	; 0x13
    2e20:	8b 89       	ldd	r24, Y+19	; 0x13
    2e22:	9c 89       	ldd	r25, Y+20	; 0x14
    2e24:	98 8b       	std	Y+16, r25	; 0x10
    2e26:	8f 87       	std	Y+15, r24	; 0x0f
    2e28:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e2a:	98 89       	ldd	r25, Y+16	; 0x10
    2e2c:	01 97       	sbiw	r24, 0x01	; 1
    2e2e:	f1 f7       	brne	.-4      	; 0x2e2c <DoorMovement+0xec0>
    2e30:	98 8b       	std	Y+16, r25	; 0x10
    2e32:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(WASTE);
		LCD_displayStringRowColumn(0,13," ");
    2e34:	20 eb       	ldi	r18, 0xB0	; 176
    2e36:	30 e0       	ldi	r19, 0x00	; 0
    2e38:	80 e0       	ldi	r24, 0x00	; 0
    2e3a:	6d e0       	ldi	r22, 0x0D	; 13
    2e3c:	a9 01       	movw	r20, r18
    2e3e:	0e 94 1b 0a 	call	0x1436	; 0x1436 <LCD_displayStringRowColumn>
    2e42:	80 e0       	ldi	r24, 0x00	; 0
    2e44:	90 e0       	ldi	r25, 0x00	; 0
    2e46:	a8 e4       	ldi	r26, 0x48	; 72
    2e48:	b3 e4       	ldi	r27, 0x43	; 67
    2e4a:	8b 87       	std	Y+11, r24	; 0x0b
    2e4c:	9c 87       	std	Y+12, r25	; 0x0c
    2e4e:	ad 87       	std	Y+13, r26	; 0x0d
    2e50:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e52:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e54:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e56:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e58:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e5a:	20 e0       	ldi	r18, 0x00	; 0
    2e5c:	30 e0       	ldi	r19, 0x00	; 0
    2e5e:	4a e7       	ldi	r20, 0x7A	; 122
    2e60:	53 e4       	ldi	r21, 0x43	; 67
    2e62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e66:	dc 01       	movw	r26, r24
    2e68:	cb 01       	movw	r24, r22
    2e6a:	8f 83       	std	Y+7, r24	; 0x07
    2e6c:	98 87       	std	Y+8, r25	; 0x08
    2e6e:	a9 87       	std	Y+9, r26	; 0x09
    2e70:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e72:	6f 81       	ldd	r22, Y+7	; 0x07
    2e74:	78 85       	ldd	r23, Y+8	; 0x08
    2e76:	89 85       	ldd	r24, Y+9	; 0x09
    2e78:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e7a:	20 e0       	ldi	r18, 0x00	; 0
    2e7c:	30 e0       	ldi	r19, 0x00	; 0
    2e7e:	40 e8       	ldi	r20, 0x80	; 128
    2e80:	5f e3       	ldi	r21, 0x3F	; 63
    2e82:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e86:	88 23       	and	r24, r24
    2e88:	2c f4       	brge	.+10     	; 0x2e94 <DoorMovement+0xf28>
		__ticks = 1;
    2e8a:	81 e0       	ldi	r24, 0x01	; 1
    2e8c:	90 e0       	ldi	r25, 0x00	; 0
    2e8e:	9e 83       	std	Y+6, r25	; 0x06
    2e90:	8d 83       	std	Y+5, r24	; 0x05
    2e92:	3f c0       	rjmp	.+126    	; 0x2f12 <DoorMovement+0xfa6>
	else if (__tmp > 65535)
    2e94:	6f 81       	ldd	r22, Y+7	; 0x07
    2e96:	78 85       	ldd	r23, Y+8	; 0x08
    2e98:	89 85       	ldd	r24, Y+9	; 0x09
    2e9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e9c:	20 e0       	ldi	r18, 0x00	; 0
    2e9e:	3f ef       	ldi	r19, 0xFF	; 255
    2ea0:	4f e7       	ldi	r20, 0x7F	; 127
    2ea2:	57 e4       	ldi	r21, 0x47	; 71
    2ea4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ea8:	18 16       	cp	r1, r24
    2eaa:	4c f5       	brge	.+82     	; 0x2efe <DoorMovement+0xf92>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eac:	6b 85       	ldd	r22, Y+11	; 0x0b
    2eae:	7c 85       	ldd	r23, Y+12	; 0x0c
    2eb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eb4:	20 e0       	ldi	r18, 0x00	; 0
    2eb6:	30 e0       	ldi	r19, 0x00	; 0
    2eb8:	40 e2       	ldi	r20, 0x20	; 32
    2eba:	51 e4       	ldi	r21, 0x41	; 65
    2ebc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ec0:	dc 01       	movw	r26, r24
    2ec2:	cb 01       	movw	r24, r22
    2ec4:	bc 01       	movw	r22, r24
    2ec6:	cd 01       	movw	r24, r26
    2ec8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ecc:	dc 01       	movw	r26, r24
    2ece:	cb 01       	movw	r24, r22
    2ed0:	9e 83       	std	Y+6, r25	; 0x06
    2ed2:	8d 83       	std	Y+5, r24	; 0x05
    2ed4:	0f c0       	rjmp	.+30     	; 0x2ef4 <DoorMovement+0xf88>
    2ed6:	89 e1       	ldi	r24, 0x19	; 25
    2ed8:	90 e0       	ldi	r25, 0x00	; 0
    2eda:	9c 83       	std	Y+4, r25	; 0x04
    2edc:	8b 83       	std	Y+3, r24	; 0x03
    2ede:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ee2:	01 97       	sbiw	r24, 0x01	; 1
    2ee4:	f1 f7       	brne	.-4      	; 0x2ee2 <DoorMovement+0xf76>
    2ee6:	9c 83       	std	Y+4, r25	; 0x04
    2ee8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eea:	8d 81       	ldd	r24, Y+5	; 0x05
    2eec:	9e 81       	ldd	r25, Y+6	; 0x06
    2eee:	01 97       	sbiw	r24, 0x01	; 1
    2ef0:	9e 83       	std	Y+6, r25	; 0x06
    2ef2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ef4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ef6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ef8:	00 97       	sbiw	r24, 0x00	; 0
    2efa:	69 f7       	brne	.-38     	; 0x2ed6 <DoorMovement+0xf6a>
    2efc:	14 c0       	rjmp	.+40     	; 0x2f26 <DoorMovement+0xfba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2efe:	6f 81       	ldd	r22, Y+7	; 0x07
    2f00:	78 85       	ldd	r23, Y+8	; 0x08
    2f02:	89 85       	ldd	r24, Y+9	; 0x09
    2f04:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f0a:	dc 01       	movw	r26, r24
    2f0c:	cb 01       	movw	r24, r22
    2f0e:	9e 83       	std	Y+6, r25	; 0x06
    2f10:	8d 83       	std	Y+5, r24	; 0x05
    2f12:	8d 81       	ldd	r24, Y+5	; 0x05
    2f14:	9e 81       	ldd	r25, Y+6	; 0x06
    2f16:	9a 83       	std	Y+2, r25	; 0x02
    2f18:	89 83       	std	Y+1, r24	; 0x01
    2f1a:	89 81       	ldd	r24, Y+1	; 0x01
    2f1c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f1e:	01 97       	sbiw	r24, 0x01	; 1
    2f20:	f1 f7       	brne	.-4      	; 0x2f1e <DoorMovement+0xfb2>
    2f22:	9a 83       	std	Y+2, r25	; 0x02
    2f24:	89 83       	std	Y+1, r24	; 0x01
	LCD_displayStringRowColumn(0,0,"HELLO Master, :)");
	while(g_tick<12); 	   /*The door will be holding for 3 seconds (3/0.256=12)*/
	g_tick=0;              /*reset to start a new duration*/
	LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,"DoorIsClosing");
	while(g_tick<59){      /*The door will be closing for 15 seconds (15/0.256=59)*/
    2f26:	80 91 77 01 	lds	r24, 0x0177
    2f2a:	90 91 78 01 	lds	r25, 0x0178
    2f2e:	a0 91 79 01 	lds	r26, 0x0179
    2f32:	b0 91 7a 01 	lds	r27, 0x017A
    2f36:	8b 33       	cpi	r24, 0x3B	; 59
    2f38:	91 05       	cpc	r25, r1
    2f3a:	a1 05       	cpc	r26, r1
    2f3c:	b1 05       	cpc	r27, r1
    2f3e:	08 f4       	brcc	.+2      	; 0x2f42 <DoorMovement+0xfd6>
    2f40:	c8 cc       	rjmp	.-1648   	; 0x28d2 <DoorMovement+0x966>
		LCD_displayStringRowColumn(0,14," ");
		_delay_ms(WASTE);
		LCD_displayStringRowColumn(0,13," ");
		_delay_ms(WASTE);
	}
	g_tick=0;              /*reset to start a new duration*/
    2f42:	10 92 77 01 	sts	0x0177, r1
    2f46:	10 92 78 01 	sts	0x0178, r1
    2f4a:	10 92 79 01 	sts	0x0179, r1
    2f4e:	10 92 7a 01 	sts	0x017A, r1
	LCD_clearScreen();
    2f52:	0e 94 57 0a 	call	0x14ae	; 0x14ae <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Security ON ;)");
    2f56:	21 ed       	ldi	r18, 0xD1	; 209
    2f58:	30 e0       	ldi	r19, 0x00	; 0
    2f5a:	80 e0       	ldi	r24, 0x00	; 0
    2f5c:	60 e0       	ldi	r22, 0x00	; 0
    2f5e:	a9 01       	movw	r20, r18
    2f60:	0e 94 1b 0a 	call	0x1436	; 0x1436 <LCD_displayStringRowColumn>
	while(g_tick<8);       /*The door will be holding for 2 seconds (2/0.256=8)*/
    2f64:	80 91 77 01 	lds	r24, 0x0177
    2f68:	90 91 78 01 	lds	r25, 0x0178
    2f6c:	a0 91 79 01 	lds	r26, 0x0179
    2f70:	b0 91 7a 01 	lds	r27, 0x017A
    2f74:	88 30       	cpi	r24, 0x08	; 8
    2f76:	91 05       	cpc	r25, r1
    2f78:	a1 05       	cpc	r26, r1
    2f7a:	b1 05       	cpc	r27, r1
    2f7c:	98 f3       	brcs	.-26     	; 0x2f64 <DoorMovement+0xff8>
	g_tick=0;              /*reset to start a new duration*/
    2f7e:	10 92 77 01 	sts	0x0177, r1
    2f82:	10 92 78 01 	sts	0x0178, r1
    2f86:	10 92 79 01 	sts	0x0179, r1
    2f8a:	10 92 7a 01 	sts	0x017A, r1

	Timer_DeInit();        /*disable timer*/
    2f8e:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <Timer_DeInit>
}
    2f92:	c8 55       	subi	r28, 0x58	; 88
    2f94:	df 4f       	sbci	r29, 0xFF	; 255
    2f96:	0f b6       	in	r0, 0x3f	; 63
    2f98:	f8 94       	cli
    2f9a:	de bf       	out	0x3e, r29	; 62
    2f9c:	0f be       	out	0x3f, r0	; 63
    2f9e:	cd bf       	out	0x3d, r28	; 61
    2fa0:	cf 91       	pop	r28
    2fa2:	df 91       	pop	r29
    2fa4:	1f 91       	pop	r17
    2fa6:	0f 91       	pop	r16
    2fa8:	08 95       	ret

00002faa <Wrong_Pass>:
 * 					 a warning buzzer when more than 2 wrong entry
 *
 * [Args in]          : NONE
 * [Args out]         : NONE
 *******************************************************************************/
void Wrong_Pass(void){
    2faa:	df 93       	push	r29
    2fac:	cf 93       	push	r28
    2fae:	cd b7       	in	r28, 0x3d	; 61
    2fb0:	de b7       	in	r29, 0x3e	; 62
    2fb2:	2e 97       	sbiw	r28, 0x0e	; 14
    2fb4:	0f b6       	in	r0, 0x3f	; 63
    2fb6:	f8 94       	cli
    2fb8:	de bf       	out	0x3e, r29	; 62
    2fba:	0f be       	out	0x3f, r0	; 63
    2fbc:	cd bf       	out	0x3d, r28	; 61

	wrongPass++; /*increment wrongPass value each time the user miss-matches the saved password*/
    2fbe:	80 91 73 01 	lds	r24, 0x0173
    2fc2:	90 91 74 01 	lds	r25, 0x0174
    2fc6:	a0 91 75 01 	lds	r26, 0x0175
    2fca:	b0 91 76 01 	lds	r27, 0x0176
    2fce:	01 96       	adiw	r24, 0x01	; 1
    2fd0:	a1 1d       	adc	r26, r1
    2fd2:	b1 1d       	adc	r27, r1
    2fd4:	80 93 73 01 	sts	0x0173, r24
    2fd8:	90 93 74 01 	sts	0x0174, r25
    2fdc:	a0 93 75 01 	sts	0x0175, r26
    2fe0:	b0 93 76 01 	sts	0x0176, r27
	LCD_clearScreen();
    2fe4:	0e 94 57 0a 	call	0x14ae	; 0x14ae <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"INCORRECT PASS!!");
    2fe8:	20 ee       	ldi	r18, 0xE0	; 224
    2fea:	30 e0       	ldi	r19, 0x00	; 0
    2fec:	80 e0       	ldi	r24, 0x00	; 0
    2fee:	60 e0       	ldi	r22, 0x00	; 0
    2ff0:	a9 01       	movw	r20, r18
    2ff2:	0e 94 1b 0a 	call	0x1436	; 0x1436 <LCD_displayStringRowColumn>
    2ff6:	80 e0       	ldi	r24, 0x00	; 0
    2ff8:	90 e8       	ldi	r25, 0x80	; 128
    2ffa:	ab eb       	ldi	r26, 0xBB	; 187
    2ffc:	b4 e4       	ldi	r27, 0x44	; 68
    2ffe:	8b 87       	std	Y+11, r24	; 0x0b
    3000:	9c 87       	std	Y+12, r25	; 0x0c
    3002:	ad 87       	std	Y+13, r26	; 0x0d
    3004:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3006:	6b 85       	ldd	r22, Y+11	; 0x0b
    3008:	7c 85       	ldd	r23, Y+12	; 0x0c
    300a:	8d 85       	ldd	r24, Y+13	; 0x0d
    300c:	9e 85       	ldd	r25, Y+14	; 0x0e
    300e:	20 e0       	ldi	r18, 0x00	; 0
    3010:	30 e0       	ldi	r19, 0x00	; 0
    3012:	4a e7       	ldi	r20, 0x7A	; 122
    3014:	53 e4       	ldi	r21, 0x43	; 67
    3016:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    301a:	dc 01       	movw	r26, r24
    301c:	cb 01       	movw	r24, r22
    301e:	8f 83       	std	Y+7, r24	; 0x07
    3020:	98 87       	std	Y+8, r25	; 0x08
    3022:	a9 87       	std	Y+9, r26	; 0x09
    3024:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3026:	6f 81       	ldd	r22, Y+7	; 0x07
    3028:	78 85       	ldd	r23, Y+8	; 0x08
    302a:	89 85       	ldd	r24, Y+9	; 0x09
    302c:	9a 85       	ldd	r25, Y+10	; 0x0a
    302e:	20 e0       	ldi	r18, 0x00	; 0
    3030:	30 e0       	ldi	r19, 0x00	; 0
    3032:	40 e8       	ldi	r20, 0x80	; 128
    3034:	5f e3       	ldi	r21, 0x3F	; 63
    3036:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    303a:	88 23       	and	r24, r24
    303c:	2c f4       	brge	.+10     	; 0x3048 <Wrong_Pass+0x9e>
		__ticks = 1;
    303e:	81 e0       	ldi	r24, 0x01	; 1
    3040:	90 e0       	ldi	r25, 0x00	; 0
    3042:	9e 83       	std	Y+6, r25	; 0x06
    3044:	8d 83       	std	Y+5, r24	; 0x05
    3046:	3f c0       	rjmp	.+126    	; 0x30c6 <Wrong_Pass+0x11c>
	else if (__tmp > 65535)
    3048:	6f 81       	ldd	r22, Y+7	; 0x07
    304a:	78 85       	ldd	r23, Y+8	; 0x08
    304c:	89 85       	ldd	r24, Y+9	; 0x09
    304e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3050:	20 e0       	ldi	r18, 0x00	; 0
    3052:	3f ef       	ldi	r19, 0xFF	; 255
    3054:	4f e7       	ldi	r20, 0x7F	; 127
    3056:	57 e4       	ldi	r21, 0x47	; 71
    3058:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    305c:	18 16       	cp	r1, r24
    305e:	4c f5       	brge	.+82     	; 0x30b2 <Wrong_Pass+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3060:	6b 85       	ldd	r22, Y+11	; 0x0b
    3062:	7c 85       	ldd	r23, Y+12	; 0x0c
    3064:	8d 85       	ldd	r24, Y+13	; 0x0d
    3066:	9e 85       	ldd	r25, Y+14	; 0x0e
    3068:	20 e0       	ldi	r18, 0x00	; 0
    306a:	30 e0       	ldi	r19, 0x00	; 0
    306c:	40 e2       	ldi	r20, 0x20	; 32
    306e:	51 e4       	ldi	r21, 0x41	; 65
    3070:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3074:	dc 01       	movw	r26, r24
    3076:	cb 01       	movw	r24, r22
    3078:	bc 01       	movw	r22, r24
    307a:	cd 01       	movw	r24, r26
    307c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3080:	dc 01       	movw	r26, r24
    3082:	cb 01       	movw	r24, r22
    3084:	9e 83       	std	Y+6, r25	; 0x06
    3086:	8d 83       	std	Y+5, r24	; 0x05
    3088:	0f c0       	rjmp	.+30     	; 0x30a8 <Wrong_Pass+0xfe>
    308a:	89 e1       	ldi	r24, 0x19	; 25
    308c:	90 e0       	ldi	r25, 0x00	; 0
    308e:	9c 83       	std	Y+4, r25	; 0x04
    3090:	8b 83       	std	Y+3, r24	; 0x03
    3092:	8b 81       	ldd	r24, Y+3	; 0x03
    3094:	9c 81       	ldd	r25, Y+4	; 0x04
    3096:	01 97       	sbiw	r24, 0x01	; 1
    3098:	f1 f7       	brne	.-4      	; 0x3096 <Wrong_Pass+0xec>
    309a:	9c 83       	std	Y+4, r25	; 0x04
    309c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    309e:	8d 81       	ldd	r24, Y+5	; 0x05
    30a0:	9e 81       	ldd	r25, Y+6	; 0x06
    30a2:	01 97       	sbiw	r24, 0x01	; 1
    30a4:	9e 83       	std	Y+6, r25	; 0x06
    30a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30a8:	8d 81       	ldd	r24, Y+5	; 0x05
    30aa:	9e 81       	ldd	r25, Y+6	; 0x06
    30ac:	00 97       	sbiw	r24, 0x00	; 0
    30ae:	69 f7       	brne	.-38     	; 0x308a <Wrong_Pass+0xe0>
    30b0:	14 c0       	rjmp	.+40     	; 0x30da <Wrong_Pass+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30b2:	6f 81       	ldd	r22, Y+7	; 0x07
    30b4:	78 85       	ldd	r23, Y+8	; 0x08
    30b6:	89 85       	ldd	r24, Y+9	; 0x09
    30b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    30ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30be:	dc 01       	movw	r26, r24
    30c0:	cb 01       	movw	r24, r22
    30c2:	9e 83       	std	Y+6, r25	; 0x06
    30c4:	8d 83       	std	Y+5, r24	; 0x05
    30c6:	8d 81       	ldd	r24, Y+5	; 0x05
    30c8:	9e 81       	ldd	r25, Y+6	; 0x06
    30ca:	9a 83       	std	Y+2, r25	; 0x02
    30cc:	89 83       	std	Y+1, r24	; 0x01
    30ce:	89 81       	ldd	r24, Y+1	; 0x01
    30d0:	9a 81       	ldd	r25, Y+2	; 0x02
    30d2:	01 97       	sbiw	r24, 0x01	; 1
    30d4:	f1 f7       	brne	.-4      	; 0x30d2 <Wrong_Pass+0x128>
    30d6:	9a 83       	std	Y+2, r25	; 0x02
    30d8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1500);
	if(wrongPass==3)  /*when reaching 3 connected wrong entries enable a warning buzzer for 1min*/
    30da:	80 91 73 01 	lds	r24, 0x0173
    30de:	90 91 74 01 	lds	r25, 0x0174
    30e2:	a0 91 75 01 	lds	r26, 0x0175
    30e6:	b0 91 76 01 	lds	r27, 0x0176
    30ea:	83 30       	cpi	r24, 0x03	; 3
    30ec:	91 05       	cpc	r25, r1
    30ee:	a1 05       	cpc	r26, r1
    30f0:	b1 05       	cpc	r27, r1
    30f2:	09 f0       	breq	.+2      	; 0x30f6 <Wrong_Pass+0x14c>
    30f4:	3f c0       	rjmp	.+126    	; 0x3174 <Wrong_Pass+0x1ca>
	{
		set_UP_HMI_Timer(); /*Timer is on to calculate how much time to enable the buzzer*/
    30f6:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <set_UP_HMI_Timer>
		LCD_clearScreen();
    30fa:	0e 94 57 0a 	call	0x14ae	; 0x14ae <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"            |I|");
    30fe:	21 ef       	ldi	r18, 0xF1	; 241
    3100:	30 e0       	ldi	r19, 0x00	; 0
    3102:	80 e0       	ldi	r24, 0x00	; 0
    3104:	60 e0       	ldi	r22, 0x00	; 0
    3106:	a9 01       	movw	r20, r18
    3108:	0e 94 1b 0a 	call	0x1436	; 0x1436 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1,0,"7araamiii!!|_0_|");
    310c:	21 e0       	ldi	r18, 0x01	; 1
    310e:	31 e0       	ldi	r19, 0x01	; 1
    3110:	81 e0       	ldi	r24, 0x01	; 1
    3112:	60 e0       	ldi	r22, 0x00	; 0
    3114:	a9 01       	movw	r20, r18
    3116:	0e 94 1b 0a 	call	0x1436	; 0x1436 <LCD_displayStringRowColumn>

		while(g_tick<235);     /*same as door movement time calculation we calculate here a 1min warning message (60/0.256=235)*/
    311a:	80 91 77 01 	lds	r24, 0x0177
    311e:	90 91 78 01 	lds	r25, 0x0178
    3122:	a0 91 79 01 	lds	r26, 0x0179
    3126:	b0 91 7a 01 	lds	r27, 0x017A
    312a:	8b 3e       	cpi	r24, 0xEB	; 235
    312c:	91 05       	cpc	r25, r1
    312e:	a1 05       	cpc	r26, r1
    3130:	b1 05       	cpc	r27, r1
    3132:	98 f3       	brcs	.-26     	; 0x311a <Wrong_Pass+0x170>
		LCD_clearScreen();
    3134:	0e 94 57 0a 	call	0x14ae	; 0x14ae <LCD_clearScreen>
		g_tick=0;              /*reset to start a new duration*/
    3138:	10 92 77 01 	sts	0x0177, r1
    313c:	10 92 78 01 	sts	0x0178, r1
    3140:	10 92 79 01 	sts	0x0179, r1
    3144:	10 92 7a 01 	sts	0x017A, r1
		wrongPass=0;           /*reset the wrong trials*/
    3148:	10 92 73 01 	sts	0x0173, r1
    314c:	10 92 74 01 	sts	0x0174, r1
    3150:	10 92 75 01 	sts	0x0175, r1
    3154:	10 92 76 01 	sts	0x0176, r1
		backToMain=1;
    3158:	81 e0       	ldi	r24, 0x01	; 1
    315a:	90 e0       	ldi	r25, 0x00	; 0
    315c:	a0 e0       	ldi	r26, 0x00	; 0
    315e:	b0 e0       	ldi	r27, 0x00	; 0
    3160:	80 93 63 01 	sts	0x0163, r24
    3164:	90 93 64 01 	sts	0x0164, r25
    3168:	a0 93 65 01 	sts	0x0165, r26
    316c:	b0 93 66 01 	sts	0x0166, r27

		Timer_DeInit();        /*disable timer*/
    3170:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <Timer_DeInit>
	}
}
    3174:	2e 96       	adiw	r28, 0x0e	; 14
    3176:	0f b6       	in	r0, 0x3f	; 63
    3178:	f8 94       	cli
    317a:	de bf       	out	0x3e, r29	; 62
    317c:	0f be       	out	0x3f, r0	; 63
    317e:	cd bf       	out	0x3d, r28	; 61
    3180:	cf 91       	pop	r28
    3182:	df 91       	pop	r29
    3184:	08 95       	ret

00003186 <Display_Main_Options>:
 * [Description]   : A function to display main option screen on the LCD
 *
 * [Args in]       : NONE
 * [Args out]      : NONE
 *******************************************************************************/
void Display_Main_Options(void){
    3186:	df 93       	push	r29
    3188:	cf 93       	push	r28
    318a:	cd b7       	in	r28, 0x3d	; 61
    318c:	de b7       	in	r29, 0x3e	; 62

	LCD_clearScreen();
    318e:	0e 94 57 0a 	call	0x14ae	; 0x14ae <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"+:Open Door");
    3192:	22 e1       	ldi	r18, 0x12	; 18
    3194:	31 e0       	ldi	r19, 0x01	; 1
    3196:	80 e0       	ldi	r24, 0x00	; 0
    3198:	60 e0       	ldi	r22, 0x00	; 0
    319a:	a9 01       	movw	r20, r18
    319c:	0e 94 1b 0a 	call	0x1436	; 0x1436 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"-:ChangePassword");
    31a0:	2e e1       	ldi	r18, 0x1E	; 30
    31a2:	31 e0       	ldi	r19, 0x01	; 1
    31a4:	81 e0       	ldi	r24, 0x01	; 1
    31a6:	60 e0       	ldi	r22, 0x00	; 0
    31a8:	a9 01       	movw	r20, r18
    31aa:	0e 94 1b 0a 	call	0x1436	; 0x1436 <LCD_displayStringRowColumn>
}
    31ae:	cf 91       	pop	r28
    31b0:	df 91       	pop	r29
    31b2:	08 95       	ret

000031b4 <Main_Options>:
 *  				 whether it was opening door or changing password
 * [Args in]       : NONE
 * [Args out]      : NONE
 *******************************************************************************/
void Main_Options(void)
{
    31b4:	df 93       	push	r29
    31b6:	cf 93       	push	r28
    31b8:	00 d0       	rcall	.+0      	; 0x31ba <Main_Options+0x6>
    31ba:	0f 92       	push	r0
    31bc:	cd b7       	in	r28, 0x3d	; 61
    31be:	de b7       	in	r29, 0x3e	; 62

	Display_Main_Options();          /*display main options screen on the LCD*/
    31c0:	0e 94 c3 18 	call	0x3186	; 0x3186 <Display_Main_Options>
	uint8 keyx=0;                    /*variable to hold keypad pressed buttons value*/
    31c4:	19 82       	std	Y+1, r1	; 0x01
	keyx = KEYPAD_getPressedKey();   /*get the value of the pressed button*/
    31c6:	0e 94 d0 19 	call	0x33a0	; 0x33a0 <KEYPAD_getPressedKey>
    31ca:	89 83       	std	Y+1, r24	; 0x01
	matched_flag=0;
    31cc:	10 92 62 01 	sts	0x0162, r1
	switch(keyx)
    31d0:	89 81       	ldd	r24, Y+1	; 0x01
    31d2:	28 2f       	mov	r18, r24
    31d4:	30 e0       	ldi	r19, 0x00	; 0
    31d6:	3b 83       	std	Y+3, r19	; 0x03
    31d8:	2a 83       	std	Y+2, r18	; 0x02
    31da:	8a 81       	ldd	r24, Y+2	; 0x02
    31dc:	9b 81       	ldd	r25, Y+3	; 0x03
    31de:	8b 32       	cpi	r24, 0x2B	; 43
    31e0:	91 05       	cpc	r25, r1
    31e2:	39 f0       	breq	.+14     	; 0x31f2 <Main_Options+0x3e>
    31e4:	2a 81       	ldd	r18, Y+2	; 0x02
    31e6:	3b 81       	ldd	r19, Y+3	; 0x03
    31e8:	2d 32       	cpi	r18, 0x2D	; 45
    31ea:	31 05       	cpc	r19, r1
    31ec:	09 f4       	brne	.+2      	; 0x31f0 <Main_Options+0x3c>
    31ee:	48 c0       	rjmp	.+144    	; 0x3280 <Main_Options+0xcc>
    31f0:	8d c0       	rjmp	.+282    	; 0x330c <Main_Options+0x158>
	{
	case openDoor:
		SendToControl('+');                  /*send open door(+) option to CONTROL ECU*/
    31f2:	8b e2       	ldi	r24, 0x2B	; 43
    31f4:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <SendToControl>
    31f8:	3d c0       	rjmp	.+122    	; 0x3274 <Main_Options+0xc0>
		while(0==matched_flag){              /*not to back to main until taking the 3 password entry chances*/
			LCD_clearScreen();
    31fa:	0e 94 57 0a 	call	0x14ae	; 0x14ae <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"Enter Pass:");
    31fe:	2f e2       	ldi	r18, 0x2F	; 47
    3200:	31 e0       	ldi	r19, 0x01	; 1
    3202:	80 e0       	ldi	r24, 0x00	; 0
    3204:	60 e0       	ldi	r22, 0x00	; 0
    3206:	a9 01       	movw	r20, r18
    3208:	0e 94 1b 0a 	call	0x1436	; 0x1436 <LCD_displayStringRowColumn>
			LCD_moveCursor(1,0);
    320c:	81 e0       	ldi	r24, 0x01	; 1
    320e:	60 e0       	ldi	r22, 0x00	; 0
    3210:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <LCD_moveCursor>
			Enter_Password();                    /*ask the user to enter password*/
    3214:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <Enter_Password>
			save_pass_to_control(password);      /*send the first password to control for matching checking*/
    3218:	8e e6       	ldi	r24, 0x6E	; 110
    321a:	91 e0       	ldi	r25, 0x01	; 1
    321c:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <save_pass_to_control>
			matched_flag = RecieveFromControl(); /*wait for CONTROL ECU to compare between entered and saved password*/
    3220:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <RecieveFromControl>
    3224:	80 93 62 01 	sts	0x0162, r24
			if(0==matched_flag){
    3228:	80 91 62 01 	lds	r24, 0x0162
    322c:	88 23       	and	r24, r24
    322e:	c1 f4       	brne	.+48     	; 0x3260 <Main_Options+0xac>
				Wrong_Pass();                    /*if mis-match increment wrongPass value*/
    3230:	0e 94 d5 17 	call	0x2faa	; 0x2faa <Wrong_Pass>
				if(backToMain==1){               /*if taken the 3 password entry chances*/
    3234:	80 91 63 01 	lds	r24, 0x0163
    3238:	90 91 64 01 	lds	r25, 0x0164
    323c:	a0 91 65 01 	lds	r26, 0x0165
    3240:	b0 91 66 01 	lds	r27, 0x0166
    3244:	81 30       	cpi	r24, 0x01	; 1
    3246:	91 05       	cpc	r25, r1
    3248:	a1 05       	cpc	r26, r1
    324a:	b1 05       	cpc	r27, r1
    324c:	99 f4       	brne	.+38     	; 0x3274 <Main_Options+0xc0>
					backToMain=0;                /*reset back to main value*/
    324e:	10 92 63 01 	sts	0x0163, r1
    3252:	10 92 64 01 	sts	0x0164, r1
    3256:	10 92 65 01 	sts	0x0165, r1
    325a:	10 92 66 01 	sts	0x0166, r1
    325e:	56 c0       	rjmp	.+172    	; 0x330c <Main_Options+0x158>
					break;                       /*break to get back to main after the warning message*/
				}
			}
			else{                                /*if matching start door movement screen display and reset wrongPass value*/
				wrongPass=0;
    3260:	10 92 73 01 	sts	0x0173, r1
    3264:	10 92 74 01 	sts	0x0174, r1
    3268:	10 92 75 01 	sts	0x0175, r1
    326c:	10 92 76 01 	sts	0x0176, r1
				DoorMovement();
    3270:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <DoorMovement>
	matched_flag=0;
	switch(keyx)
	{
	case openDoor:
		SendToControl('+');                  /*send open door(+) option to CONTROL ECU*/
		while(0==matched_flag){              /*not to back to main until taking the 3 password entry chances*/
    3274:	80 91 62 01 	lds	r24, 0x0162
    3278:	88 23       	and	r24, r24
    327a:	09 f4       	brne	.+2      	; 0x327e <Main_Options+0xca>
    327c:	be cf       	rjmp	.-132    	; 0x31fa <Main_Options+0x46>
    327e:	46 c0       	rjmp	.+140    	; 0x330c <Main_Options+0x158>
			}
		}
		break;

	case changePass:
		SendToControl('-');                  /*send change password(-) option to CONTROL ECU*/
    3280:	8d e2       	ldi	r24, 0x2D	; 45
    3282:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <SendToControl>
    3286:	3d c0       	rjmp	.+122    	; 0x3302 <Main_Options+0x14e>
		while(0==matched_flag){              /*not to back to main until taking the 3 password entry chances*/
			LCD_clearScreen();
    3288:	0e 94 57 0a 	call	0x14ae	; 0x14ae <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"Enter Old Pass:");
    328c:	2b e3       	ldi	r18, 0x3B	; 59
    328e:	31 e0       	ldi	r19, 0x01	; 1
    3290:	80 e0       	ldi	r24, 0x00	; 0
    3292:	60 e0       	ldi	r22, 0x00	; 0
    3294:	a9 01       	movw	r20, r18
    3296:	0e 94 1b 0a 	call	0x1436	; 0x1436 <LCD_displayStringRowColumn>
			LCD_moveCursor(1,0);
    329a:	81 e0       	ldi	r24, 0x01	; 1
    329c:	60 e0       	ldi	r22, 0x00	; 0
    329e:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <LCD_moveCursor>
			Enter_Password();                    /*ask the user to enter password*/
    32a2:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <Enter_Password>
			save_pass_to_control(password);      /*send the first password to control for matching checking*/
    32a6:	8e e6       	ldi	r24, 0x6E	; 110
    32a8:	91 e0       	ldi	r25, 0x01	; 1
    32aa:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <save_pass_to_control>
			matched_flag = RecieveFromControl(); /*wait for CONTROL ECU to compare between entered and saved password*/
    32ae:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <RecieveFromControl>
    32b2:	80 93 62 01 	sts	0x0162, r24
			if(0==matched_flag){
    32b6:	80 91 62 01 	lds	r24, 0x0162
    32ba:	88 23       	and	r24, r24
    32bc:	c1 f4       	brne	.+48     	; 0x32ee <Main_Options+0x13a>
				Wrong_Pass();                    /*if mis-match increment wrongPass value*/
    32be:	0e 94 d5 17 	call	0x2faa	; 0x2faa <Wrong_Pass>
				if(backToMain==1){               /*if taken the 3 password entry chances*/
    32c2:	80 91 63 01 	lds	r24, 0x0163
    32c6:	90 91 64 01 	lds	r25, 0x0164
    32ca:	a0 91 65 01 	lds	r26, 0x0165
    32ce:	b0 91 66 01 	lds	r27, 0x0166
    32d2:	81 30       	cpi	r24, 0x01	; 1
    32d4:	91 05       	cpc	r25, r1
    32d6:	a1 05       	cpc	r26, r1
    32d8:	b1 05       	cpc	r27, r1
    32da:	99 f4       	brne	.+38     	; 0x3302 <Main_Options+0x14e>
					backToMain=0;                /*reset back to main value*/
    32dc:	10 92 63 01 	sts	0x0163, r1
    32e0:	10 92 64 01 	sts	0x0164, r1
    32e4:	10 92 65 01 	sts	0x0165, r1
    32e8:	10 92 66 01 	sts	0x0166, r1
    32ec:	0f c0       	rjmp	.+30     	; 0x330c <Main_Options+0x158>
					break;                       /*break to get back to main after the warning message*/
				}
			}
			else{                                /*if matching start setting up new password routine and reset wrongPass value*/
				wrongPass=0;
    32ee:	10 92 73 01 	sts	0x0173, r1
    32f2:	10 92 74 01 	sts	0x0174, r1
    32f6:	10 92 75 01 	sts	0x0175, r1
    32fa:	10 92 76 01 	sts	0x0176, r1
				new_pasword();
    32fe:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <new_pasword>
		}
		break;

	case changePass:
		SendToControl('-');                  /*send change password(-) option to CONTROL ECU*/
		while(0==matched_flag){              /*not to back to main until taking the 3 password entry chances*/
    3302:	80 91 62 01 	lds	r24, 0x0162
    3306:	88 23       	and	r24, r24
    3308:	09 f4       	brne	.+2      	; 0x330c <Main_Options+0x158>
    330a:	be cf       	rjmp	.-132    	; 0x3288 <Main_Options+0xd4>
				new_pasword();
			}
		}
		break;
	}
}
    330c:	0f 90       	pop	r0
    330e:	0f 90       	pop	r0
    3310:	0f 90       	pop	r0
    3312:	cf 91       	pop	r28
    3314:	df 91       	pop	r29
    3316:	08 95       	ret

00003318 <main>:
 *******************************************************************************/
uint8 first_time_flag=0;    /*A flag to see if it's the first time to use this system or not*/


int main(void)
{
    3318:	df 93       	push	r29
    331a:	cf 93       	push	r28
    331c:	cd b7       	in	r28, 0x3d	; 61
    331e:	de b7       	in	r29, 0x3e	; 62
    3320:	2c 97       	sbiw	r28, 0x0c	; 12
    3322:	0f b6       	in	r0, 0x3f	; 63
    3324:	f8 94       	cli
    3326:	de bf       	out	0x3e, r29	; 62
    3328:	0f be       	out	0x3f, r0	; 63
    332a:	cd bf       	out	0x3d, r28	; 61
/*******************************************************************************
*                           Peripherals Initialization                         *
*******************************************************************************/
	LCD_init();          /*initializing LCD to use its function*/
    332c:	0e 94 a3 05 	call	0xb46	; 0xb46 <LCD_init>
	UART_ConfigType ConfigPtr = {Paraity_Disabled,One_Stop_bit,eight_bit,9600};   /*configurations of UART*/
    3330:	ce 01       	movw	r24, r28
    3332:	01 96       	adiw	r24, 0x01	; 1
    3334:	99 87       	std	Y+9, r25	; 0x09
    3336:	88 87       	std	Y+8, r24	; 0x08
    3338:	ea e5       	ldi	r30, 0x5A	; 90
    333a:	f1 e0       	ldi	r31, 0x01	; 1
    333c:	fb 87       	std	Y+11, r31	; 0x0b
    333e:	ea 87       	std	Y+10, r30	; 0x0a
    3340:	f7 e0       	ldi	r31, 0x07	; 7
    3342:	fc 87       	std	Y+12, r31	; 0x0c
    3344:	ea 85       	ldd	r30, Y+10	; 0x0a
    3346:	fb 85       	ldd	r31, Y+11	; 0x0b
    3348:	00 80       	ld	r0, Z
    334a:	8a 85       	ldd	r24, Y+10	; 0x0a
    334c:	9b 85       	ldd	r25, Y+11	; 0x0b
    334e:	01 96       	adiw	r24, 0x01	; 1
    3350:	9b 87       	std	Y+11, r25	; 0x0b
    3352:	8a 87       	std	Y+10, r24	; 0x0a
    3354:	e8 85       	ldd	r30, Y+8	; 0x08
    3356:	f9 85       	ldd	r31, Y+9	; 0x09
    3358:	00 82       	st	Z, r0
    335a:	88 85       	ldd	r24, Y+8	; 0x08
    335c:	99 85       	ldd	r25, Y+9	; 0x09
    335e:	01 96       	adiw	r24, 0x01	; 1
    3360:	99 87       	std	Y+9, r25	; 0x09
    3362:	88 87       	std	Y+8, r24	; 0x08
    3364:	9c 85       	ldd	r25, Y+12	; 0x0c
    3366:	91 50       	subi	r25, 0x01	; 1
    3368:	9c 87       	std	Y+12, r25	; 0x0c
    336a:	ec 85       	ldd	r30, Y+12	; 0x0c
    336c:	ee 23       	and	r30, r30
    336e:	51 f7       	brne	.-44     	; 0x3344 <main+0x2c>
	UART_init(&ConfigPtr);     /*initializing UART*/
    3370:	ce 01       	movw	r24, r28
    3372:	01 96       	adiw	r24, 0x01	; 1
    3374:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <UART_init>
	SREG|=(1<<7);              /*Enabling Global interrupt*/
    3378:	af e5       	ldi	r26, 0x5F	; 95
    337a:	b0 e0       	ldi	r27, 0x00	; 0
    337c:	ef e5       	ldi	r30, 0x5F	; 95
    337e:	f0 e0       	ldi	r31, 0x00	; 0
    3380:	80 81       	ld	r24, Z
    3382:	80 68       	ori	r24, 0x80	; 128
    3384:	8c 93       	st	X, r24

	first_time_flag = RecieveFromControl();   /*waiting for control to inform HMI if it's the first time to use the system or not*/
    3386:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <RecieveFromControl>
    338a:	80 93 67 01 	sts	0x0167, r24

	if(1==first_time_flag){                   /*if the password never change set up a new password*/
    338e:	80 91 67 01 	lds	r24, 0x0167
    3392:	81 30       	cpi	r24, 0x01	; 1
    3394:	11 f4       	brne	.+4      	; 0x339a <main+0x82>
	new_pasword();
    3396:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <new_pasword>
/*******************************************************************************
*                           All time running(App.) code                        *
*******************************************************************************/
	while(1)
	{
		Main_Options();                       /*Display main options screen and wait for user action(option selection)*/
    339a:	0e 94 da 18 	call	0x31b4	; 0x31b4 <Main_Options>
    339e:	fd cf       	rjmp	.-6      	; 0x339a <main+0x82>

000033a0 <KEYPAD_getPressedKey>:
 * its corresponding functional number in the proteus for 4x4 keypad
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number);
#endif

uint8 KEYPAD_getPressedKey(void){
    33a0:	df 93       	push	r29
    33a2:	cf 93       	push	r28
    33a4:	00 d0       	rcall	.+0      	; 0x33a6 <KEYPAD_getPressedKey+0x6>
    33a6:	0f 92       	push	r0
    33a8:	cd b7       	in	r28, 0x3d	; 61
    33aa:	de b7       	in	r29, 0x3e	; 62
	uint8 row,col;
	uint8 Keypad_port_value=0;
    33ac:	19 82       	std	Y+1, r1	; 0x01
	while(1){
		for(col=0;col<KEYPAD_NUM_COLS;col++){
    33ae:	1a 82       	std	Y+2, r1	; 0x02
    33b0:	43 c0       	rjmp	.+134    	; 0x3438 <KEYPAD_getPressedKey+0x98>

			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    33b2:	82 e0       	ldi	r24, 0x02	; 2
    33b4:	60 e0       	ldi	r22, 0x00	; 0
    33b6:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,col+KEYPAD_FIRST_COLUMN_PIN_ID,PIN_OUTPUT);
    33ba:	8a 81       	ldd	r24, Y+2	; 0x02
    33bc:	98 2f       	mov	r25, r24
    33be:	9c 5f       	subi	r25, 0xFC	; 252
    33c0:	82 e0       	ldi	r24, 0x02	; 2
    33c2:	69 2f       	mov	r22, r25
    33c4:	41 e0       	ldi	r20, 0x01	; 1
    33c6:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <GPIO_setupPinDirection>
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			Keypad_port_value = ~(1<<(col+KEYPAD_FIRST_COLUMN_PIN_ID));
    33ca:	8a 81       	ldd	r24, Y+2	; 0x02
    33cc:	88 2f       	mov	r24, r24
    33ce:	90 e0       	ldi	r25, 0x00	; 0
    33d0:	9c 01       	movw	r18, r24
    33d2:	2c 5f       	subi	r18, 0xFC	; 252
    33d4:	3f 4f       	sbci	r19, 0xFF	; 255
    33d6:	81 e0       	ldi	r24, 0x01	; 1
    33d8:	90 e0       	ldi	r25, 0x00	; 0
    33da:	02 c0       	rjmp	.+4      	; 0x33e0 <KEYPAD_getPressedKey+0x40>
    33dc:	88 0f       	add	r24, r24
    33de:	99 1f       	adc	r25, r25
    33e0:	2a 95       	dec	r18
    33e2:	e2 f7       	brpl	.-8      	; 0x33dc <KEYPAD_getPressedKey+0x3c>
    33e4:	80 95       	com	r24
    33e6:	89 83       	std	Y+1, r24	; 0x01
#else
			Keypad_port_value = (1<<(col+KEYPAD_FIRST_COLUMN_PIN_ID));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,Keypad_port_value);
    33e8:	82 e0       	ldi	r24, 0x02	; 2
    33ea:	69 81       	ldd	r22, Y+1	; 0x01
    33ec:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <GPIO_writePort>
			for(row=0;row<KEYPAD_NUM_ROWS;row++){
    33f0:	1b 82       	std	Y+3, r1	; 0x03
    33f2:	1c c0       	rjmp	.+56     	; 0x342c <KEYPAD_getPressedKey+0x8c>
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID)==KEYPAD_BUTTON_PRESSED){
    33f4:	82 e0       	ldi	r24, 0x02	; 2
    33f6:	6b 81       	ldd	r22, Y+3	; 0x03
    33f8:	0e 94 37 0c 	call	0x186e	; 0x186e <GPIO_readPin>
    33fc:	88 23       	and	r24, r24
    33fe:	99 f4       	brne	.+38     	; 0x3426 <KEYPAD_getPressedKey+0x86>
#if (KEYPAD_NUM_COLS == 3)
					return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
#elif (KEYPAD_NUM_COLS == 4)
					return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    3400:	8b 81       	ldd	r24, Y+3	; 0x03
    3402:	88 2f       	mov	r24, r24
    3404:	90 e0       	ldi	r25, 0x00	; 0
    3406:	88 0f       	add	r24, r24
    3408:	99 1f       	adc	r25, r25
    340a:	88 0f       	add	r24, r24
    340c:	99 1f       	adc	r25, r25
    340e:	98 2f       	mov	r25, r24
    3410:	8a 81       	ldd	r24, Y+2	; 0x02
    3412:	89 0f       	add	r24, r25
    3414:	8f 5f       	subi	r24, 0xFF	; 255
    3416:	0e 94 21 1a 	call	0x3442	; 0x3442 <KEYPAD_4x4_adjustKeyNumber>
				}
			}

		}
	}
}
    341a:	0f 90       	pop	r0
    341c:	0f 90       	pop	r0
    341e:	0f 90       	pop	r0
    3420:	cf 91       	pop	r28
    3422:	df 91       	pop	r29
    3424:	08 95       	ret
			Keypad_port_value = ~(1<<(col+KEYPAD_FIRST_COLUMN_PIN_ID));
#else
			Keypad_port_value = (1<<(col+KEYPAD_FIRST_COLUMN_PIN_ID));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,Keypad_port_value);
			for(row=0;row<KEYPAD_NUM_ROWS;row++){
    3426:	8b 81       	ldd	r24, Y+3	; 0x03
    3428:	8f 5f       	subi	r24, 0xFF	; 255
    342a:	8b 83       	std	Y+3, r24	; 0x03
    342c:	8b 81       	ldd	r24, Y+3	; 0x03
    342e:	84 30       	cpi	r24, 0x04	; 4
    3430:	08 f3       	brcs	.-62     	; 0x33f4 <KEYPAD_getPressedKey+0x54>

uint8 KEYPAD_getPressedKey(void){
	uint8 row,col;
	uint8 Keypad_port_value=0;
	while(1){
		for(col=0;col<KEYPAD_NUM_COLS;col++){
    3432:	8a 81       	ldd	r24, Y+2	; 0x02
    3434:	8f 5f       	subi	r24, 0xFF	; 255
    3436:	8a 83       	std	Y+2, r24	; 0x02
    3438:	8a 81       	ldd	r24, Y+2	; 0x02
    343a:	84 30       	cpi	r24, 0x04	; 4
    343c:	08 f4       	brcc	.+2      	; 0x3440 <KEYPAD_getPressedKey+0xa0>
    343e:	b9 cf       	rjmp	.-142    	; 0x33b2 <KEYPAD_getPressedKey+0x12>
    3440:	b6 cf       	rjmp	.-148    	; 0x33ae <KEYPAD_getPressedKey+0xe>

00003442 <KEYPAD_4x4_adjustKeyNumber>:

/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number){
    3442:	df 93       	push	r29
    3444:	cf 93       	push	r28
    3446:	00 d0       	rcall	.+0      	; 0x3448 <KEYPAD_4x4_adjustKeyNumber+0x6>
    3448:	00 d0       	rcall	.+0      	; 0x344a <KEYPAD_4x4_adjustKeyNumber+0x8>
    344a:	cd b7       	in	r28, 0x3d	; 61
    344c:	de b7       	in	r29, 0x3e	; 62
    344e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    3450:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    3452:	8a 81       	ldd	r24, Y+2	; 0x02
    3454:	28 2f       	mov	r18, r24
    3456:	30 e0       	ldi	r19, 0x00	; 0
    3458:	3c 83       	std	Y+4, r19	; 0x04
    345a:	2b 83       	std	Y+3, r18	; 0x03
    345c:	8b 81       	ldd	r24, Y+3	; 0x03
    345e:	9c 81       	ldd	r25, Y+4	; 0x04
    3460:	88 30       	cpi	r24, 0x08	; 8
    3462:	91 05       	cpc	r25, r1
    3464:	09 f4       	brne	.+2      	; 0x3468 <KEYPAD_4x4_adjustKeyNumber+0x26>
    3466:	70 c0       	rjmp	.+224    	; 0x3548 <KEYPAD_4x4_adjustKeyNumber+0x106>
    3468:	2b 81       	ldd	r18, Y+3	; 0x03
    346a:	3c 81       	ldd	r19, Y+4	; 0x04
    346c:	29 30       	cpi	r18, 0x09	; 9
    346e:	31 05       	cpc	r19, r1
    3470:	5c f5       	brge	.+86     	; 0x34c8 <KEYPAD_4x4_adjustKeyNumber+0x86>
    3472:	8b 81       	ldd	r24, Y+3	; 0x03
    3474:	9c 81       	ldd	r25, Y+4	; 0x04
    3476:	84 30       	cpi	r24, 0x04	; 4
    3478:	91 05       	cpc	r25, r1
    347a:	09 f4       	brne	.+2      	; 0x347e <KEYPAD_4x4_adjustKeyNumber+0x3c>
    347c:	59 c0       	rjmp	.+178    	; 0x3530 <KEYPAD_4x4_adjustKeyNumber+0xee>
    347e:	2b 81       	ldd	r18, Y+3	; 0x03
    3480:	3c 81       	ldd	r19, Y+4	; 0x04
    3482:	25 30       	cpi	r18, 0x05	; 5
    3484:	31 05       	cpc	r19, r1
    3486:	9c f4       	brge	.+38     	; 0x34ae <KEYPAD_4x4_adjustKeyNumber+0x6c>
    3488:	8b 81       	ldd	r24, Y+3	; 0x03
    348a:	9c 81       	ldd	r25, Y+4	; 0x04
    348c:	82 30       	cpi	r24, 0x02	; 2
    348e:	91 05       	cpc	r25, r1
    3490:	09 f4       	brne	.+2      	; 0x3494 <KEYPAD_4x4_adjustKeyNumber+0x52>
    3492:	48 c0       	rjmp	.+144    	; 0x3524 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    3494:	2b 81       	ldd	r18, Y+3	; 0x03
    3496:	3c 81       	ldd	r19, Y+4	; 0x04
    3498:	23 30       	cpi	r18, 0x03	; 3
    349a:	31 05       	cpc	r19, r1
    349c:	0c f0       	brlt	.+2      	; 0x34a0 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    349e:	45 c0       	rjmp	.+138    	; 0x352a <KEYPAD_4x4_adjustKeyNumber+0xe8>
    34a0:	8b 81       	ldd	r24, Y+3	; 0x03
    34a2:	9c 81       	ldd	r25, Y+4	; 0x04
    34a4:	81 30       	cpi	r24, 0x01	; 1
    34a6:	91 05       	cpc	r25, r1
    34a8:	09 f4       	brne	.+2      	; 0x34ac <KEYPAD_4x4_adjustKeyNumber+0x6a>
    34aa:	39 c0       	rjmp	.+114    	; 0x351e <KEYPAD_4x4_adjustKeyNumber+0xdc>
    34ac:	67 c0       	rjmp	.+206    	; 0x357c <KEYPAD_4x4_adjustKeyNumber+0x13a>
    34ae:	2b 81       	ldd	r18, Y+3	; 0x03
    34b0:	3c 81       	ldd	r19, Y+4	; 0x04
    34b2:	26 30       	cpi	r18, 0x06	; 6
    34b4:	31 05       	cpc	r19, r1
    34b6:	09 f4       	brne	.+2      	; 0x34ba <KEYPAD_4x4_adjustKeyNumber+0x78>
    34b8:	41 c0       	rjmp	.+130    	; 0x353c <KEYPAD_4x4_adjustKeyNumber+0xfa>
    34ba:	8b 81       	ldd	r24, Y+3	; 0x03
    34bc:	9c 81       	ldd	r25, Y+4	; 0x04
    34be:	87 30       	cpi	r24, 0x07	; 7
    34c0:	91 05       	cpc	r25, r1
    34c2:	0c f0       	brlt	.+2      	; 0x34c6 <KEYPAD_4x4_adjustKeyNumber+0x84>
    34c4:	3e c0       	rjmp	.+124    	; 0x3542 <KEYPAD_4x4_adjustKeyNumber+0x100>
    34c6:	37 c0       	rjmp	.+110    	; 0x3536 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    34c8:	2b 81       	ldd	r18, Y+3	; 0x03
    34ca:	3c 81       	ldd	r19, Y+4	; 0x04
    34cc:	2c 30       	cpi	r18, 0x0C	; 12
    34ce:	31 05       	cpc	r19, r1
    34d0:	09 f4       	brne	.+2      	; 0x34d4 <KEYPAD_4x4_adjustKeyNumber+0x92>
    34d2:	46 c0       	rjmp	.+140    	; 0x3560 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    34d4:	8b 81       	ldd	r24, Y+3	; 0x03
    34d6:	9c 81       	ldd	r25, Y+4	; 0x04
    34d8:	8d 30       	cpi	r24, 0x0D	; 13
    34da:	91 05       	cpc	r25, r1
    34dc:	5c f4       	brge	.+22     	; 0x34f4 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    34de:	2b 81       	ldd	r18, Y+3	; 0x03
    34e0:	3c 81       	ldd	r19, Y+4	; 0x04
    34e2:	2a 30       	cpi	r18, 0x0A	; 10
    34e4:	31 05       	cpc	r19, r1
    34e6:	b1 f1       	breq	.+108    	; 0x3554 <KEYPAD_4x4_adjustKeyNumber+0x112>
    34e8:	8b 81       	ldd	r24, Y+3	; 0x03
    34ea:	9c 81       	ldd	r25, Y+4	; 0x04
    34ec:	8b 30       	cpi	r24, 0x0B	; 11
    34ee:	91 05       	cpc	r25, r1
    34f0:	a4 f5       	brge	.+104    	; 0x355a <KEYPAD_4x4_adjustKeyNumber+0x118>
    34f2:	2d c0       	rjmp	.+90     	; 0x354e <KEYPAD_4x4_adjustKeyNumber+0x10c>
    34f4:	2b 81       	ldd	r18, Y+3	; 0x03
    34f6:	3c 81       	ldd	r19, Y+4	; 0x04
    34f8:	2e 30       	cpi	r18, 0x0E	; 14
    34fa:	31 05       	cpc	r19, r1
    34fc:	b9 f1       	breq	.+110    	; 0x356c <KEYPAD_4x4_adjustKeyNumber+0x12a>
    34fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3500:	9c 81       	ldd	r25, Y+4	; 0x04
    3502:	8e 30       	cpi	r24, 0x0E	; 14
    3504:	91 05       	cpc	r25, r1
    3506:	7c f1       	brlt	.+94     	; 0x3566 <KEYPAD_4x4_adjustKeyNumber+0x124>
    3508:	2b 81       	ldd	r18, Y+3	; 0x03
    350a:	3c 81       	ldd	r19, Y+4	; 0x04
    350c:	2f 30       	cpi	r18, 0x0F	; 15
    350e:	31 05       	cpc	r19, r1
    3510:	79 f1       	breq	.+94     	; 0x3570 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    3512:	8b 81       	ldd	r24, Y+3	; 0x03
    3514:	9c 81       	ldd	r25, Y+4	; 0x04
    3516:	80 31       	cpi	r24, 0x10	; 16
    3518:	91 05       	cpc	r25, r1
    351a:	69 f1       	breq	.+90     	; 0x3576 <KEYPAD_4x4_adjustKeyNumber+0x134>
    351c:	2f c0       	rjmp	.+94     	; 0x357c <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
	case 1: keypad_button = 7;
    351e:	87 e0       	ldi	r24, 0x07	; 7
    3520:	89 83       	std	Y+1, r24	; 0x01
    3522:	2e c0       	rjmp	.+92     	; 0x3580 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 2: keypad_button = 8;
    3524:	88 e0       	ldi	r24, 0x08	; 8
    3526:	89 83       	std	Y+1, r24	; 0x01
    3528:	2b c0       	rjmp	.+86     	; 0x3580 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 3: keypad_button = 9;
    352a:	89 e0       	ldi	r24, 0x09	; 9
    352c:	89 83       	std	Y+1, r24	; 0x01
    352e:	28 c0       	rjmp	.+80     	; 0x3580 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 4: keypad_button = '%'; // ASCII Code of %
    3530:	85 e2       	ldi	r24, 0x25	; 37
    3532:	89 83       	std	Y+1, r24	; 0x01
    3534:	25 c0       	rjmp	.+74     	; 0x3580 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 5: keypad_button = 4;
    3536:	84 e0       	ldi	r24, 0x04	; 4
    3538:	89 83       	std	Y+1, r24	; 0x01
    353a:	22 c0       	rjmp	.+68     	; 0x3580 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 6: keypad_button = 5;
    353c:	85 e0       	ldi	r24, 0x05	; 5
    353e:	89 83       	std	Y+1, r24	; 0x01
    3540:	1f c0       	rjmp	.+62     	; 0x3580 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 7: keypad_button = 6;
    3542:	86 e0       	ldi	r24, 0x06	; 6
    3544:	89 83       	std	Y+1, r24	; 0x01
    3546:	1c c0       	rjmp	.+56     	; 0x3580 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 8: keypad_button = '*'; /* ASCII Code of '*' */
    3548:	8a e2       	ldi	r24, 0x2A	; 42
    354a:	89 83       	std	Y+1, r24	; 0x01
    354c:	19 c0       	rjmp	.+50     	; 0x3580 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 9: keypad_button = 1;
    354e:	81 e0       	ldi	r24, 0x01	; 1
    3550:	89 83       	std	Y+1, r24	; 0x01
    3552:	16 c0       	rjmp	.+44     	; 0x3580 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 10: keypad_button = 2;
    3554:	82 e0       	ldi	r24, 0x02	; 2
    3556:	89 83       	std	Y+1, r24	; 0x01
    3558:	13 c0       	rjmp	.+38     	; 0x3580 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 11: keypad_button = 3;
    355a:	83 e0       	ldi	r24, 0x03	; 3
    355c:	89 83       	std	Y+1, r24	; 0x01
    355e:	10 c0       	rjmp	.+32     	; 0x3580 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 12: keypad_button = '-'; /* ASCII Code of '-' */
    3560:	8d e2       	ldi	r24, 0x2D	; 45
    3562:	89 83       	std	Y+1, r24	; 0x01
    3564:	0d c0       	rjmp	.+26     	; 0x3580 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 13: keypad_button = 13;  /* ASCII of Enter */
    3566:	8d e0       	ldi	r24, 0x0D	; 13
    3568:	89 83       	std	Y+1, r24	; 0x01
    356a:	0a c0       	rjmp	.+20     	; 0x3580 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 14: keypad_button = 0;
    356c:	19 82       	std	Y+1, r1	; 0x01
    356e:	08 c0       	rjmp	.+16     	; 0x3580 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 15: keypad_button = '='; /* ASCII Code of '=' */
    3570:	8d e3       	ldi	r24, 0x3D	; 61
    3572:	89 83       	std	Y+1, r24	; 0x01
    3574:	05 c0       	rjmp	.+10     	; 0x3580 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 16: keypad_button = '+'; /* ASCII Code of '+' */
    3576:	8b e2       	ldi	r24, 0x2B	; 43
    3578:	89 83       	std	Y+1, r24	; 0x01
    357a:	02 c0       	rjmp	.+4      	; 0x3580 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	default: keypad_button = button_number;
    357c:	8a 81       	ldd	r24, Y+2	; 0x02
    357e:	89 83       	std	Y+1, r24	; 0x01
	break;
	}
	return keypad_button;
    3580:	89 81       	ldd	r24, Y+1	; 0x01
}
    3582:	0f 90       	pop	r0
    3584:	0f 90       	pop	r0
    3586:	0f 90       	pop	r0
    3588:	0f 90       	pop	r0
    358a:	cf 91       	pop	r28
    358c:	df 91       	pop	r29
    358e:	08 95       	ret

00003590 <__vector_9>:

/*******************************************************************************
 *                           ISR Functions                                     *
 *******************************************************************************/

ISR(TIMER0_OVF_vect){
    3590:	1f 92       	push	r1
    3592:	0f 92       	push	r0
    3594:	0f b6       	in	r0, 0x3f	; 63
    3596:	0f 92       	push	r0
    3598:	11 24       	eor	r1, r1
    359a:	2f 93       	push	r18
    359c:	3f 93       	push	r19
    359e:	4f 93       	push	r20
    35a0:	5f 93       	push	r21
    35a2:	6f 93       	push	r22
    35a4:	7f 93       	push	r23
    35a6:	8f 93       	push	r24
    35a8:	9f 93       	push	r25
    35aa:	af 93       	push	r26
    35ac:	bf 93       	push	r27
    35ae:	ef 93       	push	r30
    35b0:	ff 93       	push	r31
    35b2:	df 93       	push	r29
    35b4:	cf 93       	push	r28
    35b6:	cd b7       	in	r28, 0x3d	; 61
    35b8:	de b7       	in	r29, 0x3e	; 62
	if(t0_callBackPtr != NULL_PTR)
    35ba:	80 91 68 01 	lds	r24, 0x0168
    35be:	90 91 69 01 	lds	r25, 0x0169
    35c2:	00 97       	sbiw	r24, 0x00	; 0
    35c4:	29 f0       	breq	.+10     	; 0x35d0 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*t0_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    35c6:	e0 91 68 01 	lds	r30, 0x0168
    35ca:	f0 91 69 01 	lds	r31, 0x0169
    35ce:	09 95       	icall
	}
}
    35d0:	cf 91       	pop	r28
    35d2:	df 91       	pop	r29
    35d4:	ff 91       	pop	r31
    35d6:	ef 91       	pop	r30
    35d8:	bf 91       	pop	r27
    35da:	af 91       	pop	r26
    35dc:	9f 91       	pop	r25
    35de:	8f 91       	pop	r24
    35e0:	7f 91       	pop	r23
    35e2:	6f 91       	pop	r22
    35e4:	5f 91       	pop	r21
    35e6:	4f 91       	pop	r20
    35e8:	3f 91       	pop	r19
    35ea:	2f 91       	pop	r18
    35ec:	0f 90       	pop	r0
    35ee:	0f be       	out	0x3f, r0	; 63
    35f0:	0f 90       	pop	r0
    35f2:	1f 90       	pop	r1
    35f4:	18 95       	reti

000035f6 <__vector_19>:

ISR(TIMER0_COMP_vect){
    35f6:	1f 92       	push	r1
    35f8:	0f 92       	push	r0
    35fa:	0f b6       	in	r0, 0x3f	; 63
    35fc:	0f 92       	push	r0
    35fe:	11 24       	eor	r1, r1
    3600:	2f 93       	push	r18
    3602:	3f 93       	push	r19
    3604:	4f 93       	push	r20
    3606:	5f 93       	push	r21
    3608:	6f 93       	push	r22
    360a:	7f 93       	push	r23
    360c:	8f 93       	push	r24
    360e:	9f 93       	push	r25
    3610:	af 93       	push	r26
    3612:	bf 93       	push	r27
    3614:	ef 93       	push	r30
    3616:	ff 93       	push	r31
    3618:	df 93       	push	r29
    361a:	cf 93       	push	r28
    361c:	cd b7       	in	r28, 0x3d	; 61
    361e:	de b7       	in	r29, 0x3e	; 62
	if(t0_callBackPtr != NULL_PTR)
    3620:	80 91 68 01 	lds	r24, 0x0168
    3624:	90 91 69 01 	lds	r25, 0x0169
    3628:	00 97       	sbiw	r24, 0x00	; 0
    362a:	29 f0       	breq	.+10     	; 0x3636 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*t0_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    362c:	e0 91 68 01 	lds	r30, 0x0168
    3630:	f0 91 69 01 	lds	r31, 0x0169
    3634:	09 95       	icall
	}
}
    3636:	cf 91       	pop	r28
    3638:	df 91       	pop	r29
    363a:	ff 91       	pop	r31
    363c:	ef 91       	pop	r30
    363e:	bf 91       	pop	r27
    3640:	af 91       	pop	r26
    3642:	9f 91       	pop	r25
    3644:	8f 91       	pop	r24
    3646:	7f 91       	pop	r23
    3648:	6f 91       	pop	r22
    364a:	5f 91       	pop	r21
    364c:	4f 91       	pop	r20
    364e:	3f 91       	pop	r19
    3650:	2f 91       	pop	r18
    3652:	0f 90       	pop	r0
    3654:	0f be       	out	0x3f, r0	; 63
    3656:	0f 90       	pop	r0
    3658:	1f 90       	pop	r1
    365a:	18 95       	reti

0000365c <__vector_8>:

ISR(TIMER1_OVF_vect){
    365c:	1f 92       	push	r1
    365e:	0f 92       	push	r0
    3660:	0f b6       	in	r0, 0x3f	; 63
    3662:	0f 92       	push	r0
    3664:	11 24       	eor	r1, r1
    3666:	2f 93       	push	r18
    3668:	3f 93       	push	r19
    366a:	4f 93       	push	r20
    366c:	5f 93       	push	r21
    366e:	6f 93       	push	r22
    3670:	7f 93       	push	r23
    3672:	8f 93       	push	r24
    3674:	9f 93       	push	r25
    3676:	af 93       	push	r26
    3678:	bf 93       	push	r27
    367a:	ef 93       	push	r30
    367c:	ff 93       	push	r31
    367e:	df 93       	push	r29
    3680:	cf 93       	push	r28
    3682:	cd b7       	in	r28, 0x3d	; 61
    3684:	de b7       	in	r29, 0x3e	; 62
	if(t1_callBackPtr != NULL_PTR)
    3686:	80 91 6a 01 	lds	r24, 0x016A
    368a:	90 91 6b 01 	lds	r25, 0x016B
    368e:	00 97       	sbiw	r24, 0x00	; 0
    3690:	29 f0       	breq	.+10     	; 0x369c <__vector_8+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*t1_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    3692:	e0 91 6a 01 	lds	r30, 0x016A
    3696:	f0 91 6b 01 	lds	r31, 0x016B
    369a:	09 95       	icall
	}
}
    369c:	cf 91       	pop	r28
    369e:	df 91       	pop	r29
    36a0:	ff 91       	pop	r31
    36a2:	ef 91       	pop	r30
    36a4:	bf 91       	pop	r27
    36a6:	af 91       	pop	r26
    36a8:	9f 91       	pop	r25
    36aa:	8f 91       	pop	r24
    36ac:	7f 91       	pop	r23
    36ae:	6f 91       	pop	r22
    36b0:	5f 91       	pop	r21
    36b2:	4f 91       	pop	r20
    36b4:	3f 91       	pop	r19
    36b6:	2f 91       	pop	r18
    36b8:	0f 90       	pop	r0
    36ba:	0f be       	out	0x3f, r0	; 63
    36bc:	0f 90       	pop	r0
    36be:	1f 90       	pop	r1
    36c0:	18 95       	reti

000036c2 <__vector_6>:

ISR(TIMER1_COMPA_vect){
    36c2:	1f 92       	push	r1
    36c4:	0f 92       	push	r0
    36c6:	0f b6       	in	r0, 0x3f	; 63
    36c8:	0f 92       	push	r0
    36ca:	11 24       	eor	r1, r1
    36cc:	2f 93       	push	r18
    36ce:	3f 93       	push	r19
    36d0:	4f 93       	push	r20
    36d2:	5f 93       	push	r21
    36d4:	6f 93       	push	r22
    36d6:	7f 93       	push	r23
    36d8:	8f 93       	push	r24
    36da:	9f 93       	push	r25
    36dc:	af 93       	push	r26
    36de:	bf 93       	push	r27
    36e0:	ef 93       	push	r30
    36e2:	ff 93       	push	r31
    36e4:	df 93       	push	r29
    36e6:	cf 93       	push	r28
    36e8:	cd b7       	in	r28, 0x3d	; 61
    36ea:	de b7       	in	r29, 0x3e	; 62
	if(t1_callBackPtr != NULL_PTR)
    36ec:	80 91 6a 01 	lds	r24, 0x016A
    36f0:	90 91 6b 01 	lds	r25, 0x016B
    36f4:	00 97       	sbiw	r24, 0x00	; 0
    36f6:	29 f0       	breq	.+10     	; 0x3702 <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*t1_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    36f8:	e0 91 6a 01 	lds	r30, 0x016A
    36fc:	f0 91 6b 01 	lds	r31, 0x016B
    3700:	09 95       	icall
	}
}
    3702:	cf 91       	pop	r28
    3704:	df 91       	pop	r29
    3706:	ff 91       	pop	r31
    3708:	ef 91       	pop	r30
    370a:	bf 91       	pop	r27
    370c:	af 91       	pop	r26
    370e:	9f 91       	pop	r25
    3710:	8f 91       	pop	r24
    3712:	7f 91       	pop	r23
    3714:	6f 91       	pop	r22
    3716:	5f 91       	pop	r21
    3718:	4f 91       	pop	r20
    371a:	3f 91       	pop	r19
    371c:	2f 91       	pop	r18
    371e:	0f 90       	pop	r0
    3720:	0f be       	out	0x3f, r0	; 63
    3722:	0f 90       	pop	r0
    3724:	1f 90       	pop	r1
    3726:	18 95       	reti

00003728 <__vector_4>:

ISR(TIMER2_OVF_vect){
    3728:	1f 92       	push	r1
    372a:	0f 92       	push	r0
    372c:	0f b6       	in	r0, 0x3f	; 63
    372e:	0f 92       	push	r0
    3730:	11 24       	eor	r1, r1
    3732:	2f 93       	push	r18
    3734:	3f 93       	push	r19
    3736:	4f 93       	push	r20
    3738:	5f 93       	push	r21
    373a:	6f 93       	push	r22
    373c:	7f 93       	push	r23
    373e:	8f 93       	push	r24
    3740:	9f 93       	push	r25
    3742:	af 93       	push	r26
    3744:	bf 93       	push	r27
    3746:	ef 93       	push	r30
    3748:	ff 93       	push	r31
    374a:	df 93       	push	r29
    374c:	cf 93       	push	r28
    374e:	cd b7       	in	r28, 0x3d	; 61
    3750:	de b7       	in	r29, 0x3e	; 62
	if(t2_callBackPtr != NULL_PTR)
    3752:	80 91 6c 01 	lds	r24, 0x016C
    3756:	90 91 6d 01 	lds	r25, 0x016D
    375a:	00 97       	sbiw	r24, 0x00	; 0
    375c:	29 f0       	breq	.+10     	; 0x3768 <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*t2_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    375e:	e0 91 6c 01 	lds	r30, 0x016C
    3762:	f0 91 6d 01 	lds	r31, 0x016D
    3766:	09 95       	icall
	}
}
    3768:	cf 91       	pop	r28
    376a:	df 91       	pop	r29
    376c:	ff 91       	pop	r31
    376e:	ef 91       	pop	r30
    3770:	bf 91       	pop	r27
    3772:	af 91       	pop	r26
    3774:	9f 91       	pop	r25
    3776:	8f 91       	pop	r24
    3778:	7f 91       	pop	r23
    377a:	6f 91       	pop	r22
    377c:	5f 91       	pop	r21
    377e:	4f 91       	pop	r20
    3780:	3f 91       	pop	r19
    3782:	2f 91       	pop	r18
    3784:	0f 90       	pop	r0
    3786:	0f be       	out	0x3f, r0	; 63
    3788:	0f 90       	pop	r0
    378a:	1f 90       	pop	r1
    378c:	18 95       	reti

0000378e <__vector_3>:

ISR(TIMER2_COMP_vect){
    378e:	1f 92       	push	r1
    3790:	0f 92       	push	r0
    3792:	0f b6       	in	r0, 0x3f	; 63
    3794:	0f 92       	push	r0
    3796:	11 24       	eor	r1, r1
    3798:	2f 93       	push	r18
    379a:	3f 93       	push	r19
    379c:	4f 93       	push	r20
    379e:	5f 93       	push	r21
    37a0:	6f 93       	push	r22
    37a2:	7f 93       	push	r23
    37a4:	8f 93       	push	r24
    37a6:	9f 93       	push	r25
    37a8:	af 93       	push	r26
    37aa:	bf 93       	push	r27
    37ac:	ef 93       	push	r30
    37ae:	ff 93       	push	r31
    37b0:	df 93       	push	r29
    37b2:	cf 93       	push	r28
    37b4:	cd b7       	in	r28, 0x3d	; 61
    37b6:	de b7       	in	r29, 0x3e	; 62
	if(t2_callBackPtr != NULL_PTR)
    37b8:	80 91 6c 01 	lds	r24, 0x016C
    37bc:	90 91 6d 01 	lds	r25, 0x016D
    37c0:	00 97       	sbiw	r24, 0x00	; 0
    37c2:	29 f0       	breq	.+10     	; 0x37ce <__vector_3+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*t2_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    37c4:	e0 91 6c 01 	lds	r30, 0x016C
    37c8:	f0 91 6d 01 	lds	r31, 0x016D
    37cc:	09 95       	icall
	}
}
    37ce:	cf 91       	pop	r28
    37d0:	df 91       	pop	r29
    37d2:	ff 91       	pop	r31
    37d4:	ef 91       	pop	r30
    37d6:	bf 91       	pop	r27
    37d8:	af 91       	pop	r26
    37da:	9f 91       	pop	r25
    37dc:	8f 91       	pop	r24
    37de:	7f 91       	pop	r23
    37e0:	6f 91       	pop	r22
    37e2:	5f 91       	pop	r21
    37e4:	4f 91       	pop	r20
    37e6:	3f 91       	pop	r19
    37e8:	2f 91       	pop	r18
    37ea:	0f 90       	pop	r0
    37ec:	0f be       	out	0x3f, r0	; 63
    37ee:	0f 90       	pop	r0
    37f0:	1f 90       	pop	r1
    37f2:	18 95       	reti

000037f4 <Timer_Init>:
 * [Description]   : Function responsible for Initialize the Timer
 *
 * [Args in]       : const Timer_ConfigType * Config_Ptr
 * [Args out]      : NONE
 *******************************************************************************/
void Timer_Init(const Timer_ConfigType * Config_Ptr){
    37f4:	df 93       	push	r29
    37f6:	cf 93       	push	r28
    37f8:	00 d0       	rcall	.+0      	; 0x37fa <Timer_Init+0x6>
    37fa:	cd b7       	in	r28, 0x3d	; 61
    37fc:	de b7       	in	r29, 0x3e	; 62
    37fe:	9a 83       	std	Y+2, r25	; 0x02
    3800:	89 83       	std	Y+1, r24	; 0x01

	if(Config_Ptr->Timer_number == 0){                    /*timer0*/
    3802:	e9 81       	ldd	r30, Y+1	; 0x01
    3804:	fa 81       	ldd	r31, Y+2	; 0x02
    3806:	80 81       	ld	r24, Z
    3808:	88 23       	and	r24, r24
    380a:	09 f0       	breq	.+2      	; 0x380e <Timer_Init+0x1a>
    380c:	4c c0       	rjmp	.+152    	; 0x38a6 <Timer_Init+0xb2>
		TCNT0 = (uint8)(Config_Ptr->iValue);              /*set the initial value*/
    380e:	a2 e5       	ldi	r26, 0x52	; 82
    3810:	b0 e0       	ldi	r27, 0x00	; 0
    3812:	e9 81       	ldd	r30, Y+1	; 0x01
    3814:	fa 81       	ldd	r31, Y+2	; 0x02
    3816:	82 81       	ldd	r24, Z+2	; 0x02
    3818:	93 81       	ldd	r25, Z+3	; 0x03
    381a:	8c 93       	st	X, r24
		TCCR0 = (TCCR0 & 0xF8) | ((Config_Ptr->clock));   /*set clock value*/
    381c:	a3 e5       	ldi	r26, 0x53	; 83
    381e:	b0 e0       	ldi	r27, 0x00	; 0
    3820:	e3 e5       	ldi	r30, 0x53	; 83
    3822:	f0 e0       	ldi	r31, 0x00	; 0
    3824:	80 81       	ld	r24, Z
    3826:	98 2f       	mov	r25, r24
    3828:	98 7f       	andi	r25, 0xF8	; 248
    382a:	e9 81       	ldd	r30, Y+1	; 0x01
    382c:	fa 81       	ldd	r31, Y+2	; 0x02
    382e:	86 81       	ldd	r24, Z+6	; 0x06
    3830:	89 2b       	or	r24, r25
    3832:	8c 93       	st	X, r24

		if(Config_Ptr->mode == overFlow){                 /*overFlow mode*/
    3834:	e9 81       	ldd	r30, Y+1	; 0x01
    3836:	fa 81       	ldd	r31, Y+2	; 0x02
    3838:	81 81       	ldd	r24, Z+1	; 0x01
    383a:	88 23       	and	r24, r24
    383c:	99 f4       	brne	.+38     	; 0x3864 <Timer_Init+0x70>
			CLEAR_BIT(TCCR0,WGM01);
    383e:	a3 e5       	ldi	r26, 0x53	; 83
    3840:	b0 e0       	ldi	r27, 0x00	; 0
    3842:	e3 e5       	ldi	r30, 0x53	; 83
    3844:	f0 e0       	ldi	r31, 0x00	; 0
    3846:	80 81       	ld	r24, Z
    3848:	87 7f       	andi	r24, 0xF7	; 247
    384a:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,WGM00);
    384c:	a3 e5       	ldi	r26, 0x53	; 83
    384e:	b0 e0       	ldi	r27, 0x00	; 0
    3850:	e3 e5       	ldi	r30, 0x53	; 83
    3852:	f0 e0       	ldi	r31, 0x00	; 0
    3854:	80 81       	ld	r24, Z
    3856:	8f 7b       	andi	r24, 0xBF	; 191
    3858:	8c 93       	st	X, r24
			TIMSK = (1<<TOIE0);                           /*Enable timer interrupt*/
    385a:	e9 e5       	ldi	r30, 0x59	; 89
    385c:	f0 e0       	ldi	r31, 0x00	; 0
    385e:	81 e0       	ldi	r24, 0x01	; 1
    3860:	80 83       	st	Z, r24
    3862:	21 c0       	rjmp	.+66     	; 0x38a6 <Timer_Init+0xb2>
		}
		else if(Config_Ptr->mode == compare){             /*compare mode*/
    3864:	e9 81       	ldd	r30, Y+1	; 0x01
    3866:	fa 81       	ldd	r31, Y+2	; 0x02
    3868:	81 81       	ldd	r24, Z+1	; 0x01
    386a:	81 30       	cpi	r24, 0x01	; 1
    386c:	e1 f4       	brne	.+56     	; 0x38a6 <Timer_Init+0xb2>
			SET_BIT(TCCR0,WGM01);
    386e:	a3 e5       	ldi	r26, 0x53	; 83
    3870:	b0 e0       	ldi	r27, 0x00	; 0
    3872:	e3 e5       	ldi	r30, 0x53	; 83
    3874:	f0 e0       	ldi	r31, 0x00	; 0
    3876:	80 81       	ld	r24, Z
    3878:	88 60       	ori	r24, 0x08	; 8
    387a:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,WGM00);
    387c:	a3 e5       	ldi	r26, 0x53	; 83
    387e:	b0 e0       	ldi	r27, 0x00	; 0
    3880:	e3 e5       	ldi	r30, 0x53	; 83
    3882:	f0 e0       	ldi	r31, 0x00	; 0
    3884:	80 81       	ld	r24, Z
    3886:	8f 7b       	andi	r24, 0xBF	; 191
    3888:	8c 93       	st	X, r24
			OCR0   = Config_Ptr->compValue;               /*set the compare value*/
    388a:	ac e5       	ldi	r26, 0x5C	; 92
    388c:	b0 e0       	ldi	r27, 0x00	; 0
    388e:	e9 81       	ldd	r30, Y+1	; 0x01
    3890:	fa 81       	ldd	r31, Y+2	; 0x02
    3892:	84 81       	ldd	r24, Z+4	; 0x04
    3894:	95 81       	ldd	r25, Z+5	; 0x05
    3896:	8c 93       	st	X, r24
			TIMSK |= (1<<OCIE0);                          /*Enable timer interrupt*/
    3898:	a9 e5       	ldi	r26, 0x59	; 89
    389a:	b0 e0       	ldi	r27, 0x00	; 0
    389c:	e9 e5       	ldi	r30, 0x59	; 89
    389e:	f0 e0       	ldi	r31, 0x00	; 0
    38a0:	80 81       	ld	r24, Z
    38a2:	82 60       	ori	r24, 0x02	; 2
    38a4:	8c 93       	st	X, r24
		}

	}

	if(Config_Ptr->Timer_number == 1){                    /*timer1*/
    38a6:	e9 81       	ldd	r30, Y+1	; 0x01
    38a8:	fa 81       	ldd	r31, Y+2	; 0x02
    38aa:	80 81       	ld	r24, Z
    38ac:	81 30       	cpi	r24, 0x01	; 1
    38ae:	09 f0       	breq	.+2      	; 0x38b2 <Timer_Init+0xbe>
    38b0:	6e c0       	rjmp	.+220    	; 0x398e <Timer_Init+0x19a>
		TCNT1 = (uint8)(Config_Ptr->iValue);              /*set the initial value*/
    38b2:	ac e4       	ldi	r26, 0x4C	; 76
    38b4:	b0 e0       	ldi	r27, 0x00	; 0
    38b6:	e9 81       	ldd	r30, Y+1	; 0x01
    38b8:	fa 81       	ldd	r31, Y+2	; 0x02
    38ba:	82 81       	ldd	r24, Z+2	; 0x02
    38bc:	93 81       	ldd	r25, Z+3	; 0x03
    38be:	88 2f       	mov	r24, r24
    38c0:	90 e0       	ldi	r25, 0x00	; 0
    38c2:	11 96       	adiw	r26, 0x01	; 1
    38c4:	9c 93       	st	X, r25
    38c6:	8e 93       	st	-X, r24
		TCCR1B = (TCCR1B & 0xF8) | ((Config_Ptr->clock)); /*set clock value*/
    38c8:	ae e4       	ldi	r26, 0x4E	; 78
    38ca:	b0 e0       	ldi	r27, 0x00	; 0
    38cc:	ee e4       	ldi	r30, 0x4E	; 78
    38ce:	f0 e0       	ldi	r31, 0x00	; 0
    38d0:	80 81       	ld	r24, Z
    38d2:	98 2f       	mov	r25, r24
    38d4:	98 7f       	andi	r25, 0xF8	; 248
    38d6:	e9 81       	ldd	r30, Y+1	; 0x01
    38d8:	fa 81       	ldd	r31, Y+2	; 0x02
    38da:	86 81       	ldd	r24, Z+6	; 0x06
    38dc:	89 2b       	or	r24, r25
    38de:	8c 93       	st	X, r24

		if(Config_Ptr->mode == overFlow){                 /*overFlow mode*/
    38e0:	e9 81       	ldd	r30, Y+1	; 0x01
    38e2:	fa 81       	ldd	r31, Y+2	; 0x02
    38e4:	81 81       	ldd	r24, Z+1	; 0x01
    38e6:	88 23       	and	r24, r24
    38e8:	09 f5       	brne	.+66     	; 0x392c <Timer_Init+0x138>
			CLEAR_BIT(TCCR1A,WGM11);
    38ea:	af e4       	ldi	r26, 0x4F	; 79
    38ec:	b0 e0       	ldi	r27, 0x00	; 0
    38ee:	ef e4       	ldi	r30, 0x4F	; 79
    38f0:	f0 e0       	ldi	r31, 0x00	; 0
    38f2:	80 81       	ld	r24, Z
    38f4:	8d 7f       	andi	r24, 0xFD	; 253
    38f6:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A,WGM10);
    38f8:	af e4       	ldi	r26, 0x4F	; 79
    38fa:	b0 e0       	ldi	r27, 0x00	; 0
    38fc:	ef e4       	ldi	r30, 0x4F	; 79
    38fe:	f0 e0       	ldi	r31, 0x00	; 0
    3900:	80 81       	ld	r24, Z
    3902:	8e 7f       	andi	r24, 0xFE	; 254
    3904:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B,WGM12);
    3906:	ae e4       	ldi	r26, 0x4E	; 78
    3908:	b0 e0       	ldi	r27, 0x00	; 0
    390a:	ee e4       	ldi	r30, 0x4E	; 78
    390c:	f0 e0       	ldi	r31, 0x00	; 0
    390e:	80 81       	ld	r24, Z
    3910:	87 7f       	andi	r24, 0xF7	; 247
    3912:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B,WGM13);
    3914:	ae e4       	ldi	r26, 0x4E	; 78
    3916:	b0 e0       	ldi	r27, 0x00	; 0
    3918:	ee e4       	ldi	r30, 0x4E	; 78
    391a:	f0 e0       	ldi	r31, 0x00	; 0
    391c:	80 81       	ld	r24, Z
    391e:	8f 7e       	andi	r24, 0xEF	; 239
    3920:	8c 93       	st	X, r24
			TIMSK = (1<<TOIE1);                           /*Enable timer interrupt*/
    3922:	e9 e5       	ldi	r30, 0x59	; 89
    3924:	f0 e0       	ldi	r31, 0x00	; 0
    3926:	84 e0       	ldi	r24, 0x04	; 4
    3928:	80 83       	st	Z, r24
    392a:	31 c0       	rjmp	.+98     	; 0x398e <Timer_Init+0x19a>
		}
		else if(Config_Ptr->mode == compare){             /*compare mode*/
    392c:	e9 81       	ldd	r30, Y+1	; 0x01
    392e:	fa 81       	ldd	r31, Y+2	; 0x02
    3930:	81 81       	ldd	r24, Z+1	; 0x01
    3932:	81 30       	cpi	r24, 0x01	; 1
    3934:	61 f5       	brne	.+88     	; 0x398e <Timer_Init+0x19a>
			CLEAR_BIT(TCCR1A,WGM11);
    3936:	af e4       	ldi	r26, 0x4F	; 79
    3938:	b0 e0       	ldi	r27, 0x00	; 0
    393a:	ef e4       	ldi	r30, 0x4F	; 79
    393c:	f0 e0       	ldi	r31, 0x00	; 0
    393e:	80 81       	ld	r24, Z
    3940:	8d 7f       	andi	r24, 0xFD	; 253
    3942:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A,WGM10);
    3944:	af e4       	ldi	r26, 0x4F	; 79
    3946:	b0 e0       	ldi	r27, 0x00	; 0
    3948:	ef e4       	ldi	r30, 0x4F	; 79
    394a:	f0 e0       	ldi	r31, 0x00	; 0
    394c:	80 81       	ld	r24, Z
    394e:	8e 7f       	andi	r24, 0xFE	; 254
    3950:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,WGM12);
    3952:	ae e4       	ldi	r26, 0x4E	; 78
    3954:	b0 e0       	ldi	r27, 0x00	; 0
    3956:	ee e4       	ldi	r30, 0x4E	; 78
    3958:	f0 e0       	ldi	r31, 0x00	; 0
    395a:	80 81       	ld	r24, Z
    395c:	88 60       	ori	r24, 0x08	; 8
    395e:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B,WGM13);
    3960:	ae e4       	ldi	r26, 0x4E	; 78
    3962:	b0 e0       	ldi	r27, 0x00	; 0
    3964:	ee e4       	ldi	r30, 0x4E	; 78
    3966:	f0 e0       	ldi	r31, 0x00	; 0
    3968:	80 81       	ld	r24, Z
    396a:	8f 7e       	andi	r24, 0xEF	; 239
    396c:	8c 93       	st	X, r24
			TIMSK |= (1<<OCIE1A);                         /*Enable timer interrupt*/
    396e:	a9 e5       	ldi	r26, 0x59	; 89
    3970:	b0 e0       	ldi	r27, 0x00	; 0
    3972:	e9 e5       	ldi	r30, 0x59	; 89
    3974:	f0 e0       	ldi	r31, 0x00	; 0
    3976:	80 81       	ld	r24, Z
    3978:	80 61       	ori	r24, 0x10	; 16
    397a:	8c 93       	st	X, r24
			OCR1A  = Config_Ptr->compValue;               /*set the compare value*/
    397c:	aa e4       	ldi	r26, 0x4A	; 74
    397e:	b0 e0       	ldi	r27, 0x00	; 0
    3980:	e9 81       	ldd	r30, Y+1	; 0x01
    3982:	fa 81       	ldd	r31, Y+2	; 0x02
    3984:	84 81       	ldd	r24, Z+4	; 0x04
    3986:	95 81       	ldd	r25, Z+5	; 0x05
    3988:	11 96       	adiw	r26, 0x01	; 1
    398a:	9c 93       	st	X, r25
    398c:	8e 93       	st	-X, r24
		}

	}

	if(Config_Ptr->Timer_number == 2){                    /*timer2*/
    398e:	e9 81       	ldd	r30, Y+1	; 0x01
    3990:	fa 81       	ldd	r31, Y+2	; 0x02
    3992:	80 81       	ld	r24, Z
    3994:	82 30       	cpi	r24, 0x02	; 2
    3996:	09 f0       	breq	.+2      	; 0x399a <Timer_Init+0x1a6>
    3998:	53 c0       	rjmp	.+166    	; 0x3a40 <Timer_Init+0x24c>
		TCNT2 = (uint8)(Config_Ptr->iValue);              /*set the initial value*/
    399a:	a4 e4       	ldi	r26, 0x44	; 68
    399c:	b0 e0       	ldi	r27, 0x00	; 0
    399e:	e9 81       	ldd	r30, Y+1	; 0x01
    39a0:	fa 81       	ldd	r31, Y+2	; 0x02
    39a2:	82 81       	ldd	r24, Z+2	; 0x02
    39a4:	93 81       	ldd	r25, Z+3	; 0x03
    39a6:	8c 93       	st	X, r24
		TCCR2 = (TCCR2 & 0xF8) | ((Config_Ptr->clock));   /*set clock value*/
    39a8:	a5 e4       	ldi	r26, 0x45	; 69
    39aa:	b0 e0       	ldi	r27, 0x00	; 0
    39ac:	e5 e4       	ldi	r30, 0x45	; 69
    39ae:	f0 e0       	ldi	r31, 0x00	; 0
    39b0:	80 81       	ld	r24, Z
    39b2:	98 2f       	mov	r25, r24
    39b4:	98 7f       	andi	r25, 0xF8	; 248
    39b6:	e9 81       	ldd	r30, Y+1	; 0x01
    39b8:	fa 81       	ldd	r31, Y+2	; 0x02
    39ba:	86 81       	ldd	r24, Z+6	; 0x06
    39bc:	89 2b       	or	r24, r25
    39be:	8c 93       	st	X, r24

		if(Config_Ptr->mode == overFlow){                 /*overFlow mode*/
    39c0:	e9 81       	ldd	r30, Y+1	; 0x01
    39c2:	fa 81       	ldd	r31, Y+2	; 0x02
    39c4:	81 81       	ldd	r24, Z+1	; 0x01
    39c6:	88 23       	and	r24, r24
    39c8:	d1 f4       	brne	.+52     	; 0x39fe <Timer_Init+0x20a>
			CLEAR_BIT(TCCR2,WGM21);
    39ca:	a5 e4       	ldi	r26, 0x45	; 69
    39cc:	b0 e0       	ldi	r27, 0x00	; 0
    39ce:	e5 e4       	ldi	r30, 0x45	; 69
    39d0:	f0 e0       	ldi	r31, 0x00	; 0
    39d2:	80 81       	ld	r24, Z
    39d4:	87 7f       	andi	r24, 0xF7	; 247
    39d6:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR2,WGM20);
    39d8:	a5 e4       	ldi	r26, 0x45	; 69
    39da:	b0 e0       	ldi	r27, 0x00	; 0
    39dc:	e5 e4       	ldi	r30, 0x45	; 69
    39de:	f0 e0       	ldi	r31, 0x00	; 0
    39e0:	80 81       	ld	r24, Z
    39e2:	8f 7b       	andi	r24, 0xBF	; 191
    39e4:	8c 93       	st	X, r24
			SET_BIT(TIFR,TOV2);
    39e6:	a8 e5       	ldi	r26, 0x58	; 88
    39e8:	b0 e0       	ldi	r27, 0x00	; 0
    39ea:	e8 e5       	ldi	r30, 0x58	; 88
    39ec:	f0 e0       	ldi	r31, 0x00	; 0
    39ee:	80 81       	ld	r24, Z
    39f0:	80 64       	ori	r24, 0x40	; 64
    39f2:	8c 93       	st	X, r24
			TIMSK = (1<<TOIE2);                           /*Enable timer interrupt*/
    39f4:	e9 e5       	ldi	r30, 0x59	; 89
    39f6:	f0 e0       	ldi	r31, 0x00	; 0
    39f8:	80 e4       	ldi	r24, 0x40	; 64
    39fa:	80 83       	st	Z, r24
    39fc:	21 c0       	rjmp	.+66     	; 0x3a40 <Timer_Init+0x24c>
		}
		else if(Config_Ptr->mode == compare){             /*compare mode*/
    39fe:	e9 81       	ldd	r30, Y+1	; 0x01
    3a00:	fa 81       	ldd	r31, Y+2	; 0x02
    3a02:	81 81       	ldd	r24, Z+1	; 0x01
    3a04:	81 30       	cpi	r24, 0x01	; 1
    3a06:	e1 f4       	brne	.+56     	; 0x3a40 <Timer_Init+0x24c>
			SET_BIT(TCCR2,WGM21);
    3a08:	a5 e4       	ldi	r26, 0x45	; 69
    3a0a:	b0 e0       	ldi	r27, 0x00	; 0
    3a0c:	e5 e4       	ldi	r30, 0x45	; 69
    3a0e:	f0 e0       	ldi	r31, 0x00	; 0
    3a10:	80 81       	ld	r24, Z
    3a12:	88 60       	ori	r24, 0x08	; 8
    3a14:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR2,WGM20);
    3a16:	a5 e4       	ldi	r26, 0x45	; 69
    3a18:	b0 e0       	ldi	r27, 0x00	; 0
    3a1a:	e5 e4       	ldi	r30, 0x45	; 69
    3a1c:	f0 e0       	ldi	r31, 0x00	; 0
    3a1e:	80 81       	ld	r24, Z
    3a20:	8f 7b       	andi	r24, 0xBF	; 191
    3a22:	8c 93       	st	X, r24
			OCR2 = Config_Ptr->compValue;                 /*set the compare value*/
    3a24:	a3 e4       	ldi	r26, 0x43	; 67
    3a26:	b0 e0       	ldi	r27, 0x00	; 0
    3a28:	e9 81       	ldd	r30, Y+1	; 0x01
    3a2a:	fa 81       	ldd	r31, Y+2	; 0x02
    3a2c:	84 81       	ldd	r24, Z+4	; 0x04
    3a2e:	95 81       	ldd	r25, Z+5	; 0x05
    3a30:	8c 93       	st	X, r24
			TIMSK |= (1<<OCIE2);                          /*Enable timer interrupt*/
    3a32:	a9 e5       	ldi	r26, 0x59	; 89
    3a34:	b0 e0       	ldi	r27, 0x00	; 0
    3a36:	e9 e5       	ldi	r30, 0x59	; 89
    3a38:	f0 e0       	ldi	r31, 0x00	; 0
    3a3a:	80 81       	ld	r24, Z
    3a3c:	80 68       	ori	r24, 0x80	; 128
    3a3e:	8c 93       	st	X, r24
		}
	}
}
    3a40:	0f 90       	pop	r0
    3a42:	0f 90       	pop	r0
    3a44:	cf 91       	pop	r28
    3a46:	df 91       	pop	r29
    3a48:	08 95       	ret

00003a4a <Timer_DeInit>:
 * [Description]   : A function to disable timer
 *
 * [Args in]       : NONE
 * [Args out]      : NONE
 *******************************************************************************/
void Timer_DeInit(void){
    3a4a:	df 93       	push	r29
    3a4c:	cf 93       	push	r28
    3a4e:	cd b7       	in	r28, 0x3d	; 61
    3a50:	de b7       	in	r29, 0x3e	; 62
	TCNT0  = 0;
    3a52:	e2 e5       	ldi	r30, 0x52	; 82
    3a54:	f0 e0       	ldi	r31, 0x00	; 0
    3a56:	10 82       	st	Z, r1
	TCNT1  = 0;
    3a58:	ec e4       	ldi	r30, 0x4C	; 76
    3a5a:	f0 e0       	ldi	r31, 0x00	; 0
    3a5c:	11 82       	std	Z+1, r1	; 0x01
    3a5e:	10 82       	st	Z, r1
	TCNT2  = 0;
    3a60:	e4 e4       	ldi	r30, 0x44	; 68
    3a62:	f0 e0       	ldi	r31, 0x00	; 0
    3a64:	10 82       	st	Z, r1
	TCCR0  = 0;
    3a66:	e3 e5       	ldi	r30, 0x53	; 83
    3a68:	f0 e0       	ldi	r31, 0x00	; 0
    3a6a:	10 82       	st	Z, r1
	TCCR2  = 0;
    3a6c:	e5 e4       	ldi	r30, 0x45	; 69
    3a6e:	f0 e0       	ldi	r31, 0x00	; 0
    3a70:	10 82       	st	Z, r1
	TIMSK &= 0X20;  //due to ICU bit
    3a72:	a9 e5       	ldi	r26, 0x59	; 89
    3a74:	b0 e0       	ldi	r27, 0x00	; 0
    3a76:	e9 e5       	ldi	r30, 0x59	; 89
    3a78:	f0 e0       	ldi	r31, 0x00	; 0
    3a7a:	80 81       	ld	r24, Z
    3a7c:	80 72       	andi	r24, 0x20	; 32
    3a7e:	8c 93       	st	X, r24
	OCR0   = 0;
    3a80:	ec e5       	ldi	r30, 0x5C	; 92
    3a82:	f0 e0       	ldi	r31, 0x00	; 0
    3a84:	10 82       	st	Z, r1
	OCR2   = 0;
    3a86:	e3 e4       	ldi	r30, 0x43	; 67
    3a88:	f0 e0       	ldi	r31, 0x00	; 0
    3a8a:	10 82       	st	Z, r1
	TCCR1B = 0;
    3a8c:	ee e4       	ldi	r30, 0x4E	; 78
    3a8e:	f0 e0       	ldi	r31, 0x00	; 0
    3a90:	10 82       	st	Z, r1
	TCCR1A = 0;
    3a92:	ef e4       	ldi	r30, 0x4F	; 79
    3a94:	f0 e0       	ldi	r31, 0x00	; 0
    3a96:	10 82       	st	Z, r1
}
    3a98:	cf 91       	pop	r28
    3a9a:	df 91       	pop	r29
    3a9c:	08 95       	ret

00003a9e <Timer0_SetCallBack>:
 * [Description]   : A function to set the callBack function for timer0
 *
 * [Args in]       : void(*t0_ptr)(void)
 * [Args out]      : NONE
 *******************************************************************************/
void Timer0_SetCallBack(void(*t0_ptr)(void)){
    3a9e:	df 93       	push	r29
    3aa0:	cf 93       	push	r28
    3aa2:	00 d0       	rcall	.+0      	; 0x3aa4 <Timer0_SetCallBack+0x6>
    3aa4:	cd b7       	in	r28, 0x3d	; 61
    3aa6:	de b7       	in	r29, 0x3e	; 62
    3aa8:	9a 83       	std	Y+2, r25	; 0x02
    3aaa:	89 83       	std	Y+1, r24	; 0x01
	t0_callBackPtr = t0_ptr;
    3aac:	89 81       	ldd	r24, Y+1	; 0x01
    3aae:	9a 81       	ldd	r25, Y+2	; 0x02
    3ab0:	90 93 69 01 	sts	0x0169, r25
    3ab4:	80 93 68 01 	sts	0x0168, r24
}
    3ab8:	0f 90       	pop	r0
    3aba:	0f 90       	pop	r0
    3abc:	cf 91       	pop	r28
    3abe:	df 91       	pop	r29
    3ac0:	08 95       	ret

00003ac2 <Timer1_SetCallBack>:
 * [Description]   : A function to set the callBack function for timer1
 *
 * [Args in]       : void(*t1_ptr)(void)
 * [Args out]      : NONE
 *******************************************************************************/
void Timer1_SetCallBack(void(*t1_ptr)(void)){
    3ac2:	df 93       	push	r29
    3ac4:	cf 93       	push	r28
    3ac6:	00 d0       	rcall	.+0      	; 0x3ac8 <Timer1_SetCallBack+0x6>
    3ac8:	cd b7       	in	r28, 0x3d	; 61
    3aca:	de b7       	in	r29, 0x3e	; 62
    3acc:	9a 83       	std	Y+2, r25	; 0x02
    3ace:	89 83       	std	Y+1, r24	; 0x01
	t1_callBackPtr = t1_ptr;
    3ad0:	89 81       	ldd	r24, Y+1	; 0x01
    3ad2:	9a 81       	ldd	r25, Y+2	; 0x02
    3ad4:	90 93 6b 01 	sts	0x016B, r25
    3ad8:	80 93 6a 01 	sts	0x016A, r24
}
    3adc:	0f 90       	pop	r0
    3ade:	0f 90       	pop	r0
    3ae0:	cf 91       	pop	r28
    3ae2:	df 91       	pop	r29
    3ae4:	08 95       	ret

00003ae6 <Timer2_SetCallBack>:
 * [Description]   : A function to set the callBack function for timer2
 *
 * [Args in]       : void(*t2_ptr)(void)
 * [Args out]      : NONE
 *******************************************************************************/
void Timer2_SetCallBack(void(*t2_ptr)(void)){
    3ae6:	df 93       	push	r29
    3ae8:	cf 93       	push	r28
    3aea:	00 d0       	rcall	.+0      	; 0x3aec <Timer2_SetCallBack+0x6>
    3aec:	cd b7       	in	r28, 0x3d	; 61
    3aee:	de b7       	in	r29, 0x3e	; 62
    3af0:	9a 83       	std	Y+2, r25	; 0x02
    3af2:	89 83       	std	Y+1, r24	; 0x01
	t2_callBackPtr = t2_ptr;
    3af4:	89 81       	ldd	r24, Y+1	; 0x01
    3af6:	9a 81       	ldd	r25, Y+2	; 0x02
    3af8:	90 93 6d 01 	sts	0x016D, r25
    3afc:	80 93 6c 01 	sts	0x016C, r24
}
    3b00:	0f 90       	pop	r0
    3b02:	0f 90       	pop	r0
    3b04:	cf 91       	pop	r28
    3b06:	df 91       	pop	r29
    3b08:	08 95       	ret

00003b0a <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    3b0a:	df 93       	push	r29
    3b0c:	cf 93       	push	r28
    3b0e:	00 d0       	rcall	.+0      	; 0x3b10 <UART_init+0x6>
    3b10:	00 d0       	rcall	.+0      	; 0x3b12 <UART_init+0x8>
    3b12:	cd b7       	in	r28, 0x3d	; 61
    3b14:	de b7       	in	r29, 0x3e	; 62
    3b16:	9c 83       	std	Y+4, r25	; 0x04
    3b18:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    3b1a:	1a 82       	std	Y+2, r1	; 0x02
    3b1c:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    3b1e:	eb e2       	ldi	r30, 0x2B	; 43
    3b20:	f0 e0       	ldi	r31, 0x00	; 0
    3b22:	82 e0       	ldi	r24, 0x02	; 2
    3b24:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    3b26:	ea e2       	ldi	r30, 0x2A	; 42
    3b28:	f0 e0       	ldi	r31, 0x00	; 0
    3b2a:	88 e1       	ldi	r24, 0x18	; 24
    3b2c:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    3b2e:	e0 e4       	ldi	r30, 0x40	; 64
    3b30:	f0 e0       	ldi	r31, 0x00	; 0
    3b32:	80 e8       	ldi	r24, 0x80	; 128
    3b34:	80 83       	st	Z, r24
	UCSRC = (UCSRC & 0xF9) | ((Config_Ptr -> Data_bit << 1));
    3b36:	a0 e4       	ldi	r26, 0x40	; 64
    3b38:	b0 e0       	ldi	r27, 0x00	; 0
    3b3a:	e0 e4       	ldi	r30, 0x40	; 64
    3b3c:	f0 e0       	ldi	r31, 0x00	; 0
    3b3e:	80 81       	ld	r24, Z
    3b40:	28 2f       	mov	r18, r24
    3b42:	29 7f       	andi	r18, 0xF9	; 249
    3b44:	eb 81       	ldd	r30, Y+3	; 0x03
    3b46:	fc 81       	ldd	r31, Y+4	; 0x04
    3b48:	82 81       	ldd	r24, Z+2	; 0x02
    3b4a:	88 2f       	mov	r24, r24
    3b4c:	90 e0       	ldi	r25, 0x00	; 0
    3b4e:	88 0f       	add	r24, r24
    3b50:	99 1f       	adc	r25, r25
    3b52:	82 2b       	or	r24, r18
    3b54:	8c 93       	st	X, r24

	UCSRC = (UCSRC & 0xCF) | ((Config_Ptr -> parity_mode << 4));
    3b56:	a0 e4       	ldi	r26, 0x40	; 64
    3b58:	b0 e0       	ldi	r27, 0x00	; 0
    3b5a:	e0 e4       	ldi	r30, 0x40	; 64
    3b5c:	f0 e0       	ldi	r31, 0x00	; 0
    3b5e:	80 81       	ld	r24, Z
    3b60:	28 2f       	mov	r18, r24
    3b62:	2f 7c       	andi	r18, 0xCF	; 207
    3b64:	eb 81       	ldd	r30, Y+3	; 0x03
    3b66:	fc 81       	ldd	r31, Y+4	; 0x04
    3b68:	80 81       	ld	r24, Z
    3b6a:	88 2f       	mov	r24, r24
    3b6c:	90 e0       	ldi	r25, 0x00	; 0
    3b6e:	82 95       	swap	r24
    3b70:	92 95       	swap	r25
    3b72:	90 7f       	andi	r25, 0xF0	; 240
    3b74:	98 27       	eor	r25, r24
    3b76:	80 7f       	andi	r24, 0xF0	; 240
    3b78:	98 27       	eor	r25, r24
    3b7a:	82 2b       	or	r24, r18
    3b7c:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF7) | ((Config_Ptr -> stop_Bit_num << 3));
    3b7e:	a0 e4       	ldi	r26, 0x40	; 64
    3b80:	b0 e0       	ldi	r27, 0x00	; 0
    3b82:	e0 e4       	ldi	r30, 0x40	; 64
    3b84:	f0 e0       	ldi	r31, 0x00	; 0
    3b86:	80 81       	ld	r24, Z
    3b88:	28 2f       	mov	r18, r24
    3b8a:	27 7f       	andi	r18, 0xF7	; 247
    3b8c:	eb 81       	ldd	r30, Y+3	; 0x03
    3b8e:	fc 81       	ldd	r31, Y+4	; 0x04
    3b90:	81 81       	ldd	r24, Z+1	; 0x01
    3b92:	88 2f       	mov	r24, r24
    3b94:	90 e0       	ldi	r25, 0x00	; 0
    3b96:	88 0f       	add	r24, r24
    3b98:	99 1f       	adc	r25, r25
    3b9a:	88 0f       	add	r24, r24
    3b9c:	99 1f       	adc	r25, r25
    3b9e:	88 0f       	add	r24, r24
    3ba0:	99 1f       	adc	r25, r25
    3ba2:	82 2b       	or	r24, r18
    3ba4:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr -> Baud_Rate) * 8UL))) - 1);
    3ba6:	eb 81       	ldd	r30, Y+3	; 0x03
    3ba8:	fc 81       	ldd	r31, Y+4	; 0x04
    3baa:	83 81       	ldd	r24, Z+3	; 0x03
    3bac:	94 81       	ldd	r25, Z+4	; 0x04
    3bae:	a5 81       	ldd	r26, Z+5	; 0x05
    3bb0:	b6 81       	ldd	r27, Z+6	; 0x06
    3bb2:	88 0f       	add	r24, r24
    3bb4:	99 1f       	adc	r25, r25
    3bb6:	aa 1f       	adc	r26, r26
    3bb8:	bb 1f       	adc	r27, r27
    3bba:	88 0f       	add	r24, r24
    3bbc:	99 1f       	adc	r25, r25
    3bbe:	aa 1f       	adc	r26, r26
    3bc0:	bb 1f       	adc	r27, r27
    3bc2:	88 0f       	add	r24, r24
    3bc4:	99 1f       	adc	r25, r25
    3bc6:	aa 1f       	adc	r26, r26
    3bc8:	bb 1f       	adc	r27, r27
    3bca:	9c 01       	movw	r18, r24
    3bcc:	ad 01       	movw	r20, r26
    3bce:	80 e4       	ldi	r24, 0x40	; 64
    3bd0:	92 e4       	ldi	r25, 0x42	; 66
    3bd2:	af e0       	ldi	r26, 0x0F	; 15
    3bd4:	b0 e0       	ldi	r27, 0x00	; 0
    3bd6:	bc 01       	movw	r22, r24
    3bd8:	cd 01       	movw	r24, r26
    3bda:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <__udivmodsi4>
    3bde:	da 01       	movw	r26, r20
    3be0:	c9 01       	movw	r24, r18
    3be2:	01 97       	sbiw	r24, 0x01	; 1
    3be4:	9a 83       	std	Y+2, r25	; 0x02
    3be6:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    3be8:	e0 e4       	ldi	r30, 0x40	; 64
    3bea:	f0 e0       	ldi	r31, 0x00	; 0
    3bec:	89 81       	ldd	r24, Y+1	; 0x01
    3bee:	9a 81       	ldd	r25, Y+2	; 0x02
    3bf0:	89 2f       	mov	r24, r25
    3bf2:	99 27       	eor	r25, r25
    3bf4:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3bf6:	e9 e2       	ldi	r30, 0x29	; 41
    3bf8:	f0 e0       	ldi	r31, 0x00	; 0
    3bfa:	89 81       	ldd	r24, Y+1	; 0x01
    3bfc:	80 83       	st	Z, r24
}
    3bfe:	0f 90       	pop	r0
    3c00:	0f 90       	pop	r0
    3c02:	0f 90       	pop	r0
    3c04:	0f 90       	pop	r0
    3c06:	cf 91       	pop	r28
    3c08:	df 91       	pop	r29
    3c0a:	08 95       	ret

00003c0c <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    3c0c:	df 93       	push	r29
    3c0e:	cf 93       	push	r28
    3c10:	0f 92       	push	r0
    3c12:	cd b7       	in	r28, 0x3d	; 61
    3c14:	de b7       	in	r29, 0x3e	; 62
    3c16:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3c18:	eb e2       	ldi	r30, 0x2B	; 43
    3c1a:	f0 e0       	ldi	r31, 0x00	; 0
    3c1c:	80 81       	ld	r24, Z
    3c1e:	88 2f       	mov	r24, r24
    3c20:	90 e0       	ldi	r25, 0x00	; 0
    3c22:	80 72       	andi	r24, 0x20	; 32
    3c24:	90 70       	andi	r25, 0x00	; 0
    3c26:	00 97       	sbiw	r24, 0x00	; 0
    3c28:	b9 f3       	breq	.-18     	; 0x3c18 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    3c2a:	ec e2       	ldi	r30, 0x2C	; 44
    3c2c:	f0 e0       	ldi	r31, 0x00	; 0
    3c2e:	89 81       	ldd	r24, Y+1	; 0x01
    3c30:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    3c32:	0f 90       	pop	r0
    3c34:	cf 91       	pop	r28
    3c36:	df 91       	pop	r29
    3c38:	08 95       	ret

00003c3a <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    3c3a:	df 93       	push	r29
    3c3c:	cf 93       	push	r28
    3c3e:	cd b7       	in	r28, 0x3d	; 61
    3c40:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3c42:	eb e2       	ldi	r30, 0x2B	; 43
    3c44:	f0 e0       	ldi	r31, 0x00	; 0
    3c46:	80 81       	ld	r24, Z
    3c48:	88 23       	and	r24, r24
    3c4a:	dc f7       	brge	.-10     	; 0x3c42 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    3c4c:	ec e2       	ldi	r30, 0x2C	; 44
    3c4e:	f0 e0       	ldi	r31, 0x00	; 0
    3c50:	80 81       	ld	r24, Z
}
    3c52:	cf 91       	pop	r28
    3c54:	df 91       	pop	r29
    3c56:	08 95       	ret

00003c58 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3c58:	df 93       	push	r29
    3c5a:	cf 93       	push	r28
    3c5c:	00 d0       	rcall	.+0      	; 0x3c5e <UART_sendString+0x6>
    3c5e:	0f 92       	push	r0
    3c60:	cd b7       	in	r28, 0x3d	; 61
    3c62:	de b7       	in	r29, 0x3e	; 62
    3c64:	9b 83       	std	Y+3, r25	; 0x03
    3c66:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3c68:	19 82       	std	Y+1, r1	; 0x01
    3c6a:	0e c0       	rjmp	.+28     	; 0x3c88 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3c6c:	89 81       	ldd	r24, Y+1	; 0x01
    3c6e:	28 2f       	mov	r18, r24
    3c70:	30 e0       	ldi	r19, 0x00	; 0
    3c72:	8a 81       	ldd	r24, Y+2	; 0x02
    3c74:	9b 81       	ldd	r25, Y+3	; 0x03
    3c76:	fc 01       	movw	r30, r24
    3c78:	e2 0f       	add	r30, r18
    3c7a:	f3 1f       	adc	r31, r19
    3c7c:	80 81       	ld	r24, Z
    3c7e:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <UART_sendByte>
		i++;
    3c82:	89 81       	ldd	r24, Y+1	; 0x01
    3c84:	8f 5f       	subi	r24, 0xFF	; 255
    3c86:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3c88:	89 81       	ldd	r24, Y+1	; 0x01
    3c8a:	28 2f       	mov	r18, r24
    3c8c:	30 e0       	ldi	r19, 0x00	; 0
    3c8e:	8a 81       	ldd	r24, Y+2	; 0x02
    3c90:	9b 81       	ldd	r25, Y+3	; 0x03
    3c92:	fc 01       	movw	r30, r24
    3c94:	e2 0f       	add	r30, r18
    3c96:	f3 1f       	adc	r31, r19
    3c98:	80 81       	ld	r24, Z
    3c9a:	88 23       	and	r24, r24
    3c9c:	39 f7       	brne	.-50     	; 0x3c6c <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	 *******************************************************************/
}
    3c9e:	0f 90       	pop	r0
    3ca0:	0f 90       	pop	r0
    3ca2:	0f 90       	pop	r0
    3ca4:	cf 91       	pop	r28
    3ca6:	df 91       	pop	r29
    3ca8:	08 95       	ret

00003caa <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3caa:	0f 93       	push	r16
    3cac:	1f 93       	push	r17
    3cae:	df 93       	push	r29
    3cb0:	cf 93       	push	r28
    3cb2:	00 d0       	rcall	.+0      	; 0x3cb4 <UART_receiveString+0xa>
    3cb4:	0f 92       	push	r0
    3cb6:	cd b7       	in	r28, 0x3d	; 61
    3cb8:	de b7       	in	r29, 0x3e	; 62
    3cba:	9b 83       	std	Y+3, r25	; 0x03
    3cbc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3cbe:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3cc0:	89 81       	ldd	r24, Y+1	; 0x01
    3cc2:	28 2f       	mov	r18, r24
    3cc4:	30 e0       	ldi	r19, 0x00	; 0
    3cc6:	8a 81       	ldd	r24, Y+2	; 0x02
    3cc8:	9b 81       	ldd	r25, Y+3	; 0x03
    3cca:	8c 01       	movw	r16, r24
    3ccc:	02 0f       	add	r16, r18
    3cce:	13 1f       	adc	r17, r19
    3cd0:	0e 94 1d 1e 	call	0x3c3a	; 0x3c3a <UART_recieveByte>
    3cd4:	f8 01       	movw	r30, r16
    3cd6:	80 83       	st	Z, r24
    3cd8:	0f c0       	rjmp	.+30     	; 0x3cf8 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    3cda:	89 81       	ldd	r24, Y+1	; 0x01
    3cdc:	8f 5f       	subi	r24, 0xFF	; 255
    3cde:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3ce0:	89 81       	ldd	r24, Y+1	; 0x01
    3ce2:	28 2f       	mov	r18, r24
    3ce4:	30 e0       	ldi	r19, 0x00	; 0
    3ce6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ce8:	9b 81       	ldd	r25, Y+3	; 0x03
    3cea:	8c 01       	movw	r16, r24
    3cec:	02 0f       	add	r16, r18
    3cee:	13 1f       	adc	r17, r19
    3cf0:	0e 94 1d 1e 	call	0x3c3a	; 0x3c3a <UART_recieveByte>
    3cf4:	f8 01       	movw	r30, r16
    3cf6:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3cf8:	89 81       	ldd	r24, Y+1	; 0x01
    3cfa:	28 2f       	mov	r18, r24
    3cfc:	30 e0       	ldi	r19, 0x00	; 0
    3cfe:	8a 81       	ldd	r24, Y+2	; 0x02
    3d00:	9b 81       	ldd	r25, Y+3	; 0x03
    3d02:	fc 01       	movw	r30, r24
    3d04:	e2 0f       	add	r30, r18
    3d06:	f3 1f       	adc	r31, r19
    3d08:	80 81       	ld	r24, Z
    3d0a:	83 32       	cpi	r24, 0x23	; 35
    3d0c:	31 f7       	brne	.-52     	; 0x3cda <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3d0e:	89 81       	ldd	r24, Y+1	; 0x01
    3d10:	28 2f       	mov	r18, r24
    3d12:	30 e0       	ldi	r19, 0x00	; 0
    3d14:	8a 81       	ldd	r24, Y+2	; 0x02
    3d16:	9b 81       	ldd	r25, Y+3	; 0x03
    3d18:	fc 01       	movw	r30, r24
    3d1a:	e2 0f       	add	r30, r18
    3d1c:	f3 1f       	adc	r31, r19
    3d1e:	10 82       	st	Z, r1
}
    3d20:	0f 90       	pop	r0
    3d22:	0f 90       	pop	r0
    3d24:	0f 90       	pop	r0
    3d26:	cf 91       	pop	r28
    3d28:	df 91       	pop	r29
    3d2a:	1f 91       	pop	r17
    3d2c:	0f 91       	pop	r16
    3d2e:	08 95       	ret

00003d30 <__udivmodsi4>:
    3d30:	a1 e2       	ldi	r26, 0x21	; 33
    3d32:	1a 2e       	mov	r1, r26
    3d34:	aa 1b       	sub	r26, r26
    3d36:	bb 1b       	sub	r27, r27
    3d38:	fd 01       	movw	r30, r26
    3d3a:	0d c0       	rjmp	.+26     	; 0x3d56 <__udivmodsi4_ep>

00003d3c <__udivmodsi4_loop>:
    3d3c:	aa 1f       	adc	r26, r26
    3d3e:	bb 1f       	adc	r27, r27
    3d40:	ee 1f       	adc	r30, r30
    3d42:	ff 1f       	adc	r31, r31
    3d44:	a2 17       	cp	r26, r18
    3d46:	b3 07       	cpc	r27, r19
    3d48:	e4 07       	cpc	r30, r20
    3d4a:	f5 07       	cpc	r31, r21
    3d4c:	20 f0       	brcs	.+8      	; 0x3d56 <__udivmodsi4_ep>
    3d4e:	a2 1b       	sub	r26, r18
    3d50:	b3 0b       	sbc	r27, r19
    3d52:	e4 0b       	sbc	r30, r20
    3d54:	f5 0b       	sbc	r31, r21

00003d56 <__udivmodsi4_ep>:
    3d56:	66 1f       	adc	r22, r22
    3d58:	77 1f       	adc	r23, r23
    3d5a:	88 1f       	adc	r24, r24
    3d5c:	99 1f       	adc	r25, r25
    3d5e:	1a 94       	dec	r1
    3d60:	69 f7       	brne	.-38     	; 0x3d3c <__udivmodsi4_loop>
    3d62:	60 95       	com	r22
    3d64:	70 95       	com	r23
    3d66:	80 95       	com	r24
    3d68:	90 95       	com	r25
    3d6a:	9b 01       	movw	r18, r22
    3d6c:	ac 01       	movw	r20, r24
    3d6e:	bd 01       	movw	r22, r26
    3d70:	cf 01       	movw	r24, r30
    3d72:	08 95       	ret

00003d74 <__prologue_saves__>:
    3d74:	2f 92       	push	r2
    3d76:	3f 92       	push	r3
    3d78:	4f 92       	push	r4
    3d7a:	5f 92       	push	r5
    3d7c:	6f 92       	push	r6
    3d7e:	7f 92       	push	r7
    3d80:	8f 92       	push	r8
    3d82:	9f 92       	push	r9
    3d84:	af 92       	push	r10
    3d86:	bf 92       	push	r11
    3d88:	cf 92       	push	r12
    3d8a:	df 92       	push	r13
    3d8c:	ef 92       	push	r14
    3d8e:	ff 92       	push	r15
    3d90:	0f 93       	push	r16
    3d92:	1f 93       	push	r17
    3d94:	cf 93       	push	r28
    3d96:	df 93       	push	r29
    3d98:	cd b7       	in	r28, 0x3d	; 61
    3d9a:	de b7       	in	r29, 0x3e	; 62
    3d9c:	ca 1b       	sub	r28, r26
    3d9e:	db 0b       	sbc	r29, r27
    3da0:	0f b6       	in	r0, 0x3f	; 63
    3da2:	f8 94       	cli
    3da4:	de bf       	out	0x3e, r29	; 62
    3da6:	0f be       	out	0x3f, r0	; 63
    3da8:	cd bf       	out	0x3d, r28	; 61
    3daa:	09 94       	ijmp

00003dac <__epilogue_restores__>:
    3dac:	2a 88       	ldd	r2, Y+18	; 0x12
    3dae:	39 88       	ldd	r3, Y+17	; 0x11
    3db0:	48 88       	ldd	r4, Y+16	; 0x10
    3db2:	5f 84       	ldd	r5, Y+15	; 0x0f
    3db4:	6e 84       	ldd	r6, Y+14	; 0x0e
    3db6:	7d 84       	ldd	r7, Y+13	; 0x0d
    3db8:	8c 84       	ldd	r8, Y+12	; 0x0c
    3dba:	9b 84       	ldd	r9, Y+11	; 0x0b
    3dbc:	aa 84       	ldd	r10, Y+10	; 0x0a
    3dbe:	b9 84       	ldd	r11, Y+9	; 0x09
    3dc0:	c8 84       	ldd	r12, Y+8	; 0x08
    3dc2:	df 80       	ldd	r13, Y+7	; 0x07
    3dc4:	ee 80       	ldd	r14, Y+6	; 0x06
    3dc6:	fd 80       	ldd	r15, Y+5	; 0x05
    3dc8:	0c 81       	ldd	r16, Y+4	; 0x04
    3dca:	1b 81       	ldd	r17, Y+3	; 0x03
    3dcc:	aa 81       	ldd	r26, Y+2	; 0x02
    3dce:	b9 81       	ldd	r27, Y+1	; 0x01
    3dd0:	ce 0f       	add	r28, r30
    3dd2:	d1 1d       	adc	r29, r1
    3dd4:	0f b6       	in	r0, 0x3f	; 63
    3dd6:	f8 94       	cli
    3dd8:	de bf       	out	0x3e, r29	; 62
    3dda:	0f be       	out	0x3f, r0	; 63
    3ddc:	cd bf       	out	0x3d, r28	; 61
    3dde:	ed 01       	movw	r28, r26
    3de0:	08 95       	ret

00003de2 <itoa>:
    3de2:	fb 01       	movw	r30, r22
    3de4:	9f 01       	movw	r18, r30
    3de6:	e8 94       	clt
    3de8:	42 30       	cpi	r20, 0x02	; 2
    3dea:	c4 f0       	brlt	.+48     	; 0x3e1c <itoa+0x3a>
    3dec:	45 32       	cpi	r20, 0x25	; 37
    3dee:	b4 f4       	brge	.+44     	; 0x3e1c <itoa+0x3a>
    3df0:	4a 30       	cpi	r20, 0x0A	; 10
    3df2:	29 f4       	brne	.+10     	; 0x3dfe <itoa+0x1c>
    3df4:	97 fb       	bst	r25, 7
    3df6:	1e f4       	brtc	.+6      	; 0x3dfe <itoa+0x1c>
    3df8:	90 95       	com	r25
    3dfa:	81 95       	neg	r24
    3dfc:	9f 4f       	sbci	r25, 0xFF	; 255
    3dfe:	64 2f       	mov	r22, r20
    3e00:	77 27       	eor	r23, r23
    3e02:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <__udivmodhi4>
    3e06:	80 5d       	subi	r24, 0xD0	; 208
    3e08:	8a 33       	cpi	r24, 0x3A	; 58
    3e0a:	0c f0       	brlt	.+2      	; 0x3e0e <itoa+0x2c>
    3e0c:	89 5d       	subi	r24, 0xD9	; 217
    3e0e:	81 93       	st	Z+, r24
    3e10:	cb 01       	movw	r24, r22
    3e12:	00 97       	sbiw	r24, 0x00	; 0
    3e14:	a1 f7       	brne	.-24     	; 0x3dfe <itoa+0x1c>
    3e16:	16 f4       	brtc	.+4      	; 0x3e1c <itoa+0x3a>
    3e18:	5d e2       	ldi	r21, 0x2D	; 45
    3e1a:	51 93       	st	Z+, r21
    3e1c:	10 82       	st	Z, r1
    3e1e:	c9 01       	movw	r24, r18
    3e20:	0c 94 12 1f 	jmp	0x3e24	; 0x3e24 <strrev>

00003e24 <strrev>:
    3e24:	dc 01       	movw	r26, r24
    3e26:	fc 01       	movw	r30, r24
    3e28:	67 2f       	mov	r22, r23
    3e2a:	71 91       	ld	r23, Z+
    3e2c:	77 23       	and	r23, r23
    3e2e:	e1 f7       	brne	.-8      	; 0x3e28 <strrev+0x4>
    3e30:	32 97       	sbiw	r30, 0x02	; 2
    3e32:	04 c0       	rjmp	.+8      	; 0x3e3c <strrev+0x18>
    3e34:	7c 91       	ld	r23, X
    3e36:	6d 93       	st	X+, r22
    3e38:	70 83       	st	Z, r23
    3e3a:	62 91       	ld	r22, -Z
    3e3c:	ae 17       	cp	r26, r30
    3e3e:	bf 07       	cpc	r27, r31
    3e40:	c8 f3       	brcs	.-14     	; 0x3e34 <strrev+0x10>
    3e42:	08 95       	ret

00003e44 <__udivmodhi4>:
    3e44:	aa 1b       	sub	r26, r26
    3e46:	bb 1b       	sub	r27, r27
    3e48:	51 e1       	ldi	r21, 0x11	; 17
    3e4a:	07 c0       	rjmp	.+14     	; 0x3e5a <__udivmodhi4_ep>

00003e4c <__udivmodhi4_loop>:
    3e4c:	aa 1f       	adc	r26, r26
    3e4e:	bb 1f       	adc	r27, r27
    3e50:	a6 17       	cp	r26, r22
    3e52:	b7 07       	cpc	r27, r23
    3e54:	10 f0       	brcs	.+4      	; 0x3e5a <__udivmodhi4_ep>
    3e56:	a6 1b       	sub	r26, r22
    3e58:	b7 0b       	sbc	r27, r23

00003e5a <__udivmodhi4_ep>:
    3e5a:	88 1f       	adc	r24, r24
    3e5c:	99 1f       	adc	r25, r25
    3e5e:	5a 95       	dec	r21
    3e60:	a9 f7       	brne	.-22     	; 0x3e4c <__udivmodhi4_loop>
    3e62:	80 95       	com	r24
    3e64:	90 95       	com	r25
    3e66:	bc 01       	movw	r22, r24
    3e68:	cd 01       	movw	r24, r26
    3e6a:	08 95       	ret

00003e6c <_exit>:
    3e6c:	f8 94       	cli

00003e6e <__stop_program>:
    3e6e:	ff cf       	rjmp	.-2      	; 0x3e6e <__stop_program>
